/*
 * eHelply SDK - 1.1.120
 *
 * eHelply SDK for SuperStack Services
 *
 * The version of the OpenAPI document: 1.1.120
 * Contact: support@ehelply.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Ehelply.Sdk.Client.OpenAPIDateConverter;

namespace Ehelply.Sdk.Model
{
    /// <summary>
    /// CreateProjectCredit
    /// </summary>
    [DataContract(Name = "CreateProjectCredit")]
    public partial class CreateProjectCredit : IEquatable<CreateProjectCredit>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateProjectCredit" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateProjectCredit() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateProjectCredit" /> class.
        /// </summary>
        /// <param name="creditsGranted">creditsGranted (required).</param>
        /// <param name="grantedReason">grantedReason (required).</param>
        public CreateProjectCredit(int creditsGranted = default(int), string grantedReason = default(string))
        {
            this.CreditsGranted = creditsGranted;
            // to ensure "grantedReason" is required (not null)
            if (grantedReason == null)
            {
                throw new ArgumentNullException("grantedReason is a required property for CreateProjectCredit and cannot be null");
            }
            this.GrantedReason = grantedReason;
        }

        /// <summary>
        /// Gets or Sets CreditsGranted
        /// </summary>
        [DataMember(Name = "credits_granted", IsRequired = true, EmitDefaultValue = false)]
        public int CreditsGranted { get; set; }

        /// <summary>
        /// Gets or Sets GrantedReason
        /// </summary>
        [DataMember(Name = "granted_reason", IsRequired = true, EmitDefaultValue = false)]
        public string GrantedReason { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateProjectCredit {\n");
            sb.Append("  CreditsGranted: ").Append(CreditsGranted).Append("\n");
            sb.Append("  GrantedReason: ").Append(GrantedReason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateProjectCredit);
        }

        /// <summary>
        /// Returns true if CreateProjectCredit instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateProjectCredit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateProjectCredit input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CreditsGranted == input.CreditsGranted ||
                    this.CreditsGranted.Equals(input.CreditsGranted)
                ) && 
                (
                    this.GrantedReason == input.GrantedReason ||
                    (this.GrantedReason != null &&
                    this.GrantedReason.Equals(input.GrantedReason))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.CreditsGranted.GetHashCode();
                if (this.GrantedReason != null)
                {
                    hashCode = (hashCode * 59) + this.GrantedReason.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
