/*
 * eHelply SDK - 1.1.70
 *
 * eHelply SDK for SuperStack Services
 *
 * The version of the OpenAPI document: 1.1.70
 * Contact: support@ehelply.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Ehelply.Sdk.Client;
using Ehelply.Sdk.Model;

namespace Ehelply.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBillingApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Attach Payment To Project
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>Object</returns>
        Object AttachPaymentToProjectBillingAttachPaymentToProjectPost(BodyAttachPaymentToProjectBillingAttachPaymentToProjectPost bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));

        /// <summary>
        /// Attach Payment To Project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AttachPaymentToProjectBillingAttachPaymentToProjectPostWithHttpInfo(BodyAttachPaymentToProjectBillingAttachPaymentToProjectPost bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));
        /// <summary>
        /// Attach Payment To Project
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>Object</returns>
        Object AttachPaymentToProjectBillingAttachPaymentToProjectPost_0(BodyAttachPaymentToProjectBillingAttachPaymentToProjectPost bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));

        /// <summary>
        /// Attach Payment To Project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AttachPaymentToProjectBillingAttachPaymentToProjectPost_0WithHttpInfo(BodyAttachPaymentToProjectBillingAttachPaymentToProjectPost bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));
        /// <summary>
        /// Create Billing Account
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>StripeAccountResponse</returns>
        StripeAccountResponse CreateBillingAccountBillingCreateBillingAccountPost(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));

        /// <summary>
        /// Create Billing Account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of StripeAccountResponse</returns>
        ApiResponse<StripeAccountResponse> CreateBillingAccountBillingCreateBillingAccountPostWithHttpInfo(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));
        /// <summary>
        /// Create Billing Account
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>StripeAccountResponse</returns>
        StripeAccountResponse CreateBillingAccountBillingCreateBillingAccountPost_0(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));

        /// <summary>
        /// Create Billing Account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of StripeAccountResponse</returns>
        ApiResponse<StripeAccountResponse> CreateBillingAccountBillingCreateBillingAccountPost_0WithHttpInfo(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));
        /// <summary>
        /// Delete Billing Account
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>Object</returns>
        Object DeleteBillingAccountBillingDeleteBillingAccountDelete(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));

        /// <summary>
        /// Delete Billing Account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteBillingAccountBillingDeleteBillingAccountDeleteWithHttpInfo(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));
        /// <summary>
        /// Delete Billing Account
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>Object</returns>
        Object DeleteBillingAccountBillingDeleteBillingAccountDelete_0(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));

        /// <summary>
        /// Delete Billing Account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteBillingAccountBillingDeleteBillingAccountDelete_0WithHttpInfo(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));
        /// <summary>
        /// Get Client Secret
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>Object</returns>
        Object GetClientSecretBillingRetrieveSecretGet(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));

        /// <summary>
        /// Get Client Secret
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetClientSecretBillingRetrieveSecretGetWithHttpInfo(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));
        /// <summary>
        /// Get Client Secret
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>Object</returns>
        Object GetClientSecretBillingRetrieveSecretGet_0(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));

        /// <summary>
        /// Get Client Secret
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetClientSecretBillingRetrieveSecretGet_0WithHttpInfo(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));
        /// <summary>
        /// Has Payment
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>Object</returns>
        Object HasPaymentBillingHasPaymentGet(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));

        /// <summary>
        /// Has Payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> HasPaymentBillingHasPaymentGetWithHttpInfo(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));
        /// <summary>
        /// Has Payment
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>Object</returns>
        Object HasPaymentBillingHasPaymentGet_0(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));

        /// <summary>
        /// Has Payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> HasPaymentBillingHasPaymentGet_0WithHttpInfo(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));
        /// <summary>
        /// Process Payment
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyProcessPaymentBillingProcessPaymentPost"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>Object</returns>
        Object ProcessPaymentBillingProcessPaymentPost(BodyProcessPaymentBillingProcessPaymentPost bodyProcessPaymentBillingProcessPaymentPost, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));

        /// <summary>
        /// Process Payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyProcessPaymentBillingProcessPaymentPost"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ProcessPaymentBillingProcessPaymentPostWithHttpInfo(BodyProcessPaymentBillingProcessPaymentPost bodyProcessPaymentBillingProcessPaymentPost, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));
        /// <summary>
        /// Process Payment
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyProcessPaymentBillingProcessPaymentPost"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>Object</returns>
        Object ProcessPaymentBillingProcessPaymentPost_0(BodyProcessPaymentBillingProcessPaymentPost bodyProcessPaymentBillingProcessPaymentPost, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));

        /// <summary>
        /// Process Payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyProcessPaymentBillingProcessPaymentPost"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ProcessPaymentBillingProcessPaymentPost_0WithHttpInfo(BodyProcessPaymentBillingProcessPaymentPost bodyProcessPaymentBillingProcessPaymentPost, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));
        /// <summary>
        /// Reconcile Payment Methods
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>bool</returns>
        bool ReconcilePaymentMethodsBillingReconcilePaymentGet(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));

        /// <summary>
        /// Reconcile Payment Methods
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of bool</returns>
        ApiResponse<bool> ReconcilePaymentMethodsBillingReconcilePaymentGetWithHttpInfo(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));
        /// <summary>
        /// Remove Payment Method
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>Object</returns>
        Object RemovePaymentMethodBillingRemovePaymentMethodDelete(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));

        /// <summary>
        /// Remove Payment Method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> RemovePaymentMethodBillingRemovePaymentMethodDeleteWithHttpInfo(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));
        /// <summary>
        /// Remove Payment Method
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>Object</returns>
        Object RemovePaymentMethodBillingRemovePaymentMethodDelete_0(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));

        /// <summary>
        /// Remove Payment Method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> RemovePaymentMethodBillingRemovePaymentMethodDelete_0WithHttpInfo(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));
        /// <summary>
        /// View Payment Method
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>List&lt;PaymentMethodResponse&gt;</returns>
        List<PaymentMethodResponse> ViewPaymentMethodBillingViewPaymentMethodGet(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));

        /// <summary>
        /// View Payment Method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of List&lt;PaymentMethodResponse&gt;</returns>
        ApiResponse<List<PaymentMethodResponse>> ViewPaymentMethodBillingViewPaymentMethodGetWithHttpInfo(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));
        /// <summary>
        /// View Payment Method
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>List&lt;PaymentMethodResponse&gt;</returns>
        List<PaymentMethodResponse> ViewPaymentMethodBillingViewPaymentMethodGet_0(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));

        /// <summary>
        /// View Payment Method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of List&lt;PaymentMethodResponse&gt;</returns>
        ApiResponse<List<PaymentMethodResponse>> ViewPaymentMethodBillingViewPaymentMethodGet_0WithHttpInfo(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBillingApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Attach Payment To Project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AttachPaymentToProjectBillingAttachPaymentToProjectPostAsync(BodyAttachPaymentToProjectBillingAttachPaymentToProjectPost bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Attach Payment To Project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AttachPaymentToProjectBillingAttachPaymentToProjectPostWithHttpInfoAsync(BodyAttachPaymentToProjectBillingAttachPaymentToProjectPost bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Attach Payment To Project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AttachPaymentToProjectBillingAttachPaymentToProjectPost_0Async(BodyAttachPaymentToProjectBillingAttachPaymentToProjectPost bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Attach Payment To Project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AttachPaymentToProjectBillingAttachPaymentToProjectPost_0WithHttpInfoAsync(BodyAttachPaymentToProjectBillingAttachPaymentToProjectPost bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Billing Account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StripeAccountResponse</returns>
        System.Threading.Tasks.Task<StripeAccountResponse> CreateBillingAccountBillingCreateBillingAccountPostAsync(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Billing Account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StripeAccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StripeAccountResponse>> CreateBillingAccountBillingCreateBillingAccountPostWithHttpInfoAsync(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Billing Account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StripeAccountResponse</returns>
        System.Threading.Tasks.Task<StripeAccountResponse> CreateBillingAccountBillingCreateBillingAccountPost_0Async(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Billing Account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StripeAccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StripeAccountResponse>> CreateBillingAccountBillingCreateBillingAccountPost_0WithHttpInfoAsync(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Billing Account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteBillingAccountBillingDeleteBillingAccountDeleteAsync(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Billing Account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBillingAccountBillingDeleteBillingAccountDeleteWithHttpInfoAsync(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Billing Account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteBillingAccountBillingDeleteBillingAccountDelete_0Async(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Billing Account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBillingAccountBillingDeleteBillingAccountDelete_0WithHttpInfoAsync(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Client Secret
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetClientSecretBillingRetrieveSecretGetAsync(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Client Secret
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetClientSecretBillingRetrieveSecretGetWithHttpInfoAsync(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Client Secret
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetClientSecretBillingRetrieveSecretGet_0Async(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Client Secret
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetClientSecretBillingRetrieveSecretGet_0WithHttpInfoAsync(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Has Payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> HasPaymentBillingHasPaymentGetAsync(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Has Payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> HasPaymentBillingHasPaymentGetWithHttpInfoAsync(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Has Payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> HasPaymentBillingHasPaymentGet_0Async(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Has Payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> HasPaymentBillingHasPaymentGet_0WithHttpInfoAsync(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Process Payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyProcessPaymentBillingProcessPaymentPost"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ProcessPaymentBillingProcessPaymentPostAsync(BodyProcessPaymentBillingProcessPaymentPost bodyProcessPaymentBillingProcessPaymentPost, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Process Payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyProcessPaymentBillingProcessPaymentPost"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProcessPaymentBillingProcessPaymentPostWithHttpInfoAsync(BodyProcessPaymentBillingProcessPaymentPost bodyProcessPaymentBillingProcessPaymentPost, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Process Payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyProcessPaymentBillingProcessPaymentPost"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ProcessPaymentBillingProcessPaymentPost_0Async(BodyProcessPaymentBillingProcessPaymentPost bodyProcessPaymentBillingProcessPaymentPost, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Process Payment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyProcessPaymentBillingProcessPaymentPost"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProcessPaymentBillingProcessPaymentPost_0WithHttpInfoAsync(BodyProcessPaymentBillingProcessPaymentPost bodyProcessPaymentBillingProcessPaymentPost, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Reconcile Payment Methods
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        System.Threading.Tasks.Task<bool> ReconcilePaymentMethodsBillingReconcilePaymentGetAsync(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Reconcile Payment Methods
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool>> ReconcilePaymentMethodsBillingReconcilePaymentGetWithHttpInfoAsync(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove Payment Method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> RemovePaymentMethodBillingRemovePaymentMethodDeleteAsync(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove Payment Method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemovePaymentMethodBillingRemovePaymentMethodDeleteWithHttpInfoAsync(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove Payment Method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> RemovePaymentMethodBillingRemovePaymentMethodDelete_0Async(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove Payment Method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemovePaymentMethodBillingRemovePaymentMethodDelete_0WithHttpInfoAsync(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// View Payment Method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PaymentMethodResponse&gt;</returns>
        System.Threading.Tasks.Task<List<PaymentMethodResponse>> ViewPaymentMethodBillingViewPaymentMethodGetAsync(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// View Payment Method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PaymentMethodResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PaymentMethodResponse>>> ViewPaymentMethodBillingViewPaymentMethodGetWithHttpInfoAsync(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// View Payment Method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PaymentMethodResponse&gt;</returns>
        System.Threading.Tasks.Task<List<PaymentMethodResponse>> ViewPaymentMethodBillingViewPaymentMethodGet_0Async(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// View Payment Method
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PaymentMethodResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PaymentMethodResponse>>> ViewPaymentMethodBillingViewPaymentMethodGet_0WithHttpInfoAsync(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBillingApi : IBillingApiSync, IBillingApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BillingApi : IBillingApi
    {
        private Ehelply.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BillingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BillingApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BillingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BillingApi(string basePath)
        {
            this.Configuration = Ehelply.Sdk.Client.Configuration.MergeConfigurations(
                Ehelply.Sdk.Client.GlobalConfiguration.Instance,
                new Ehelply.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Ehelply.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Ehelply.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Ehelply.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BillingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BillingApi(Ehelply.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Ehelply.Sdk.Client.Configuration.MergeConfigurations(
                Ehelply.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Ehelply.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Ehelply.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Ehelply.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BillingApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public BillingApi(Ehelply.Sdk.Client.ISynchronousClient client, Ehelply.Sdk.Client.IAsynchronousClient asyncClient, Ehelply.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Ehelply.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Ehelply.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Ehelply.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Ehelply.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Ehelply.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Attach Payment To Project 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>Object</returns>
        public Object AttachPaymentToProjectBillingAttachPaymentToProjectPost(BodyAttachPaymentToProjectBillingAttachPaymentToProjectPost bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = AttachPaymentToProjectBillingAttachPaymentToProjectPostWithHttpInfo(bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Attach Payment To Project 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public Ehelply.Sdk.Client.ApiResponse<Object> AttachPaymentToProjectBillingAttachPaymentToProjectPostWithHttpInfo(BodyAttachPaymentToProjectBillingAttachPaymentToProjectPost bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            // verify the required parameter 'bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost' is set
            if (bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost' when calling BillingApi->AttachPaymentToProjectBillingAttachPaymentToProjectPost");

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }
            localVarRequestOptions.Data = bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/sam/billing/attach_payment_to_project", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AttachPaymentToProjectBillingAttachPaymentToProjectPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Attach Payment To Project 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AttachPaymentToProjectBillingAttachPaymentToProjectPostAsync(BodyAttachPaymentToProjectBillingAttachPaymentToProjectPost bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = await AttachPaymentToProjectBillingAttachPaymentToProjectPostWithHttpInfoAsync(bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Attach Payment To Project 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<Object>> AttachPaymentToProjectBillingAttachPaymentToProjectPostWithHttpInfoAsync(BodyAttachPaymentToProjectBillingAttachPaymentToProjectPost bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost' is set
            if (bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost' when calling BillingApi->AttachPaymentToProjectBillingAttachPaymentToProjectPost");


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }
            localVarRequestOptions.Data = bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/sam/billing/attach_payment_to_project", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AttachPaymentToProjectBillingAttachPaymentToProjectPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Attach Payment To Project 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>Object</returns>
        public Object AttachPaymentToProjectBillingAttachPaymentToProjectPost_0(BodyAttachPaymentToProjectBillingAttachPaymentToProjectPost bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = AttachPaymentToProjectBillingAttachPaymentToProjectPost_0WithHttpInfo(bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Attach Payment To Project 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public Ehelply.Sdk.Client.ApiResponse<Object> AttachPaymentToProjectBillingAttachPaymentToProjectPost_0WithHttpInfo(BodyAttachPaymentToProjectBillingAttachPaymentToProjectPost bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            // verify the required parameter 'bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost' is set
            if (bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost' when calling BillingApi->AttachPaymentToProjectBillingAttachPaymentToProjectPost_0");

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }
            localVarRequestOptions.Data = bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/sam/billing/attach_payment_to_project", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AttachPaymentToProjectBillingAttachPaymentToProjectPost_0", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Attach Payment To Project 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AttachPaymentToProjectBillingAttachPaymentToProjectPost_0Async(BodyAttachPaymentToProjectBillingAttachPaymentToProjectPost bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = await AttachPaymentToProjectBillingAttachPaymentToProjectPost_0WithHttpInfoAsync(bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Attach Payment To Project 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<Object>> AttachPaymentToProjectBillingAttachPaymentToProjectPost_0WithHttpInfoAsync(BodyAttachPaymentToProjectBillingAttachPaymentToProjectPost bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost' is set
            if (bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost' when calling BillingApi->AttachPaymentToProjectBillingAttachPaymentToProjectPost_0");


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }
            localVarRequestOptions.Data = bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/sam/billing/attach_payment_to_project", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AttachPaymentToProjectBillingAttachPaymentToProjectPost_0", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Billing Account 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>StripeAccountResponse</returns>
        public StripeAccountResponse CreateBillingAccountBillingCreateBillingAccountPost(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            Ehelply.Sdk.Client.ApiResponse<StripeAccountResponse> localVarResponse = CreateBillingAccountBillingCreateBillingAccountPostWithHttpInfo(xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Billing Account 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of StripeAccountResponse</returns>
        public Ehelply.Sdk.Client.ApiResponse<StripeAccountResponse> CreateBillingAccountBillingCreateBillingAccountPostWithHttpInfo(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Post<StripeAccountResponse>("/sam/billing/create_billing_account", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBillingAccountBillingCreateBillingAccountPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Billing Account 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StripeAccountResponse</returns>
        public async System.Threading.Tasks.Task<StripeAccountResponse> CreateBillingAccountBillingCreateBillingAccountPostAsync(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<StripeAccountResponse> localVarResponse = await CreateBillingAccountBillingCreateBillingAccountPostWithHttpInfoAsync(xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Billing Account 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StripeAccountResponse)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<StripeAccountResponse>> CreateBillingAccountBillingCreateBillingAccountPostWithHttpInfoAsync(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<StripeAccountResponse>("/sam/billing/create_billing_account", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBillingAccountBillingCreateBillingAccountPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Billing Account 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>StripeAccountResponse</returns>
        public StripeAccountResponse CreateBillingAccountBillingCreateBillingAccountPost_0(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            Ehelply.Sdk.Client.ApiResponse<StripeAccountResponse> localVarResponse = CreateBillingAccountBillingCreateBillingAccountPost_0WithHttpInfo(xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Billing Account 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of StripeAccountResponse</returns>
        public Ehelply.Sdk.Client.ApiResponse<StripeAccountResponse> CreateBillingAccountBillingCreateBillingAccountPost_0WithHttpInfo(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Post<StripeAccountResponse>("/sam/billing/create_billing_account", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBillingAccountBillingCreateBillingAccountPost_0", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Billing Account 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StripeAccountResponse</returns>
        public async System.Threading.Tasks.Task<StripeAccountResponse> CreateBillingAccountBillingCreateBillingAccountPost_0Async(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<StripeAccountResponse> localVarResponse = await CreateBillingAccountBillingCreateBillingAccountPost_0WithHttpInfoAsync(xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Billing Account 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StripeAccountResponse)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<StripeAccountResponse>> CreateBillingAccountBillingCreateBillingAccountPost_0WithHttpInfoAsync(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<StripeAccountResponse>("/sam/billing/create_billing_account", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBillingAccountBillingCreateBillingAccountPost_0", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Billing Account 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>Object</returns>
        public Object DeleteBillingAccountBillingDeleteBillingAccountDelete(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = DeleteBillingAccountBillingDeleteBillingAccountDeleteWithHttpInfo(xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Billing Account 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public Ehelply.Sdk.Client.ApiResponse<Object> DeleteBillingAccountBillingDeleteBillingAccountDeleteWithHttpInfo(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/sam/billing/delete_billing_account", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteBillingAccountBillingDeleteBillingAccountDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Billing Account 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteBillingAccountBillingDeleteBillingAccountDeleteAsync(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = await DeleteBillingAccountBillingDeleteBillingAccountDeleteWithHttpInfoAsync(xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Billing Account 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<Object>> DeleteBillingAccountBillingDeleteBillingAccountDeleteWithHttpInfoAsync(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/sam/billing/delete_billing_account", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteBillingAccountBillingDeleteBillingAccountDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Billing Account 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>Object</returns>
        public Object DeleteBillingAccountBillingDeleteBillingAccountDelete_0(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = DeleteBillingAccountBillingDeleteBillingAccountDelete_0WithHttpInfo(xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Billing Account 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public Ehelply.Sdk.Client.ApiResponse<Object> DeleteBillingAccountBillingDeleteBillingAccountDelete_0WithHttpInfo(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/sam/billing/delete_billing_account", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteBillingAccountBillingDeleteBillingAccountDelete_0", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Billing Account 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteBillingAccountBillingDeleteBillingAccountDelete_0Async(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = await DeleteBillingAccountBillingDeleteBillingAccountDelete_0WithHttpInfoAsync(xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Billing Account 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<Object>> DeleteBillingAccountBillingDeleteBillingAccountDelete_0WithHttpInfoAsync(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/sam/billing/delete_billing_account", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteBillingAccountBillingDeleteBillingAccountDelete_0", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Client Secret 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>Object</returns>
        public Object GetClientSecretBillingRetrieveSecretGet(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = GetClientSecretBillingRetrieveSecretGetWithHttpInfo(xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Client Secret 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public Ehelply.Sdk.Client.ApiResponse<Object> GetClientSecretBillingRetrieveSecretGetWithHttpInfo(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/sam/billing/retrieve_secret", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClientSecretBillingRetrieveSecretGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Client Secret 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetClientSecretBillingRetrieveSecretGetAsync(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = await GetClientSecretBillingRetrieveSecretGetWithHttpInfoAsync(xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Client Secret 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<Object>> GetClientSecretBillingRetrieveSecretGetWithHttpInfoAsync(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/sam/billing/retrieve_secret", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClientSecretBillingRetrieveSecretGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Client Secret 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>Object</returns>
        public Object GetClientSecretBillingRetrieveSecretGet_0(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = GetClientSecretBillingRetrieveSecretGet_0WithHttpInfo(xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Client Secret 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public Ehelply.Sdk.Client.ApiResponse<Object> GetClientSecretBillingRetrieveSecretGet_0WithHttpInfo(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/sam/billing/retrieve_secret", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClientSecretBillingRetrieveSecretGet_0", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Client Secret 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetClientSecretBillingRetrieveSecretGet_0Async(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = await GetClientSecretBillingRetrieveSecretGet_0WithHttpInfoAsync(xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Client Secret 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<Object>> GetClientSecretBillingRetrieveSecretGet_0WithHttpInfoAsync(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/sam/billing/retrieve_secret", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClientSecretBillingRetrieveSecretGet_0", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Has Payment 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>Object</returns>
        public Object HasPaymentBillingHasPaymentGet(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = HasPaymentBillingHasPaymentGetWithHttpInfo(xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Has Payment 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public Ehelply.Sdk.Client.ApiResponse<Object> HasPaymentBillingHasPaymentGetWithHttpInfo(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/sam/billing/has_payment", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HasPaymentBillingHasPaymentGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Has Payment 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> HasPaymentBillingHasPaymentGetAsync(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = await HasPaymentBillingHasPaymentGetWithHttpInfoAsync(xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Has Payment 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<Object>> HasPaymentBillingHasPaymentGetWithHttpInfoAsync(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/sam/billing/has_payment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HasPaymentBillingHasPaymentGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Has Payment 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>Object</returns>
        public Object HasPaymentBillingHasPaymentGet_0(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = HasPaymentBillingHasPaymentGet_0WithHttpInfo(xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Has Payment 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public Ehelply.Sdk.Client.ApiResponse<Object> HasPaymentBillingHasPaymentGet_0WithHttpInfo(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/sam/billing/has_payment", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HasPaymentBillingHasPaymentGet_0", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Has Payment 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> HasPaymentBillingHasPaymentGet_0Async(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = await HasPaymentBillingHasPaymentGet_0WithHttpInfoAsync(xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Has Payment 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<Object>> HasPaymentBillingHasPaymentGet_0WithHttpInfoAsync(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/sam/billing/has_payment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HasPaymentBillingHasPaymentGet_0", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Process Payment 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyProcessPaymentBillingProcessPaymentPost"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>Object</returns>
        public Object ProcessPaymentBillingProcessPaymentPost(BodyProcessPaymentBillingProcessPaymentPost bodyProcessPaymentBillingProcessPaymentPost, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = ProcessPaymentBillingProcessPaymentPostWithHttpInfo(bodyProcessPaymentBillingProcessPaymentPost, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Process Payment 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyProcessPaymentBillingProcessPaymentPost"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public Ehelply.Sdk.Client.ApiResponse<Object> ProcessPaymentBillingProcessPaymentPostWithHttpInfo(BodyProcessPaymentBillingProcessPaymentPost bodyProcessPaymentBillingProcessPaymentPost, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            // verify the required parameter 'bodyProcessPaymentBillingProcessPaymentPost' is set
            if (bodyProcessPaymentBillingProcessPaymentPost == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'bodyProcessPaymentBillingProcessPaymentPost' when calling BillingApi->ProcessPaymentBillingProcessPaymentPost");

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }
            localVarRequestOptions.Data = bodyProcessPaymentBillingProcessPaymentPost;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/sam/billing/process_payment", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProcessPaymentBillingProcessPaymentPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Process Payment 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyProcessPaymentBillingProcessPaymentPost"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ProcessPaymentBillingProcessPaymentPostAsync(BodyProcessPaymentBillingProcessPaymentPost bodyProcessPaymentBillingProcessPaymentPost, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = await ProcessPaymentBillingProcessPaymentPostWithHttpInfoAsync(bodyProcessPaymentBillingProcessPaymentPost, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Process Payment 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyProcessPaymentBillingProcessPaymentPost"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<Object>> ProcessPaymentBillingProcessPaymentPostWithHttpInfoAsync(BodyProcessPaymentBillingProcessPaymentPost bodyProcessPaymentBillingProcessPaymentPost, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'bodyProcessPaymentBillingProcessPaymentPost' is set
            if (bodyProcessPaymentBillingProcessPaymentPost == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'bodyProcessPaymentBillingProcessPaymentPost' when calling BillingApi->ProcessPaymentBillingProcessPaymentPost");


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }
            localVarRequestOptions.Data = bodyProcessPaymentBillingProcessPaymentPost;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/sam/billing/process_payment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProcessPaymentBillingProcessPaymentPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Process Payment 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyProcessPaymentBillingProcessPaymentPost"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>Object</returns>
        public Object ProcessPaymentBillingProcessPaymentPost_0(BodyProcessPaymentBillingProcessPaymentPost bodyProcessPaymentBillingProcessPaymentPost, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = ProcessPaymentBillingProcessPaymentPost_0WithHttpInfo(bodyProcessPaymentBillingProcessPaymentPost, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Process Payment 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyProcessPaymentBillingProcessPaymentPost"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public Ehelply.Sdk.Client.ApiResponse<Object> ProcessPaymentBillingProcessPaymentPost_0WithHttpInfo(BodyProcessPaymentBillingProcessPaymentPost bodyProcessPaymentBillingProcessPaymentPost, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            // verify the required parameter 'bodyProcessPaymentBillingProcessPaymentPost' is set
            if (bodyProcessPaymentBillingProcessPaymentPost == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'bodyProcessPaymentBillingProcessPaymentPost' when calling BillingApi->ProcessPaymentBillingProcessPaymentPost_0");

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }
            localVarRequestOptions.Data = bodyProcessPaymentBillingProcessPaymentPost;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/sam/billing/process_payment", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProcessPaymentBillingProcessPaymentPost_0", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Process Payment 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyProcessPaymentBillingProcessPaymentPost"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ProcessPaymentBillingProcessPaymentPost_0Async(BodyProcessPaymentBillingProcessPaymentPost bodyProcessPaymentBillingProcessPaymentPost, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = await ProcessPaymentBillingProcessPaymentPost_0WithHttpInfoAsync(bodyProcessPaymentBillingProcessPaymentPost, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Process Payment 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyProcessPaymentBillingProcessPaymentPost"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<Object>> ProcessPaymentBillingProcessPaymentPost_0WithHttpInfoAsync(BodyProcessPaymentBillingProcessPaymentPost bodyProcessPaymentBillingProcessPaymentPost, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'bodyProcessPaymentBillingProcessPaymentPost' is set
            if (bodyProcessPaymentBillingProcessPaymentPost == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'bodyProcessPaymentBillingProcessPaymentPost' when calling BillingApi->ProcessPaymentBillingProcessPaymentPost_0");


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }
            localVarRequestOptions.Data = bodyProcessPaymentBillingProcessPaymentPost;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/sam/billing/process_payment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProcessPaymentBillingProcessPaymentPost_0", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reconcile Payment Methods 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>bool</returns>
        public bool ReconcilePaymentMethodsBillingReconcilePaymentGet(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            Ehelply.Sdk.Client.ApiResponse<bool> localVarResponse = ReconcilePaymentMethodsBillingReconcilePaymentGetWithHttpInfo(xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reconcile Payment Methods 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of bool</returns>
        public Ehelply.Sdk.Client.ApiResponse<bool> ReconcilePaymentMethodsBillingReconcilePaymentGetWithHttpInfo(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<bool>("/sam/billing/reconcile_payment", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReconcilePaymentMethodsBillingReconcilePaymentGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reconcile Payment Methods 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        public async System.Threading.Tasks.Task<bool> ReconcilePaymentMethodsBillingReconcilePaymentGetAsync(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<bool> localVarResponse = await ReconcilePaymentMethodsBillingReconcilePaymentGetWithHttpInfoAsync(xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reconcile Payment Methods 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<bool>> ReconcilePaymentMethodsBillingReconcilePaymentGetWithHttpInfoAsync(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<bool>("/sam/billing/reconcile_payment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReconcilePaymentMethodsBillingReconcilePaymentGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Payment Method 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>Object</returns>
        public Object RemovePaymentMethodBillingRemovePaymentMethodDelete(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = RemovePaymentMethodBillingRemovePaymentMethodDeleteWithHttpInfo(xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Payment Method 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public Ehelply.Sdk.Client.ApiResponse<Object> RemovePaymentMethodBillingRemovePaymentMethodDeleteWithHttpInfo(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/sam/billing/remove_payment_method", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemovePaymentMethodBillingRemovePaymentMethodDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Payment Method 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> RemovePaymentMethodBillingRemovePaymentMethodDeleteAsync(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = await RemovePaymentMethodBillingRemovePaymentMethodDeleteWithHttpInfoAsync(xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Payment Method 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<Object>> RemovePaymentMethodBillingRemovePaymentMethodDeleteWithHttpInfoAsync(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/sam/billing/remove_payment_method", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemovePaymentMethodBillingRemovePaymentMethodDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Payment Method 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>Object</returns>
        public Object RemovePaymentMethodBillingRemovePaymentMethodDelete_0(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = RemovePaymentMethodBillingRemovePaymentMethodDelete_0WithHttpInfo(xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Payment Method 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public Ehelply.Sdk.Client.ApiResponse<Object> RemovePaymentMethodBillingRemovePaymentMethodDelete_0WithHttpInfo(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/sam/billing/remove_payment_method", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemovePaymentMethodBillingRemovePaymentMethodDelete_0", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Payment Method 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> RemovePaymentMethodBillingRemovePaymentMethodDelete_0Async(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = await RemovePaymentMethodBillingRemovePaymentMethodDelete_0WithHttpInfoAsync(xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Payment Method 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<Object>> RemovePaymentMethodBillingRemovePaymentMethodDelete_0WithHttpInfoAsync(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/sam/billing/remove_payment_method", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemovePaymentMethodBillingRemovePaymentMethodDelete_0", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// View Payment Method 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>List&lt;PaymentMethodResponse&gt;</returns>
        public List<PaymentMethodResponse> ViewPaymentMethodBillingViewPaymentMethodGet(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            Ehelply.Sdk.Client.ApiResponse<List<PaymentMethodResponse>> localVarResponse = ViewPaymentMethodBillingViewPaymentMethodGetWithHttpInfo(xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View Payment Method 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of List&lt;PaymentMethodResponse&gt;</returns>
        public Ehelply.Sdk.Client.ApiResponse<List<PaymentMethodResponse>> ViewPaymentMethodBillingViewPaymentMethodGetWithHttpInfo(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PaymentMethodResponse>>("/sam/billing/view_payment_method", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ViewPaymentMethodBillingViewPaymentMethodGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// View Payment Method 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PaymentMethodResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<PaymentMethodResponse>> ViewPaymentMethodBillingViewPaymentMethodGetAsync(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<List<PaymentMethodResponse>> localVarResponse = await ViewPaymentMethodBillingViewPaymentMethodGetWithHttpInfoAsync(xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View Payment Method 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PaymentMethodResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<List<PaymentMethodResponse>>> ViewPaymentMethodBillingViewPaymentMethodGetWithHttpInfoAsync(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PaymentMethodResponse>>("/sam/billing/view_payment_method", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ViewPaymentMethodBillingViewPaymentMethodGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// View Payment Method 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>List&lt;PaymentMethodResponse&gt;</returns>
        public List<PaymentMethodResponse> ViewPaymentMethodBillingViewPaymentMethodGet_0(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            Ehelply.Sdk.Client.ApiResponse<List<PaymentMethodResponse>> localVarResponse = ViewPaymentMethodBillingViewPaymentMethodGet_0WithHttpInfo(xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View Payment Method 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of List&lt;PaymentMethodResponse&gt;</returns>
        public Ehelply.Sdk.Client.ApiResponse<List<PaymentMethodResponse>> ViewPaymentMethodBillingViewPaymentMethodGet_0WithHttpInfo(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PaymentMethodResponse>>("/sam/billing/view_payment_method", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ViewPaymentMethodBillingViewPaymentMethodGet_0", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// View Payment Method 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PaymentMethodResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<PaymentMethodResponse>> ViewPaymentMethodBillingViewPaymentMethodGet_0Async(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<List<PaymentMethodResponse>> localVarResponse = await ViewPaymentMethodBillingViewPaymentMethodGet_0WithHttpInfoAsync(xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View Payment Method 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PaymentMethodResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<List<PaymentMethodResponse>>> ViewPaymentMethodBillingViewPaymentMethodGet_0WithHttpInfoAsync(string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PaymentMethodResponse>>("/sam/billing/view_payment_method", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ViewPaymentMethodBillingViewPaymentMethodGet_0", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
