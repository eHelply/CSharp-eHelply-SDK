/*
 * eHelply SDK - 1.1.97
 *
 * eHelply SDK for SuperStack Services
 *
 * The version of the OpenAPI document: 1.1.97
 * Contact: support@ehelply.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Ehelply.Sdk.Client;
using Ehelply.Sdk.Model;

namespace Ehelply.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISecurityApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Createencryptionkey
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"></param>
        /// <param name="ehelplySecuritySecretKey"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SecurityEncryptionKeyResponse</returns>
        SecurityEncryptionKeyResponse CreateEncryptionKey(string category, string ehelplySecuritySecretKey = default(string), int operationIndex = 0);

        /// <summary>
        /// Createencryptionkey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"></param>
        /// <param name="ehelplySecuritySecretKey"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SecurityEncryptionKeyResponse</returns>
        ApiResponse<SecurityEncryptionKeyResponse> CreateEncryptionKeyWithHttpInfo(string category, string ehelplySecuritySecretKey = default(string), int operationIndex = 0);
        /// <summary>
        /// Createkey
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityKeyCreate"></param>
        /// <param name="accessLength"> (optional, default to 64)</param>
        /// <param name="secretLength"> (optional, default to 64)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResponseCreatekey</returns>
        ResponseCreatekey CreateKey(SecurityKeyCreate securityKeyCreate, int? accessLength = default(int?), int? secretLength = default(int?), int operationIndex = 0);

        /// <summary>
        /// Createkey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityKeyCreate"></param>
        /// <param name="accessLength"> (optional, default to 64)</param>
        /// <param name="secretLength"> (optional, default to 64)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResponseCreatekey</returns>
        ApiResponse<ResponseCreatekey> CreateKeyWithHttpInfo(SecurityKeyCreate securityKeyCreate, int? accessLength = default(int?), int? secretLength = default(int?), int operationIndex = 0);
        /// <summary>
        /// Deletekey
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyUuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResponseDeletekey</returns>
        ResponseDeletekey DeleteKey(string keyUuid, int operationIndex = 0);

        /// <summary>
        /// Deletekey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyUuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResponseDeletekey</returns>
        ApiResponse<ResponseDeletekey> DeleteKeyWithHttpInfo(string keyUuid, int operationIndex = 0);
        /// <summary>
        /// Generatetoken
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityCreateToken"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResponseGeneratetoken</returns>
        ResponseGeneratetoken GenerateToken(SecurityCreateToken securityCreateToken, int operationIndex = 0);

        /// <summary>
        /// Generatetoken
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityCreateToken"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResponseGeneratetoken</returns>
        ApiResponse<ResponseGeneratetoken> GenerateTokenWithHttpInfo(SecurityCreateToken securityCreateToken, int operationIndex = 0);
        /// <summary>
        /// Getencryptionkey
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"></param>
        /// <param name="ehelplySecuritySecretKey"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SecurityEncryptionKeyGet&gt;</returns>
        List<SecurityEncryptionKeyGet> GetEncryptionKey(string category, string ehelplySecuritySecretKey = default(string), int operationIndex = 0);

        /// <summary>
        /// Getencryptionkey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"></param>
        /// <param name="ehelplySecuritySecretKey"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SecurityEncryptionKeyGet&gt;</returns>
        ApiResponse<List<SecurityEncryptionKeyGet>> GetEncryptionKeyWithHttpInfo(string category, string ehelplySecuritySecretKey = default(string), int operationIndex = 0);
        /// <summary>
        /// Getkey
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyUuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SecurityKeyGet</returns>
        SecurityKeyGet GetKey(string keyUuid, int operationIndex = 0);

        /// <summary>
        /// Getkey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyUuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SecurityKeyGet</returns>
        ApiResponse<SecurityKeyGet> GetKeyWithHttpInfo(string keyUuid, int operationIndex = 0);
        /// <summary>
        /// Searchkeys
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SecurityKeyGet&gt;</returns>
        List<SecurityKeyGet> SearchKeys(int operationIndex = 0);

        /// <summary>
        /// Searchkeys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SecurityKeyGet&gt;</returns>
        ApiResponse<List<SecurityKeyGet>> SearchKeysWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Verifykey
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityKeyVerify"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SecurityKeyGet</returns>
        SecurityKeyGet VerifyKey(SecurityKeyVerify securityKeyVerify, int operationIndex = 0);

        /// <summary>
        /// Verifykey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityKeyVerify"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SecurityKeyGet</returns>
        ApiResponse<SecurityKeyGet> VerifyKeyWithHttpInfo(SecurityKeyVerify securityKeyVerify, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISecurityApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Createencryptionkey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"></param>
        /// <param name="ehelplySecuritySecretKey"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SecurityEncryptionKeyResponse</returns>
        System.Threading.Tasks.Task<SecurityEncryptionKeyResponse> CreateEncryptionKeyAsync(string category, string ehelplySecuritySecretKey = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Createencryptionkey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"></param>
        /// <param name="ehelplySecuritySecretKey"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SecurityEncryptionKeyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SecurityEncryptionKeyResponse>> CreateEncryptionKeyWithHttpInfoAsync(string category, string ehelplySecuritySecretKey = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Createkey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityKeyCreate"></param>
        /// <param name="accessLength"> (optional, default to 64)</param>
        /// <param name="secretLength"> (optional, default to 64)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseCreatekey</returns>
        System.Threading.Tasks.Task<ResponseCreatekey> CreateKeyAsync(SecurityKeyCreate securityKeyCreate, int? accessLength = default(int?), int? secretLength = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Createkey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityKeyCreate"></param>
        /// <param name="accessLength"> (optional, default to 64)</param>
        /// <param name="secretLength"> (optional, default to 64)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseCreatekey)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseCreatekey>> CreateKeyWithHttpInfoAsync(SecurityKeyCreate securityKeyCreate, int? accessLength = default(int?), int? secretLength = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletekey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyUuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseDeletekey</returns>
        System.Threading.Tasks.Task<ResponseDeletekey> DeleteKeyAsync(string keyUuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletekey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyUuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseDeletekey)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseDeletekey>> DeleteKeyWithHttpInfoAsync(string keyUuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Generatetoken
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityCreateToken"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseGeneratetoken</returns>
        System.Threading.Tasks.Task<ResponseGeneratetoken> GenerateTokenAsync(SecurityCreateToken securityCreateToken, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Generatetoken
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityCreateToken"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseGeneratetoken)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseGeneratetoken>> GenerateTokenWithHttpInfoAsync(SecurityCreateToken securityCreateToken, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Getencryptionkey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"></param>
        /// <param name="ehelplySecuritySecretKey"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SecurityEncryptionKeyGet&gt;</returns>
        System.Threading.Tasks.Task<List<SecurityEncryptionKeyGet>> GetEncryptionKeyAsync(string category, string ehelplySecuritySecretKey = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Getencryptionkey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"></param>
        /// <param name="ehelplySecuritySecretKey"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SecurityEncryptionKeyGet&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SecurityEncryptionKeyGet>>> GetEncryptionKeyWithHttpInfoAsync(string category, string ehelplySecuritySecretKey = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Getkey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyUuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SecurityKeyGet</returns>
        System.Threading.Tasks.Task<SecurityKeyGet> GetKeyAsync(string keyUuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Getkey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyUuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SecurityKeyGet)</returns>
        System.Threading.Tasks.Task<ApiResponse<SecurityKeyGet>> GetKeyWithHttpInfoAsync(string keyUuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Searchkeys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SecurityKeyGet&gt;</returns>
        System.Threading.Tasks.Task<List<SecurityKeyGet>> SearchKeysAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Searchkeys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SecurityKeyGet&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SecurityKeyGet>>> SearchKeysWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Verifykey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityKeyVerify"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SecurityKeyGet</returns>
        System.Threading.Tasks.Task<SecurityKeyGet> VerifyKeyAsync(SecurityKeyVerify securityKeyVerify, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Verifykey
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityKeyVerify"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SecurityKeyGet)</returns>
        System.Threading.Tasks.Task<ApiResponse<SecurityKeyGet>> VerifyKeyWithHttpInfoAsync(SecurityKeyVerify securityKeyVerify, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISecurityApi : ISecurityApiSync, ISecurityApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SecurityApi : ISecurityApi
    {
        private Ehelply.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SecurityApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SecurityApi(string basePath)
        {
            this.Configuration = Ehelply.Sdk.Client.Configuration.MergeConfigurations(
                Ehelply.Sdk.Client.GlobalConfiguration.Instance,
                new Ehelply.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Ehelply.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Ehelply.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Ehelply.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SecurityApi(Ehelply.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Ehelply.Sdk.Client.Configuration.MergeConfigurations(
                Ehelply.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Ehelply.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Ehelply.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Ehelply.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SecurityApi(Ehelply.Sdk.Client.ISynchronousClient client, Ehelply.Sdk.Client.IAsynchronousClient asyncClient, Ehelply.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Ehelply.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Ehelply.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Ehelply.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Ehelply.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Ehelply.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Createencryptionkey 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"></param>
        /// <param name="ehelplySecuritySecretKey"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SecurityEncryptionKeyResponse</returns>
        public SecurityEncryptionKeyResponse CreateEncryptionKey(string category, string ehelplySecuritySecretKey = default(string), int operationIndex = 0)
        {
            Ehelply.Sdk.Client.ApiResponse<SecurityEncryptionKeyResponse> localVarResponse = CreateEncryptionKeyWithHttpInfo(category, ehelplySecuritySecretKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Createencryptionkey 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"></param>
        /// <param name="ehelplySecuritySecretKey"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SecurityEncryptionKeyResponse</returns>
        public Ehelply.Sdk.Client.ApiResponse<SecurityEncryptionKeyResponse> CreateEncryptionKeyWithHttpInfo(string category, string ehelplySecuritySecretKey = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'category' is set
            if (category == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'category' when calling SecurityApi->CreateEncryptionKey");
            }

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("category", Ehelply.Sdk.Client.ClientUtils.ParameterToString(category)); // path parameter
            if (ehelplySecuritySecretKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-security-secret-key", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplySecuritySecretKey)); // header parameter
            }

            localVarRequestOptions.Operation = "SecurityApi.CreateEncryptionKey";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SecurityEncryptionKeyResponse>("/sam/security/encryption/categories/{category}/keys", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateEncryptionKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Createencryptionkey 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"></param>
        /// <param name="ehelplySecuritySecretKey"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SecurityEncryptionKeyResponse</returns>
        public async System.Threading.Tasks.Task<SecurityEncryptionKeyResponse> CreateEncryptionKeyAsync(string category, string ehelplySecuritySecretKey = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<SecurityEncryptionKeyResponse> localVarResponse = await CreateEncryptionKeyWithHttpInfoAsync(category, ehelplySecuritySecretKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Createencryptionkey 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"></param>
        /// <param name="ehelplySecuritySecretKey"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SecurityEncryptionKeyResponse)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<SecurityEncryptionKeyResponse>> CreateEncryptionKeyWithHttpInfoAsync(string category, string ehelplySecuritySecretKey = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'category' is set
            if (category == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'category' when calling SecurityApi->CreateEncryptionKey");
            }


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("category", Ehelply.Sdk.Client.ClientUtils.ParameterToString(category)); // path parameter
            if (ehelplySecuritySecretKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-security-secret-key", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplySecuritySecretKey)); // header parameter
            }

            localVarRequestOptions.Operation = "SecurityApi.CreateEncryptionKey";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SecurityEncryptionKeyResponse>("/sam/security/encryption/categories/{category}/keys", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateEncryptionKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Createkey 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityKeyCreate"></param>
        /// <param name="accessLength"> (optional, default to 64)</param>
        /// <param name="secretLength"> (optional, default to 64)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResponseCreatekey</returns>
        public ResponseCreatekey CreateKey(SecurityKeyCreate securityKeyCreate, int? accessLength = default(int?), int? secretLength = default(int?), int operationIndex = 0)
        {
            Ehelply.Sdk.Client.ApiResponse<ResponseCreatekey> localVarResponse = CreateKeyWithHttpInfo(securityKeyCreate, accessLength, secretLength);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Createkey 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityKeyCreate"></param>
        /// <param name="accessLength"> (optional, default to 64)</param>
        /// <param name="secretLength"> (optional, default to 64)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResponseCreatekey</returns>
        public Ehelply.Sdk.Client.ApiResponse<ResponseCreatekey> CreateKeyWithHttpInfo(SecurityKeyCreate securityKeyCreate, int? accessLength = default(int?), int? secretLength = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'securityKeyCreate' is set
            if (securityKeyCreate == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'securityKeyCreate' when calling SecurityApi->CreateKey");
            }

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (accessLength != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "access_length", accessLength));
            }
            if (secretLength != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "secret_length", secretLength));
            }
            localVarRequestOptions.Data = securityKeyCreate;

            localVarRequestOptions.Operation = "SecurityApi.CreateKey";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ResponseCreatekey>("/sam/security/keys", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Createkey 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityKeyCreate"></param>
        /// <param name="accessLength"> (optional, default to 64)</param>
        /// <param name="secretLength"> (optional, default to 64)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseCreatekey</returns>
        public async System.Threading.Tasks.Task<ResponseCreatekey> CreateKeyAsync(SecurityKeyCreate securityKeyCreate, int? accessLength = default(int?), int? secretLength = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<ResponseCreatekey> localVarResponse = await CreateKeyWithHttpInfoAsync(securityKeyCreate, accessLength, secretLength, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Createkey 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityKeyCreate"></param>
        /// <param name="accessLength"> (optional, default to 64)</param>
        /// <param name="secretLength"> (optional, default to 64)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseCreatekey)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<ResponseCreatekey>> CreateKeyWithHttpInfoAsync(SecurityKeyCreate securityKeyCreate, int? accessLength = default(int?), int? secretLength = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'securityKeyCreate' is set
            if (securityKeyCreate == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'securityKeyCreate' when calling SecurityApi->CreateKey");
            }


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (accessLength != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "access_length", accessLength));
            }
            if (secretLength != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "secret_length", secretLength));
            }
            localVarRequestOptions.Data = securityKeyCreate;

            localVarRequestOptions.Operation = "SecurityApi.CreateKey";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ResponseCreatekey>("/sam/security/keys", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletekey 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyUuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResponseDeletekey</returns>
        public ResponseDeletekey DeleteKey(string keyUuid, int operationIndex = 0)
        {
            Ehelply.Sdk.Client.ApiResponse<ResponseDeletekey> localVarResponse = DeleteKeyWithHttpInfo(keyUuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletekey 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyUuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResponseDeletekey</returns>
        public Ehelply.Sdk.Client.ApiResponse<ResponseDeletekey> DeleteKeyWithHttpInfo(string keyUuid, int operationIndex = 0)
        {
            // verify the required parameter 'keyUuid' is set
            if (keyUuid == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'keyUuid' when calling SecurityApi->DeleteKey");
            }

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("key_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(keyUuid)); // path parameter

            localVarRequestOptions.Operation = "SecurityApi.DeleteKey";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<ResponseDeletekey>("/sam/security/keys/{key_uuid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletekey 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyUuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseDeletekey</returns>
        public async System.Threading.Tasks.Task<ResponseDeletekey> DeleteKeyAsync(string keyUuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<ResponseDeletekey> localVarResponse = await DeleteKeyWithHttpInfoAsync(keyUuid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletekey 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyUuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseDeletekey)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<ResponseDeletekey>> DeleteKeyWithHttpInfoAsync(string keyUuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'keyUuid' is set
            if (keyUuid == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'keyUuid' when calling SecurityApi->DeleteKey");
            }


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("key_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(keyUuid)); // path parameter

            localVarRequestOptions.Operation = "SecurityApi.DeleteKey";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ResponseDeletekey>("/sam/security/keys/{key_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generatetoken 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityCreateToken"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResponseGeneratetoken</returns>
        public ResponseGeneratetoken GenerateToken(SecurityCreateToken securityCreateToken, int operationIndex = 0)
        {
            Ehelply.Sdk.Client.ApiResponse<ResponseGeneratetoken> localVarResponse = GenerateTokenWithHttpInfo(securityCreateToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generatetoken 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityCreateToken"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResponseGeneratetoken</returns>
        public Ehelply.Sdk.Client.ApiResponse<ResponseGeneratetoken> GenerateTokenWithHttpInfo(SecurityCreateToken securityCreateToken, int operationIndex = 0)
        {
            // verify the required parameter 'securityCreateToken' is set
            if (securityCreateToken == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'securityCreateToken' when calling SecurityApi->GenerateToken");
            }

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = securityCreateToken;

            localVarRequestOptions.Operation = "SecurityApi.GenerateToken";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ResponseGeneratetoken>("/sam/security/tokens", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generatetoken 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityCreateToken"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseGeneratetoken</returns>
        public async System.Threading.Tasks.Task<ResponseGeneratetoken> GenerateTokenAsync(SecurityCreateToken securityCreateToken, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<ResponseGeneratetoken> localVarResponse = await GenerateTokenWithHttpInfoAsync(securityCreateToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generatetoken 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityCreateToken"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseGeneratetoken)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<ResponseGeneratetoken>> GenerateTokenWithHttpInfoAsync(SecurityCreateToken securityCreateToken, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'securityCreateToken' is set
            if (securityCreateToken == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'securityCreateToken' when calling SecurityApi->GenerateToken");
            }


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = securityCreateToken;

            localVarRequestOptions.Operation = "SecurityApi.GenerateToken";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ResponseGeneratetoken>("/sam/security/tokens", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getencryptionkey 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"></param>
        /// <param name="ehelplySecuritySecretKey"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SecurityEncryptionKeyGet&gt;</returns>
        public List<SecurityEncryptionKeyGet> GetEncryptionKey(string category, string ehelplySecuritySecretKey = default(string), int operationIndex = 0)
        {
            Ehelply.Sdk.Client.ApiResponse<List<SecurityEncryptionKeyGet>> localVarResponse = GetEncryptionKeyWithHttpInfo(category, ehelplySecuritySecretKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Getencryptionkey 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"></param>
        /// <param name="ehelplySecuritySecretKey"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SecurityEncryptionKeyGet&gt;</returns>
        public Ehelply.Sdk.Client.ApiResponse<List<SecurityEncryptionKeyGet>> GetEncryptionKeyWithHttpInfo(string category, string ehelplySecuritySecretKey = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'category' is set
            if (category == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'category' when calling SecurityApi->GetEncryptionKey");
            }

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("category", Ehelply.Sdk.Client.ClientUtils.ParameterToString(category)); // path parameter
            if (ehelplySecuritySecretKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-security-secret-key", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplySecuritySecretKey)); // header parameter
            }

            localVarRequestOptions.Operation = "SecurityApi.GetEncryptionKey";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SecurityEncryptionKeyGet>>("/sam/security/encryption/categories/{category}/keys", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEncryptionKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getencryptionkey 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"></param>
        /// <param name="ehelplySecuritySecretKey"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SecurityEncryptionKeyGet&gt;</returns>
        public async System.Threading.Tasks.Task<List<SecurityEncryptionKeyGet>> GetEncryptionKeyAsync(string category, string ehelplySecuritySecretKey = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<List<SecurityEncryptionKeyGet>> localVarResponse = await GetEncryptionKeyWithHttpInfoAsync(category, ehelplySecuritySecretKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Getencryptionkey 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"></param>
        /// <param name="ehelplySecuritySecretKey"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SecurityEncryptionKeyGet&gt;)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<List<SecurityEncryptionKeyGet>>> GetEncryptionKeyWithHttpInfoAsync(string category, string ehelplySecuritySecretKey = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'category' is set
            if (category == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'category' when calling SecurityApi->GetEncryptionKey");
            }


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("category", Ehelply.Sdk.Client.ClientUtils.ParameterToString(category)); // path parameter
            if (ehelplySecuritySecretKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-security-secret-key", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplySecuritySecretKey)); // header parameter
            }

            localVarRequestOptions.Operation = "SecurityApi.GetEncryptionKey";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SecurityEncryptionKeyGet>>("/sam/security/encryption/categories/{category}/keys", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEncryptionKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getkey 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyUuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SecurityKeyGet</returns>
        public SecurityKeyGet GetKey(string keyUuid, int operationIndex = 0)
        {
            Ehelply.Sdk.Client.ApiResponse<SecurityKeyGet> localVarResponse = GetKeyWithHttpInfo(keyUuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Getkey 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyUuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SecurityKeyGet</returns>
        public Ehelply.Sdk.Client.ApiResponse<SecurityKeyGet> GetKeyWithHttpInfo(string keyUuid, int operationIndex = 0)
        {
            // verify the required parameter 'keyUuid' is set
            if (keyUuid == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'keyUuid' when calling SecurityApi->GetKey");
            }

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("key_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(keyUuid)); // path parameter

            localVarRequestOptions.Operation = "SecurityApi.GetKey";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<SecurityKeyGet>("/sam/security/keys/{key_uuid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getkey 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyUuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SecurityKeyGet</returns>
        public async System.Threading.Tasks.Task<SecurityKeyGet> GetKeyAsync(string keyUuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<SecurityKeyGet> localVarResponse = await GetKeyWithHttpInfoAsync(keyUuid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Getkey 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyUuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SecurityKeyGet)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<SecurityKeyGet>> GetKeyWithHttpInfoAsync(string keyUuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'keyUuid' is set
            if (keyUuid == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'keyUuid' when calling SecurityApi->GetKey");
            }


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("key_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(keyUuid)); // path parameter

            localVarRequestOptions.Operation = "SecurityApi.GetKey";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SecurityKeyGet>("/sam/security/keys/{key_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Searchkeys 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SecurityKeyGet&gt;</returns>
        public List<SecurityKeyGet> SearchKeys(int operationIndex = 0)
        {
            Ehelply.Sdk.Client.ApiResponse<List<SecurityKeyGet>> localVarResponse = SearchKeysWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Searchkeys 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SecurityKeyGet&gt;</returns>
        public Ehelply.Sdk.Client.ApiResponse<List<SecurityKeyGet>> SearchKeysWithHttpInfo(int operationIndex = 0)
        {
            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "SecurityApi.SearchKeys";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SecurityKeyGet>>("/sam/security/keys", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchKeys", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Searchkeys 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SecurityKeyGet&gt;</returns>
        public async System.Threading.Tasks.Task<List<SecurityKeyGet>> SearchKeysAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<List<SecurityKeyGet>> localVarResponse = await SearchKeysWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Searchkeys 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SecurityKeyGet&gt;)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<List<SecurityKeyGet>>> SearchKeysWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "SecurityApi.SearchKeys";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SecurityKeyGet>>("/sam/security/keys", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchKeys", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Verifykey 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityKeyVerify"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SecurityKeyGet</returns>
        public SecurityKeyGet VerifyKey(SecurityKeyVerify securityKeyVerify, int operationIndex = 0)
        {
            Ehelply.Sdk.Client.ApiResponse<SecurityKeyGet> localVarResponse = VerifyKeyWithHttpInfo(securityKeyVerify);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Verifykey 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityKeyVerify"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SecurityKeyGet</returns>
        public Ehelply.Sdk.Client.ApiResponse<SecurityKeyGet> VerifyKeyWithHttpInfo(SecurityKeyVerify securityKeyVerify, int operationIndex = 0)
        {
            // verify the required parameter 'securityKeyVerify' is set
            if (securityKeyVerify == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'securityKeyVerify' when calling SecurityApi->VerifyKey");
            }

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = securityKeyVerify;

            localVarRequestOptions.Operation = "SecurityApi.VerifyKey";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SecurityKeyGet>("/sam/security/keys/verify", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Verifykey 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityKeyVerify"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SecurityKeyGet</returns>
        public async System.Threading.Tasks.Task<SecurityKeyGet> VerifyKeyAsync(SecurityKeyVerify securityKeyVerify, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<SecurityKeyGet> localVarResponse = await VerifyKeyWithHttpInfoAsync(securityKeyVerify, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Verifykey 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityKeyVerify"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SecurityKeyGet)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<SecurityKeyGet>> VerifyKeyWithHttpInfoAsync(SecurityKeyVerify securityKeyVerify, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'securityKeyVerify' is set
            if (securityKeyVerify == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'securityKeyVerify' when calling SecurityApi->VerifyKey");
            }


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = securityKeyVerify;

            localVarRequestOptions.Operation = "SecurityApi.VerifyKey";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SecurityKeyGet>("/sam/security/keys/verify", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
