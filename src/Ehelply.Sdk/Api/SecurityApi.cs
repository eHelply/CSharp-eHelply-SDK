/*
 * eHelply SDK - 1.1.55
 *
 * eHelply SDK for SuperStack Services
 *
 * The version of the OpenAPI document: 1.1.55
 * Contact: support@ehelply.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Ehelply.Sdk.Client;
using Ehelply.Sdk.Model;

namespace Ehelply.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISecurityApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Encryption Key
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"></param>
        /// <param name="ehelplySecuritySecretKey"> (optional)</param>
        /// <returns>Object</returns>
        Object CreateEncryptionKeySecurityEncryptionCategoriesCategoryKeysPost(string category, string ehelplySecuritySecretKey = default(string));

        /// <summary>
        /// Create Encryption Key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"></param>
        /// <param name="ehelplySecuritySecretKey"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateEncryptionKeySecurityEncryptionCategoriesCategoryKeysPostWithHttpInfo(string category, string ehelplySecuritySecretKey = default(string));
        /// <summary>
        /// Create Key
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyCreateKeySecurityKeysPost"></param>
        /// <param name="accessLength"> (optional, default to 64)</param>
        /// <param name="secretLength"> (optional, default to 64)</param>
        /// <returns>Object</returns>
        Object CreateKeySecurityKeysPost(BodyCreateKeySecurityKeysPost bodyCreateKeySecurityKeysPost, int? accessLength = default(int?), int? secretLength = default(int?));

        /// <summary>
        /// Create Key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyCreateKeySecurityKeysPost"></param>
        /// <param name="accessLength"> (optional, default to 64)</param>
        /// <param name="secretLength"> (optional, default to 64)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateKeySecurityKeysPostWithHttpInfo(BodyCreateKeySecurityKeysPost bodyCreateKeySecurityKeysPost, int? accessLength = default(int?), int? secretLength = default(int?));
        /// <summary>
        /// Delete Key
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyUuid"></param>
        /// <returns>Object</returns>
        Object DeleteKeySecurityKeysKeyUuidDelete(string keyUuid);

        /// <summary>
        /// Delete Key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyUuid"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteKeySecurityKeysKeyUuidDeleteWithHttpInfo(string keyUuid);
        /// <summary>
        /// Generate Token
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyGenerateTokenSecurityTokensPost"></param>
        /// <returns>Object</returns>
        Object GenerateTokenSecurityTokensPost(BodyGenerateTokenSecurityTokensPost bodyGenerateTokenSecurityTokensPost);

        /// <summary>
        /// Generate Token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyGenerateTokenSecurityTokensPost"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GenerateTokenSecurityTokensPostWithHttpInfo(BodyGenerateTokenSecurityTokensPost bodyGenerateTokenSecurityTokensPost);
        /// <summary>
        /// Get Encryption Key
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"></param>
        /// <param name="ehelplySecuritySecretKey"> (optional)</param>
        /// <returns>List&lt;SecurityEncryptionKeyGet&gt;</returns>
        List<SecurityEncryptionKeyGet> GetEncryptionKeySecurityEncryptionCategoriesCategoryKeysGet(string category, string ehelplySecuritySecretKey = default(string));

        /// <summary>
        /// Get Encryption Key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"></param>
        /// <param name="ehelplySecuritySecretKey"> (optional)</param>
        /// <returns>ApiResponse of List&lt;SecurityEncryptionKeyGet&gt;</returns>
        ApiResponse<List<SecurityEncryptionKeyGet>> GetEncryptionKeySecurityEncryptionCategoriesCategoryKeysGetWithHttpInfo(string category, string ehelplySecuritySecretKey = default(string));
        /// <summary>
        /// Get Key
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyUuid"></param>
        /// <returns>SecurityKeyGet</returns>
        SecurityKeyGet GetKeySecurityKeysKeyUuidGet(string keyUuid);

        /// <summary>
        /// Get Key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyUuid"></param>
        /// <returns>ApiResponse of SecurityKeyGet</returns>
        ApiResponse<SecurityKeyGet> GetKeySecurityKeysKeyUuidGetWithHttpInfo(string keyUuid);
        /// <summary>
        /// Search Keys
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;SecurityKeyGet&gt;</returns>
        List<SecurityKeyGet> SearchKeysSecurityKeysGet();

        /// <summary>
        /// Search Keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;SecurityKeyGet&gt;</returns>
        ApiResponse<List<SecurityKeyGet>> SearchKeysSecurityKeysGetWithHttpInfo();
        /// <summary>
        /// Verify Key
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyVerifyKeySecurityKeysVerifyPost"></param>
        /// <returns>SecurityKeyGet</returns>
        SecurityKeyGet VerifyKeySecurityKeysVerifyPost(BodyVerifyKeySecurityKeysVerifyPost bodyVerifyKeySecurityKeysVerifyPost);

        /// <summary>
        /// Verify Key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyVerifyKeySecurityKeysVerifyPost"></param>
        /// <returns>ApiResponse of SecurityKeyGet</returns>
        ApiResponse<SecurityKeyGet> VerifyKeySecurityKeysVerifyPostWithHttpInfo(BodyVerifyKeySecurityKeysVerifyPost bodyVerifyKeySecurityKeysVerifyPost);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISecurityApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Encryption Key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"></param>
        /// <param name="ehelplySecuritySecretKey"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateEncryptionKeySecurityEncryptionCategoriesCategoryKeysPostAsync(string category, string ehelplySecuritySecretKey = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Encryption Key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"></param>
        /// <param name="ehelplySecuritySecretKey"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateEncryptionKeySecurityEncryptionCategoriesCategoryKeysPostWithHttpInfoAsync(string category, string ehelplySecuritySecretKey = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyCreateKeySecurityKeysPost"></param>
        /// <param name="accessLength"> (optional, default to 64)</param>
        /// <param name="secretLength"> (optional, default to 64)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateKeySecurityKeysPostAsync(BodyCreateKeySecurityKeysPost bodyCreateKeySecurityKeysPost, int? accessLength = default(int?), int? secretLength = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyCreateKeySecurityKeysPost"></param>
        /// <param name="accessLength"> (optional, default to 64)</param>
        /// <param name="secretLength"> (optional, default to 64)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateKeySecurityKeysPostWithHttpInfoAsync(BodyCreateKeySecurityKeysPost bodyCreateKeySecurityKeysPost, int? accessLength = default(int?), int? secretLength = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteKeySecurityKeysKeyUuidDeleteAsync(string keyUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteKeySecurityKeysKeyUuidDeleteWithHttpInfoAsync(string keyUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Generate Token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyGenerateTokenSecurityTokensPost"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GenerateTokenSecurityTokensPostAsync(BodyGenerateTokenSecurityTokensPost bodyGenerateTokenSecurityTokensPost, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Generate Token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyGenerateTokenSecurityTokensPost"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GenerateTokenSecurityTokensPostWithHttpInfoAsync(BodyGenerateTokenSecurityTokensPost bodyGenerateTokenSecurityTokensPost, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Encryption Key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"></param>
        /// <param name="ehelplySecuritySecretKey"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SecurityEncryptionKeyGet&gt;</returns>
        System.Threading.Tasks.Task<List<SecurityEncryptionKeyGet>> GetEncryptionKeySecurityEncryptionCategoriesCategoryKeysGetAsync(string category, string ehelplySecuritySecretKey = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Encryption Key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"></param>
        /// <param name="ehelplySecuritySecretKey"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SecurityEncryptionKeyGet&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SecurityEncryptionKeyGet>>> GetEncryptionKeySecurityEncryptionCategoriesCategoryKeysGetWithHttpInfoAsync(string category, string ehelplySecuritySecretKey = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SecurityKeyGet</returns>
        System.Threading.Tasks.Task<SecurityKeyGet> GetKeySecurityKeysKeyUuidGetAsync(string keyUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SecurityKeyGet)</returns>
        System.Threading.Tasks.Task<ApiResponse<SecurityKeyGet>> GetKeySecurityKeysKeyUuidGetWithHttpInfoAsync(string keyUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search Keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SecurityKeyGet&gt;</returns>
        System.Threading.Tasks.Task<List<SecurityKeyGet>> SearchKeysSecurityKeysGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search Keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SecurityKeyGet&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SecurityKeyGet>>> SearchKeysSecurityKeysGetWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Verify Key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyVerifyKeySecurityKeysVerifyPost"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SecurityKeyGet</returns>
        System.Threading.Tasks.Task<SecurityKeyGet> VerifyKeySecurityKeysVerifyPostAsync(BodyVerifyKeySecurityKeysVerifyPost bodyVerifyKeySecurityKeysVerifyPost, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Verify Key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyVerifyKeySecurityKeysVerifyPost"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SecurityKeyGet)</returns>
        System.Threading.Tasks.Task<ApiResponse<SecurityKeyGet>> VerifyKeySecurityKeysVerifyPostWithHttpInfoAsync(BodyVerifyKeySecurityKeysVerifyPost bodyVerifyKeySecurityKeysVerifyPost, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISecurityApi : ISecurityApiSync, ISecurityApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SecurityApi : ISecurityApi
    {
        private Ehelply.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SecurityApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SecurityApi(string basePath)
        {
            this.Configuration = Ehelply.Sdk.Client.Configuration.MergeConfigurations(
                Ehelply.Sdk.Client.GlobalConfiguration.Instance,
                new Ehelply.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Ehelply.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Ehelply.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Ehelply.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SecurityApi(Ehelply.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Ehelply.Sdk.Client.Configuration.MergeConfigurations(
                Ehelply.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Ehelply.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Ehelply.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Ehelply.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SecurityApi(Ehelply.Sdk.Client.ISynchronousClient client, Ehelply.Sdk.Client.IAsynchronousClient asyncClient, Ehelply.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Ehelply.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Ehelply.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Ehelply.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Ehelply.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Ehelply.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Encryption Key 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"></param>
        /// <param name="ehelplySecuritySecretKey"> (optional)</param>
        /// <returns>Object</returns>
        public Object CreateEncryptionKeySecurityEncryptionCategoriesCategoryKeysPost(string category, string ehelplySecuritySecretKey = default(string))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = CreateEncryptionKeySecurityEncryptionCategoriesCategoryKeysPostWithHttpInfo(category, ehelplySecuritySecretKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Encryption Key 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"></param>
        /// <param name="ehelplySecuritySecretKey"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public Ehelply.Sdk.Client.ApiResponse<Object> CreateEncryptionKeySecurityEncryptionCategoriesCategoryKeysPostWithHttpInfo(string category, string ehelplySecuritySecretKey = default(string))
        {
            // verify the required parameter 'category' is set
            if (category == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'category' when calling SecurityApi->CreateEncryptionKeySecurityEncryptionCategoriesCategoryKeysPost");

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("category", Ehelply.Sdk.Client.ClientUtils.ParameterToString(category)); // path parameter
            if (ehelplySecuritySecretKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-security-secret-key", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplySecuritySecretKey)); // header parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/sam/security/encryption/categories/{category}/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateEncryptionKeySecurityEncryptionCategoriesCategoryKeysPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Encryption Key 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"></param>
        /// <param name="ehelplySecuritySecretKey"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateEncryptionKeySecurityEncryptionCategoriesCategoryKeysPostAsync(string category, string ehelplySecuritySecretKey = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = await CreateEncryptionKeySecurityEncryptionCategoriesCategoryKeysPostWithHttpInfoAsync(category, ehelplySecuritySecretKey, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Encryption Key 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"></param>
        /// <param name="ehelplySecuritySecretKey"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<Object>> CreateEncryptionKeySecurityEncryptionCategoriesCategoryKeysPostWithHttpInfoAsync(string category, string ehelplySecuritySecretKey = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'category' is set
            if (category == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'category' when calling SecurityApi->CreateEncryptionKeySecurityEncryptionCategoriesCategoryKeysPost");


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("category", Ehelply.Sdk.Client.ClientUtils.ParameterToString(category)); // path parameter
            if (ehelplySecuritySecretKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-security-secret-key", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplySecuritySecretKey)); // header parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/sam/security/encryption/categories/{category}/keys", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateEncryptionKeySecurityEncryptionCategoriesCategoryKeysPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Key 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyCreateKeySecurityKeysPost"></param>
        /// <param name="accessLength"> (optional, default to 64)</param>
        /// <param name="secretLength"> (optional, default to 64)</param>
        /// <returns>Object</returns>
        public Object CreateKeySecurityKeysPost(BodyCreateKeySecurityKeysPost bodyCreateKeySecurityKeysPost, int? accessLength = default(int?), int? secretLength = default(int?))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = CreateKeySecurityKeysPostWithHttpInfo(bodyCreateKeySecurityKeysPost, accessLength, secretLength);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Key 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyCreateKeySecurityKeysPost"></param>
        /// <param name="accessLength"> (optional, default to 64)</param>
        /// <param name="secretLength"> (optional, default to 64)</param>
        /// <returns>ApiResponse of Object</returns>
        public Ehelply.Sdk.Client.ApiResponse<Object> CreateKeySecurityKeysPostWithHttpInfo(BodyCreateKeySecurityKeysPost bodyCreateKeySecurityKeysPost, int? accessLength = default(int?), int? secretLength = default(int?))
        {
            // verify the required parameter 'bodyCreateKeySecurityKeysPost' is set
            if (bodyCreateKeySecurityKeysPost == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'bodyCreateKeySecurityKeysPost' when calling SecurityApi->CreateKeySecurityKeysPost");

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (accessLength != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "access_length", accessLength));
            }
            if (secretLength != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "secret_length", secretLength));
            }
            localVarRequestOptions.Data = bodyCreateKeySecurityKeysPost;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/sam/security/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateKeySecurityKeysPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Key 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyCreateKeySecurityKeysPost"></param>
        /// <param name="accessLength"> (optional, default to 64)</param>
        /// <param name="secretLength"> (optional, default to 64)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateKeySecurityKeysPostAsync(BodyCreateKeySecurityKeysPost bodyCreateKeySecurityKeysPost, int? accessLength = default(int?), int? secretLength = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = await CreateKeySecurityKeysPostWithHttpInfoAsync(bodyCreateKeySecurityKeysPost, accessLength, secretLength, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Key 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyCreateKeySecurityKeysPost"></param>
        /// <param name="accessLength"> (optional, default to 64)</param>
        /// <param name="secretLength"> (optional, default to 64)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<Object>> CreateKeySecurityKeysPostWithHttpInfoAsync(BodyCreateKeySecurityKeysPost bodyCreateKeySecurityKeysPost, int? accessLength = default(int?), int? secretLength = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'bodyCreateKeySecurityKeysPost' is set
            if (bodyCreateKeySecurityKeysPost == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'bodyCreateKeySecurityKeysPost' when calling SecurityApi->CreateKeySecurityKeysPost");


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (accessLength != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "access_length", accessLength));
            }
            if (secretLength != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "secret_length", secretLength));
            }
            localVarRequestOptions.Data = bodyCreateKeySecurityKeysPost;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/sam/security/keys", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateKeySecurityKeysPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Key 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyUuid"></param>
        /// <returns>Object</returns>
        public Object DeleteKeySecurityKeysKeyUuidDelete(string keyUuid)
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = DeleteKeySecurityKeysKeyUuidDeleteWithHttpInfo(keyUuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Key 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyUuid"></param>
        /// <returns>ApiResponse of Object</returns>
        public Ehelply.Sdk.Client.ApiResponse<Object> DeleteKeySecurityKeysKeyUuidDeleteWithHttpInfo(string keyUuid)
        {
            // verify the required parameter 'keyUuid' is set
            if (keyUuid == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'keyUuid' when calling SecurityApi->DeleteKeySecurityKeysKeyUuidDelete");

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(keyUuid)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/sam/security/keys/{key_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteKeySecurityKeysKeyUuidDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Key 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteKeySecurityKeysKeyUuidDeleteAsync(string keyUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = await DeleteKeySecurityKeysKeyUuidDeleteWithHttpInfoAsync(keyUuid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Key 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<Object>> DeleteKeySecurityKeysKeyUuidDeleteWithHttpInfoAsync(string keyUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'keyUuid' is set
            if (keyUuid == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'keyUuid' when calling SecurityApi->DeleteKeySecurityKeysKeyUuidDelete");


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(keyUuid)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/sam/security/keys/{key_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteKeySecurityKeysKeyUuidDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate Token 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyGenerateTokenSecurityTokensPost"></param>
        /// <returns>Object</returns>
        public Object GenerateTokenSecurityTokensPost(BodyGenerateTokenSecurityTokensPost bodyGenerateTokenSecurityTokensPost)
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = GenerateTokenSecurityTokensPostWithHttpInfo(bodyGenerateTokenSecurityTokensPost);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate Token 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyGenerateTokenSecurityTokensPost"></param>
        /// <returns>ApiResponse of Object</returns>
        public Ehelply.Sdk.Client.ApiResponse<Object> GenerateTokenSecurityTokensPostWithHttpInfo(BodyGenerateTokenSecurityTokensPost bodyGenerateTokenSecurityTokensPost)
        {
            // verify the required parameter 'bodyGenerateTokenSecurityTokensPost' is set
            if (bodyGenerateTokenSecurityTokensPost == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'bodyGenerateTokenSecurityTokensPost' when calling SecurityApi->GenerateTokenSecurityTokensPost");

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = bodyGenerateTokenSecurityTokensPost;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/sam/security/tokens", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateTokenSecurityTokensPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate Token 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyGenerateTokenSecurityTokensPost"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GenerateTokenSecurityTokensPostAsync(BodyGenerateTokenSecurityTokensPost bodyGenerateTokenSecurityTokensPost, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = await GenerateTokenSecurityTokensPostWithHttpInfoAsync(bodyGenerateTokenSecurityTokensPost, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate Token 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyGenerateTokenSecurityTokensPost"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<Object>> GenerateTokenSecurityTokensPostWithHttpInfoAsync(BodyGenerateTokenSecurityTokensPost bodyGenerateTokenSecurityTokensPost, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'bodyGenerateTokenSecurityTokensPost' is set
            if (bodyGenerateTokenSecurityTokensPost == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'bodyGenerateTokenSecurityTokensPost' when calling SecurityApi->GenerateTokenSecurityTokensPost");


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = bodyGenerateTokenSecurityTokensPost;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/sam/security/tokens", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateTokenSecurityTokensPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Encryption Key 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"></param>
        /// <param name="ehelplySecuritySecretKey"> (optional)</param>
        /// <returns>List&lt;SecurityEncryptionKeyGet&gt;</returns>
        public List<SecurityEncryptionKeyGet> GetEncryptionKeySecurityEncryptionCategoriesCategoryKeysGet(string category, string ehelplySecuritySecretKey = default(string))
        {
            Ehelply.Sdk.Client.ApiResponse<List<SecurityEncryptionKeyGet>> localVarResponse = GetEncryptionKeySecurityEncryptionCategoriesCategoryKeysGetWithHttpInfo(category, ehelplySecuritySecretKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Encryption Key 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"></param>
        /// <param name="ehelplySecuritySecretKey"> (optional)</param>
        /// <returns>ApiResponse of List&lt;SecurityEncryptionKeyGet&gt;</returns>
        public Ehelply.Sdk.Client.ApiResponse<List<SecurityEncryptionKeyGet>> GetEncryptionKeySecurityEncryptionCategoriesCategoryKeysGetWithHttpInfo(string category, string ehelplySecuritySecretKey = default(string))
        {
            // verify the required parameter 'category' is set
            if (category == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'category' when calling SecurityApi->GetEncryptionKeySecurityEncryptionCategoriesCategoryKeysGet");

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("category", Ehelply.Sdk.Client.ClientUtils.ParameterToString(category)); // path parameter
            if (ehelplySecuritySecretKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-security-secret-key", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplySecuritySecretKey)); // header parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SecurityEncryptionKeyGet>>("/sam/security/encryption/categories/{category}/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEncryptionKeySecurityEncryptionCategoriesCategoryKeysGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Encryption Key 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"></param>
        /// <param name="ehelplySecuritySecretKey"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SecurityEncryptionKeyGet&gt;</returns>
        public async System.Threading.Tasks.Task<List<SecurityEncryptionKeyGet>> GetEncryptionKeySecurityEncryptionCategoriesCategoryKeysGetAsync(string category, string ehelplySecuritySecretKey = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<List<SecurityEncryptionKeyGet>> localVarResponse = await GetEncryptionKeySecurityEncryptionCategoriesCategoryKeysGetWithHttpInfoAsync(category, ehelplySecuritySecretKey, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Encryption Key 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"></param>
        /// <param name="ehelplySecuritySecretKey"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SecurityEncryptionKeyGet&gt;)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<List<SecurityEncryptionKeyGet>>> GetEncryptionKeySecurityEncryptionCategoriesCategoryKeysGetWithHttpInfoAsync(string category, string ehelplySecuritySecretKey = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'category' is set
            if (category == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'category' when calling SecurityApi->GetEncryptionKeySecurityEncryptionCategoriesCategoryKeysGet");


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("category", Ehelply.Sdk.Client.ClientUtils.ParameterToString(category)); // path parameter
            if (ehelplySecuritySecretKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-security-secret-key", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplySecuritySecretKey)); // header parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SecurityEncryptionKeyGet>>("/sam/security/encryption/categories/{category}/keys", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEncryptionKeySecurityEncryptionCategoriesCategoryKeysGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Key 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyUuid"></param>
        /// <returns>SecurityKeyGet</returns>
        public SecurityKeyGet GetKeySecurityKeysKeyUuidGet(string keyUuid)
        {
            Ehelply.Sdk.Client.ApiResponse<SecurityKeyGet> localVarResponse = GetKeySecurityKeysKeyUuidGetWithHttpInfo(keyUuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Key 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyUuid"></param>
        /// <returns>ApiResponse of SecurityKeyGet</returns>
        public Ehelply.Sdk.Client.ApiResponse<SecurityKeyGet> GetKeySecurityKeysKeyUuidGetWithHttpInfo(string keyUuid)
        {
            // verify the required parameter 'keyUuid' is set
            if (keyUuid == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'keyUuid' when calling SecurityApi->GetKeySecurityKeysKeyUuidGet");

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(keyUuid)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<SecurityKeyGet>("/sam/security/keys/{key_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetKeySecurityKeysKeyUuidGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Key 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SecurityKeyGet</returns>
        public async System.Threading.Tasks.Task<SecurityKeyGet> GetKeySecurityKeysKeyUuidGetAsync(string keyUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<SecurityKeyGet> localVarResponse = await GetKeySecurityKeysKeyUuidGetWithHttpInfoAsync(keyUuid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Key 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keyUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SecurityKeyGet)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<SecurityKeyGet>> GetKeySecurityKeysKeyUuidGetWithHttpInfoAsync(string keyUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'keyUuid' is set
            if (keyUuid == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'keyUuid' when calling SecurityApi->GetKeySecurityKeysKeyUuidGet");


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(keyUuid)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SecurityKeyGet>("/sam/security/keys/{key_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetKeySecurityKeysKeyUuidGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Keys 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;SecurityKeyGet&gt;</returns>
        public List<SecurityKeyGet> SearchKeysSecurityKeysGet()
        {
            Ehelply.Sdk.Client.ApiResponse<List<SecurityKeyGet>> localVarResponse = SearchKeysSecurityKeysGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Keys 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;SecurityKeyGet&gt;</returns>
        public Ehelply.Sdk.Client.ApiResponse<List<SecurityKeyGet>> SearchKeysSecurityKeysGetWithHttpInfo()
        {
            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SecurityKeyGet>>("/sam/security/keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchKeysSecurityKeysGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Keys 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SecurityKeyGet&gt;</returns>
        public async System.Threading.Tasks.Task<List<SecurityKeyGet>> SearchKeysSecurityKeysGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<List<SecurityKeyGet>> localVarResponse = await SearchKeysSecurityKeysGetWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Keys 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SecurityKeyGet&gt;)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<List<SecurityKeyGet>>> SearchKeysSecurityKeysGetWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SecurityKeyGet>>("/sam/security/keys", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchKeysSecurityKeysGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Verify Key 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyVerifyKeySecurityKeysVerifyPost"></param>
        /// <returns>SecurityKeyGet</returns>
        public SecurityKeyGet VerifyKeySecurityKeysVerifyPost(BodyVerifyKeySecurityKeysVerifyPost bodyVerifyKeySecurityKeysVerifyPost)
        {
            Ehelply.Sdk.Client.ApiResponse<SecurityKeyGet> localVarResponse = VerifyKeySecurityKeysVerifyPostWithHttpInfo(bodyVerifyKeySecurityKeysVerifyPost);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Verify Key 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyVerifyKeySecurityKeysVerifyPost"></param>
        /// <returns>ApiResponse of SecurityKeyGet</returns>
        public Ehelply.Sdk.Client.ApiResponse<SecurityKeyGet> VerifyKeySecurityKeysVerifyPostWithHttpInfo(BodyVerifyKeySecurityKeysVerifyPost bodyVerifyKeySecurityKeysVerifyPost)
        {
            // verify the required parameter 'bodyVerifyKeySecurityKeysVerifyPost' is set
            if (bodyVerifyKeySecurityKeysVerifyPost == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'bodyVerifyKeySecurityKeysVerifyPost' when calling SecurityApi->VerifyKeySecurityKeysVerifyPost");

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = bodyVerifyKeySecurityKeysVerifyPost;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SecurityKeyGet>("/sam/security/keys/verify", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyKeySecurityKeysVerifyPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Verify Key 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyVerifyKeySecurityKeysVerifyPost"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SecurityKeyGet</returns>
        public async System.Threading.Tasks.Task<SecurityKeyGet> VerifyKeySecurityKeysVerifyPostAsync(BodyVerifyKeySecurityKeysVerifyPost bodyVerifyKeySecurityKeysVerifyPost, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<SecurityKeyGet> localVarResponse = await VerifyKeySecurityKeysVerifyPostWithHttpInfoAsync(bodyVerifyKeySecurityKeysVerifyPost, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Verify Key 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyVerifyKeySecurityKeysVerifyPost"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SecurityKeyGet)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<SecurityKeyGet>> VerifyKeySecurityKeysVerifyPostWithHttpInfoAsync(BodyVerifyKeySecurityKeysVerifyPost bodyVerifyKeySecurityKeysVerifyPost, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'bodyVerifyKeySecurityKeysVerifyPost' is set
            if (bodyVerifyKeySecurityKeysVerifyPost == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'bodyVerifyKeySecurityKeysVerifyPost' when calling SecurityApi->VerifyKeySecurityKeysVerifyPost");


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = bodyVerifyKeySecurityKeysVerifyPost;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SecurityKeyGet>("/sam/security/keys/verify", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyKeySecurityKeysVerifyPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
