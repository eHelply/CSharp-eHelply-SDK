/*
 * eHelply SDK - 1.1.72
 *
 * eHelply SDK for SuperStack Services
 *
 * The version of the OpenAPI document: 1.1.72
 * Contact: support@ehelply.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Ehelply.Sdk.Client;
using Ehelply.Sdk.Model;

namespace Ehelply.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMetaApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Field
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="field"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>FieldDynamo</returns>
        FieldDynamo CreateField(Field field, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));

        /// <summary>
        /// Create Field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="field"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of FieldDynamo</returns>
        ApiResponse<FieldDynamo> CreateFieldWithHttpInfo(Field field, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));
        /// <summary>
        /// Create Meta
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="typeStr"></param>
        /// <param name="entityUuid"></param>
        /// <param name="metaCreate"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>MetaDynamo</returns>
        MetaDynamo CreateMeta(string service, string typeStr, string entityUuid, MetaCreate metaCreate, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));

        /// <summary>
        /// Create Meta
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="typeStr"></param>
        /// <param name="entityUuid"></param>
        /// <param name="metaCreate"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of MetaDynamo</returns>
        ApiResponse<MetaDynamo> CreateMetaWithHttpInfo(string service, string typeStr, string entityUuid, MetaCreate metaCreate, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));
        /// <summary>
        /// Delete Field
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldUuid"></param>
        /// <param name="softDelete"> (optional, default to true)</param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>Object</returns>
        Object DeleteField(string fieldUuid, bool? softDelete = default(bool?), string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));

        /// <summary>
        /// Delete Field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldUuid"></param>
        /// <param name="softDelete"> (optional, default to true)</param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteFieldWithHttpInfo(string fieldUuid, bool? softDelete = default(bool?), string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));
        /// <summary>
        /// Delete Meta
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="typeStr"></param>
        /// <param name="entityUuid"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>Object</returns>
        Object DeleteMeta(string service, string typeStr, string entityUuid, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));

        /// <summary>
        /// Delete Meta
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="typeStr"></param>
        /// <param name="entityUuid"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteMetaWithHttpInfo(string service, string typeStr, string entityUuid, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));
        /// <summary>
        /// Delete Meta From Uuid
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="metaUuid"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>Object</returns>
        Object DeleteMetaFromUuid(string metaUuid, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));

        /// <summary>
        /// Delete Meta From Uuid
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="metaUuid"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteMetaFromUuidWithHttpInfo(string metaUuid, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));
        /// <summary>
        /// Get Field
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldUuid"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>FieldDynamo</returns>
        FieldDynamo GetField(string fieldUuid, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));

        /// <summary>
        /// Get Field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldUuid"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of FieldDynamo</returns>
        ApiResponse<FieldDynamo> GetFieldWithHttpInfo(string fieldUuid, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));
        /// <summary>
        /// Get Meta
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="typeStr"></param>
        /// <param name="entityUuid"></param>
        /// <param name="detailed"> (optional, default to false)</param>
        /// <param name="custom"> (optional, default to false)</param>
        /// <param name="dates"> (optional, default to false)</param>
        /// <param name="history"> (optional, default to 0)</param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>MetaDynamo</returns>
        MetaDynamo GetMeta(string service, string typeStr, string entityUuid, bool? detailed = default(bool?), bool? custom = default(bool?), bool? dates = default(bool?), int? history = default(int?), string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));

        /// <summary>
        /// Get Meta
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="typeStr"></param>
        /// <param name="entityUuid"></param>
        /// <param name="detailed"> (optional, default to false)</param>
        /// <param name="custom"> (optional, default to false)</param>
        /// <param name="dates"> (optional, default to false)</param>
        /// <param name="history"> (optional, default to 0)</param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of MetaDynamo</returns>
        ApiResponse<MetaDynamo> GetMetaWithHttpInfo(string service, string typeStr, string entityUuid, bool? detailed = default(bool?), bool? custom = default(bool?), bool? dates = default(bool?), int? history = default(int?), string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));
        /// <summary>
        /// Get Meta From Uuid
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="metaUuid"></param>
        /// <param name="detailed"> (optional, default to false)</param>
        /// <param name="custom"> (optional, default to false)</param>
        /// <param name="dates"> (optional, default to false)</param>
        /// <param name="history"> (optional, default to 0)</param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>MetaDynamo</returns>
        MetaDynamo GetMetaFromUuid(string metaUuid, bool? detailed = default(bool?), bool? custom = default(bool?), bool? dates = default(bool?), int? history = default(int?), string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));

        /// <summary>
        /// Get Meta From Uuid
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="metaUuid"></param>
        /// <param name="detailed"> (optional, default to false)</param>
        /// <param name="custom"> (optional, default to false)</param>
        /// <param name="dates"> (optional, default to false)</param>
        /// <param name="history"> (optional, default to 0)</param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of MetaDynamo</returns>
        ApiResponse<MetaDynamo> GetMetaFromUuidWithHttpInfo(string metaUuid, bool? detailed = default(bool?), bool? custom = default(bool?), bool? dates = default(bool?), int? history = default(int?), string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));
        /// <summary>
        /// Make Slug
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="metaSlugger"></param>
        /// <returns>Object</returns>
        Object MakeSlug(MetaSlugger metaSlugger);

        /// <summary>
        /// Make Slug
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="metaSlugger"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> MakeSlugWithHttpInfo(MetaSlugger metaSlugger);
        /// <summary>
        /// Touch Meta
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="typeStr"></param>
        /// <param name="entityUuid"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>MetaDynamo</returns>
        MetaDynamo TouchMeta(string service, string typeStr, string entityUuid, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));

        /// <summary>
        /// Touch Meta
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="typeStr"></param>
        /// <param name="entityUuid"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of MetaDynamo</returns>
        ApiResponse<MetaDynamo> TouchMetaWithHttpInfo(string service, string typeStr, string entityUuid, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));
        /// <summary>
        /// Update Field
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldUuid"></param>
        /// <param name="field"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>Object</returns>
        Object UpdateField(string fieldUuid, Field field, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));

        /// <summary>
        /// Update Field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldUuid"></param>
        /// <param name="field"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateFieldWithHttpInfo(string fieldUuid, Field field, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));
        /// <summary>
        /// Update Meta
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="typeStr"></param>
        /// <param name="entityUuid"></param>
        /// <param name="metaCreate"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>MetaDynamo</returns>
        MetaDynamo UpdateMeta(string service, string typeStr, string entityUuid, MetaCreate metaCreate, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));

        /// <summary>
        /// Update Meta
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="typeStr"></param>
        /// <param name="entityUuid"></param>
        /// <param name="metaCreate"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of MetaDynamo</returns>
        ApiResponse<MetaDynamo> UpdateMetaWithHttpInfo(string service, string typeStr, string entityUuid, MetaCreate metaCreate, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));
        /// <summary>
        /// Update Meta From Uuid
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="metaUuid"></param>
        /// <param name="metaCreate"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>MetaDynamo</returns>
        MetaDynamo UpdateMetaFromUuid(string metaUuid, MetaCreate metaCreate, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));

        /// <summary>
        /// Update Meta From Uuid
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="metaUuid"></param>
        /// <param name="metaCreate"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of MetaDynamo</returns>
        ApiResponse<MetaDynamo> UpdateMetaFromUuidWithHttpInfo(string metaUuid, MetaCreate metaCreate, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMetaApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="field"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FieldDynamo</returns>
        System.Threading.Tasks.Task<FieldDynamo> CreateFieldAsync(Field field, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="field"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FieldDynamo)</returns>
        System.Threading.Tasks.Task<ApiResponse<FieldDynamo>> CreateFieldWithHttpInfoAsync(Field field, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Meta
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="typeStr"></param>
        /// <param name="entityUuid"></param>
        /// <param name="metaCreate"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MetaDynamo</returns>
        System.Threading.Tasks.Task<MetaDynamo> CreateMetaAsync(string service, string typeStr, string entityUuid, MetaCreate metaCreate, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Meta
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="typeStr"></param>
        /// <param name="entityUuid"></param>
        /// <param name="metaCreate"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MetaDynamo)</returns>
        System.Threading.Tasks.Task<ApiResponse<MetaDynamo>> CreateMetaWithHttpInfoAsync(string service, string typeStr, string entityUuid, MetaCreate metaCreate, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldUuid"></param>
        /// <param name="softDelete"> (optional, default to true)</param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteFieldAsync(string fieldUuid, bool? softDelete = default(bool?), string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldUuid"></param>
        /// <param name="softDelete"> (optional, default to true)</param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFieldWithHttpInfoAsync(string fieldUuid, bool? softDelete = default(bool?), string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Meta
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="typeStr"></param>
        /// <param name="entityUuid"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteMetaAsync(string service, string typeStr, string entityUuid, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Meta
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="typeStr"></param>
        /// <param name="entityUuid"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMetaWithHttpInfoAsync(string service, string typeStr, string entityUuid, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Meta From Uuid
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="metaUuid"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteMetaFromUuidAsync(string metaUuid, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Meta From Uuid
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="metaUuid"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMetaFromUuidWithHttpInfoAsync(string metaUuid, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldUuid"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FieldDynamo</returns>
        System.Threading.Tasks.Task<FieldDynamo> GetFieldAsync(string fieldUuid, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldUuid"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FieldDynamo)</returns>
        System.Threading.Tasks.Task<ApiResponse<FieldDynamo>> GetFieldWithHttpInfoAsync(string fieldUuid, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Meta
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="typeStr"></param>
        /// <param name="entityUuid"></param>
        /// <param name="detailed"> (optional, default to false)</param>
        /// <param name="custom"> (optional, default to false)</param>
        /// <param name="dates"> (optional, default to false)</param>
        /// <param name="history"> (optional, default to 0)</param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MetaDynamo</returns>
        System.Threading.Tasks.Task<MetaDynamo> GetMetaAsync(string service, string typeStr, string entityUuid, bool? detailed = default(bool?), bool? custom = default(bool?), bool? dates = default(bool?), int? history = default(int?), string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Meta
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="typeStr"></param>
        /// <param name="entityUuid"></param>
        /// <param name="detailed"> (optional, default to false)</param>
        /// <param name="custom"> (optional, default to false)</param>
        /// <param name="dates"> (optional, default to false)</param>
        /// <param name="history"> (optional, default to 0)</param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MetaDynamo)</returns>
        System.Threading.Tasks.Task<ApiResponse<MetaDynamo>> GetMetaWithHttpInfoAsync(string service, string typeStr, string entityUuid, bool? detailed = default(bool?), bool? custom = default(bool?), bool? dates = default(bool?), int? history = default(int?), string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Meta From Uuid
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="metaUuid"></param>
        /// <param name="detailed"> (optional, default to false)</param>
        /// <param name="custom"> (optional, default to false)</param>
        /// <param name="dates"> (optional, default to false)</param>
        /// <param name="history"> (optional, default to 0)</param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MetaDynamo</returns>
        System.Threading.Tasks.Task<MetaDynamo> GetMetaFromUuidAsync(string metaUuid, bool? detailed = default(bool?), bool? custom = default(bool?), bool? dates = default(bool?), int? history = default(int?), string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Meta From Uuid
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="metaUuid"></param>
        /// <param name="detailed"> (optional, default to false)</param>
        /// <param name="custom"> (optional, default to false)</param>
        /// <param name="dates"> (optional, default to false)</param>
        /// <param name="history"> (optional, default to 0)</param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MetaDynamo)</returns>
        System.Threading.Tasks.Task<ApiResponse<MetaDynamo>> GetMetaFromUuidWithHttpInfoAsync(string metaUuid, bool? detailed = default(bool?), bool? custom = default(bool?), bool? dates = default(bool?), int? history = default(int?), string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Make Slug
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="metaSlugger"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> MakeSlugAsync(MetaSlugger metaSlugger, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Make Slug
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="metaSlugger"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MakeSlugWithHttpInfoAsync(MetaSlugger metaSlugger, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Touch Meta
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="typeStr"></param>
        /// <param name="entityUuid"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MetaDynamo</returns>
        System.Threading.Tasks.Task<MetaDynamo> TouchMetaAsync(string service, string typeStr, string entityUuid, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Touch Meta
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="typeStr"></param>
        /// <param name="entityUuid"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MetaDynamo)</returns>
        System.Threading.Tasks.Task<ApiResponse<MetaDynamo>> TouchMetaWithHttpInfoAsync(string service, string typeStr, string entityUuid, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldUuid"></param>
        /// <param name="field"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateFieldAsync(string fieldUuid, Field field, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Field
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldUuid"></param>
        /// <param name="field"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateFieldWithHttpInfoAsync(string fieldUuid, Field field, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Meta
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="typeStr"></param>
        /// <param name="entityUuid"></param>
        /// <param name="metaCreate"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MetaDynamo</returns>
        System.Threading.Tasks.Task<MetaDynamo> UpdateMetaAsync(string service, string typeStr, string entityUuid, MetaCreate metaCreate, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Meta
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="typeStr"></param>
        /// <param name="entityUuid"></param>
        /// <param name="metaCreate"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MetaDynamo)</returns>
        System.Threading.Tasks.Task<ApiResponse<MetaDynamo>> UpdateMetaWithHttpInfoAsync(string service, string typeStr, string entityUuid, MetaCreate metaCreate, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Meta From Uuid
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="metaUuid"></param>
        /// <param name="metaCreate"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MetaDynamo</returns>
        System.Threading.Tasks.Task<MetaDynamo> UpdateMetaFromUuidAsync(string metaUuid, MetaCreate metaCreate, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Meta From Uuid
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="metaUuid"></param>
        /// <param name="metaCreate"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MetaDynamo)</returns>
        System.Threading.Tasks.Task<ApiResponse<MetaDynamo>> UpdateMetaFromUuidWithHttpInfoAsync(string metaUuid, MetaCreate metaCreate, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMetaApi : IMetaApiSync, IMetaApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MetaApi : IMetaApi
    {
        private Ehelply.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MetaApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MetaApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetaApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MetaApi(string basePath)
        {
            this.Configuration = Ehelply.Sdk.Client.Configuration.MergeConfigurations(
                Ehelply.Sdk.Client.GlobalConfiguration.Instance,
                new Ehelply.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Ehelply.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Ehelply.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Ehelply.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetaApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MetaApi(Ehelply.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Ehelply.Sdk.Client.Configuration.MergeConfigurations(
                Ehelply.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Ehelply.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Ehelply.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Ehelply.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetaApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MetaApi(Ehelply.Sdk.Client.ISynchronousClient client, Ehelply.Sdk.Client.IAsynchronousClient asyncClient, Ehelply.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Ehelply.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Ehelply.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Ehelply.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Ehelply.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Ehelply.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Field 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="field"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>FieldDynamo</returns>
        public FieldDynamo CreateField(Field field, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            Ehelply.Sdk.Client.ApiResponse<FieldDynamo> localVarResponse = CreateFieldWithHttpInfo(field, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Field 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="field"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of FieldDynamo</returns>
        public Ehelply.Sdk.Client.ApiResponse<FieldDynamo> CreateFieldWithHttpInfo(Field field, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            // verify the required parameter 'field' is set
            if (field == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'field' when calling MetaApi->CreateField");

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }
            localVarRequestOptions.Data = field;


            // make the HTTP request
            var localVarResponse = this.Client.Post<FieldDynamo>("/meta/field", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateField", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Field 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="field"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FieldDynamo</returns>
        public async System.Threading.Tasks.Task<FieldDynamo> CreateFieldAsync(Field field, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<FieldDynamo> localVarResponse = await CreateFieldWithHttpInfoAsync(field, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Field 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="field"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FieldDynamo)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<FieldDynamo>> CreateFieldWithHttpInfoAsync(Field field, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'field' is set
            if (field == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'field' when calling MetaApi->CreateField");


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }
            localVarRequestOptions.Data = field;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<FieldDynamo>("/meta/field", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateField", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Meta 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="typeStr"></param>
        /// <param name="entityUuid"></param>
        /// <param name="metaCreate"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>MetaDynamo</returns>
        public MetaDynamo CreateMeta(string service, string typeStr, string entityUuid, MetaCreate metaCreate, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            Ehelply.Sdk.Client.ApiResponse<MetaDynamo> localVarResponse = CreateMetaWithHttpInfo(service, typeStr, entityUuid, metaCreate, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Meta 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="typeStr"></param>
        /// <param name="entityUuid"></param>
        /// <param name="metaCreate"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of MetaDynamo</returns>
        public Ehelply.Sdk.Client.ApiResponse<MetaDynamo> CreateMetaWithHttpInfo(string service, string typeStr, string entityUuid, MetaCreate metaCreate, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            // verify the required parameter 'service' is set
            if (service == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MetaApi->CreateMeta");

            // verify the required parameter 'typeStr' is set
            if (typeStr == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'typeStr' when calling MetaApi->CreateMeta");

            // verify the required parameter 'entityUuid' is set
            if (entityUuid == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'entityUuid' when calling MetaApi->CreateMeta");

            // verify the required parameter 'metaCreate' is set
            if (metaCreate == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'metaCreate' when calling MetaApi->CreateMeta");

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("type_str", Ehelply.Sdk.Client.ClientUtils.ParameterToString(typeStr)); // path parameter
            localVarRequestOptions.PathParameters.Add("entity_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(entityUuid)); // path parameter
            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }
            localVarRequestOptions.Data = metaCreate;


            // make the HTTP request
            var localVarResponse = this.Client.Post<MetaDynamo>("/meta/meta/service/{service}/type/{type_str}/entity/{entity_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMeta", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Meta 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="typeStr"></param>
        /// <param name="entityUuid"></param>
        /// <param name="metaCreate"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MetaDynamo</returns>
        public async System.Threading.Tasks.Task<MetaDynamo> CreateMetaAsync(string service, string typeStr, string entityUuid, MetaCreate metaCreate, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<MetaDynamo> localVarResponse = await CreateMetaWithHttpInfoAsync(service, typeStr, entityUuid, metaCreate, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Meta 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="typeStr"></param>
        /// <param name="entityUuid"></param>
        /// <param name="metaCreate"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MetaDynamo)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<MetaDynamo>> CreateMetaWithHttpInfoAsync(string service, string typeStr, string entityUuid, MetaCreate metaCreate, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'service' is set
            if (service == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MetaApi->CreateMeta");

            // verify the required parameter 'typeStr' is set
            if (typeStr == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'typeStr' when calling MetaApi->CreateMeta");

            // verify the required parameter 'entityUuid' is set
            if (entityUuid == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'entityUuid' when calling MetaApi->CreateMeta");

            // verify the required parameter 'metaCreate' is set
            if (metaCreate == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'metaCreate' when calling MetaApi->CreateMeta");


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("type_str", Ehelply.Sdk.Client.ClientUtils.ParameterToString(typeStr)); // path parameter
            localVarRequestOptions.PathParameters.Add("entity_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(entityUuid)); // path parameter
            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }
            localVarRequestOptions.Data = metaCreate;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<MetaDynamo>("/meta/meta/service/{service}/type/{type_str}/entity/{entity_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMeta", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Field 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldUuid"></param>
        /// <param name="softDelete"> (optional, default to true)</param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>Object</returns>
        public Object DeleteField(string fieldUuid, bool? softDelete = default(bool?), string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = DeleteFieldWithHttpInfo(fieldUuid, softDelete, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Field 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldUuid"></param>
        /// <param name="softDelete"> (optional, default to true)</param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public Ehelply.Sdk.Client.ApiResponse<Object> DeleteFieldWithHttpInfo(string fieldUuid, bool? softDelete = default(bool?), string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            // verify the required parameter 'fieldUuid' is set
            if (fieldUuid == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'fieldUuid' when calling MetaApi->DeleteField");

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("field_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(fieldUuid)); // path parameter
            if (softDelete != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "soft_delete", softDelete));
            }
            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/meta/field/{field_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteField", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Field 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldUuid"></param>
        /// <param name="softDelete"> (optional, default to true)</param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteFieldAsync(string fieldUuid, bool? softDelete = default(bool?), string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = await DeleteFieldWithHttpInfoAsync(fieldUuid, softDelete, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Field 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldUuid"></param>
        /// <param name="softDelete"> (optional, default to true)</param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<Object>> DeleteFieldWithHttpInfoAsync(string fieldUuid, bool? softDelete = default(bool?), string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'fieldUuid' is set
            if (fieldUuid == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'fieldUuid' when calling MetaApi->DeleteField");


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("field_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(fieldUuid)); // path parameter
            if (softDelete != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "soft_delete", softDelete));
            }
            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/meta/field/{field_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteField", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Meta 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="typeStr"></param>
        /// <param name="entityUuid"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>Object</returns>
        public Object DeleteMeta(string service, string typeStr, string entityUuid, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = DeleteMetaWithHttpInfo(service, typeStr, entityUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Meta 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="typeStr"></param>
        /// <param name="entityUuid"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public Ehelply.Sdk.Client.ApiResponse<Object> DeleteMetaWithHttpInfo(string service, string typeStr, string entityUuid, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            // verify the required parameter 'service' is set
            if (service == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MetaApi->DeleteMeta");

            // verify the required parameter 'typeStr' is set
            if (typeStr == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'typeStr' when calling MetaApi->DeleteMeta");

            // verify the required parameter 'entityUuid' is set
            if (entityUuid == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'entityUuid' when calling MetaApi->DeleteMeta");

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("type_str", Ehelply.Sdk.Client.ClientUtils.ParameterToString(typeStr)); // path parameter
            localVarRequestOptions.PathParameters.Add("entity_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(entityUuid)); // path parameter
            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/meta/meta/service/{service}/type/{type_str}/entity/{entity_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMeta", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Meta 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="typeStr"></param>
        /// <param name="entityUuid"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteMetaAsync(string service, string typeStr, string entityUuid, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = await DeleteMetaWithHttpInfoAsync(service, typeStr, entityUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Meta 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="typeStr"></param>
        /// <param name="entityUuid"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<Object>> DeleteMetaWithHttpInfoAsync(string service, string typeStr, string entityUuid, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'service' is set
            if (service == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MetaApi->DeleteMeta");

            // verify the required parameter 'typeStr' is set
            if (typeStr == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'typeStr' when calling MetaApi->DeleteMeta");

            // verify the required parameter 'entityUuid' is set
            if (entityUuid == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'entityUuid' when calling MetaApi->DeleteMeta");


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("type_str", Ehelply.Sdk.Client.ClientUtils.ParameterToString(typeStr)); // path parameter
            localVarRequestOptions.PathParameters.Add("entity_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(entityUuid)); // path parameter
            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/meta/meta/service/{service}/type/{type_str}/entity/{entity_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMeta", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Meta From Uuid 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="metaUuid"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>Object</returns>
        public Object DeleteMetaFromUuid(string metaUuid, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = DeleteMetaFromUuidWithHttpInfo(metaUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Meta From Uuid 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="metaUuid"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public Ehelply.Sdk.Client.ApiResponse<Object> DeleteMetaFromUuidWithHttpInfo(string metaUuid, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            // verify the required parameter 'metaUuid' is set
            if (metaUuid == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'metaUuid' when calling MetaApi->DeleteMetaFromUuid");

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("meta_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(metaUuid)); // path parameter
            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/meta/meta/{meta_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMetaFromUuid", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Meta From Uuid 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="metaUuid"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteMetaFromUuidAsync(string metaUuid, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = await DeleteMetaFromUuidWithHttpInfoAsync(metaUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Meta From Uuid 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="metaUuid"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<Object>> DeleteMetaFromUuidWithHttpInfoAsync(string metaUuid, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'metaUuid' is set
            if (metaUuid == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'metaUuid' when calling MetaApi->DeleteMetaFromUuid");


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("meta_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(metaUuid)); // path parameter
            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/meta/meta/{meta_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMetaFromUuid", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Field 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldUuid"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>FieldDynamo</returns>
        public FieldDynamo GetField(string fieldUuid, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            Ehelply.Sdk.Client.ApiResponse<FieldDynamo> localVarResponse = GetFieldWithHttpInfo(fieldUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Field 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldUuid"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of FieldDynamo</returns>
        public Ehelply.Sdk.Client.ApiResponse<FieldDynamo> GetFieldWithHttpInfo(string fieldUuid, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            // verify the required parameter 'fieldUuid' is set
            if (fieldUuid == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'fieldUuid' when calling MetaApi->GetField");

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("field_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(fieldUuid)); // path parameter
            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<FieldDynamo>("/meta/field/{field_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetField", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Field 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldUuid"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FieldDynamo</returns>
        public async System.Threading.Tasks.Task<FieldDynamo> GetFieldAsync(string fieldUuid, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<FieldDynamo> localVarResponse = await GetFieldWithHttpInfoAsync(fieldUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Field 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldUuid"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FieldDynamo)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<FieldDynamo>> GetFieldWithHttpInfoAsync(string fieldUuid, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'fieldUuid' is set
            if (fieldUuid == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'fieldUuid' when calling MetaApi->GetField");


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("field_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(fieldUuid)); // path parameter
            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FieldDynamo>("/meta/field/{field_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetField", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Meta 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="typeStr"></param>
        /// <param name="entityUuid"></param>
        /// <param name="detailed"> (optional, default to false)</param>
        /// <param name="custom"> (optional, default to false)</param>
        /// <param name="dates"> (optional, default to false)</param>
        /// <param name="history"> (optional, default to 0)</param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>MetaDynamo</returns>
        public MetaDynamo GetMeta(string service, string typeStr, string entityUuid, bool? detailed = default(bool?), bool? custom = default(bool?), bool? dates = default(bool?), int? history = default(int?), string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            Ehelply.Sdk.Client.ApiResponse<MetaDynamo> localVarResponse = GetMetaWithHttpInfo(service, typeStr, entityUuid, detailed, custom, dates, history, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Meta 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="typeStr"></param>
        /// <param name="entityUuid"></param>
        /// <param name="detailed"> (optional, default to false)</param>
        /// <param name="custom"> (optional, default to false)</param>
        /// <param name="dates"> (optional, default to false)</param>
        /// <param name="history"> (optional, default to 0)</param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of MetaDynamo</returns>
        public Ehelply.Sdk.Client.ApiResponse<MetaDynamo> GetMetaWithHttpInfo(string service, string typeStr, string entityUuid, bool? detailed = default(bool?), bool? custom = default(bool?), bool? dates = default(bool?), int? history = default(int?), string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            // verify the required parameter 'service' is set
            if (service == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MetaApi->GetMeta");

            // verify the required parameter 'typeStr' is set
            if (typeStr == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'typeStr' when calling MetaApi->GetMeta");

            // verify the required parameter 'entityUuid' is set
            if (entityUuid == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'entityUuid' when calling MetaApi->GetMeta");

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("type_str", Ehelply.Sdk.Client.ClientUtils.ParameterToString(typeStr)); // path parameter
            localVarRequestOptions.PathParameters.Add("entity_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(entityUuid)); // path parameter
            if (detailed != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "detailed", detailed));
            }
            if (custom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "custom", custom));
            }
            if (dates != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "dates", dates));
            }
            if (history != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "history", history));
            }
            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<MetaDynamo>("/meta/meta/service/{service}/type/{type_str}/entity/{entity_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMeta", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Meta 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="typeStr"></param>
        /// <param name="entityUuid"></param>
        /// <param name="detailed"> (optional, default to false)</param>
        /// <param name="custom"> (optional, default to false)</param>
        /// <param name="dates"> (optional, default to false)</param>
        /// <param name="history"> (optional, default to 0)</param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MetaDynamo</returns>
        public async System.Threading.Tasks.Task<MetaDynamo> GetMetaAsync(string service, string typeStr, string entityUuid, bool? detailed = default(bool?), bool? custom = default(bool?), bool? dates = default(bool?), int? history = default(int?), string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<MetaDynamo> localVarResponse = await GetMetaWithHttpInfoAsync(service, typeStr, entityUuid, detailed, custom, dates, history, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Meta 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="typeStr"></param>
        /// <param name="entityUuid"></param>
        /// <param name="detailed"> (optional, default to false)</param>
        /// <param name="custom"> (optional, default to false)</param>
        /// <param name="dates"> (optional, default to false)</param>
        /// <param name="history"> (optional, default to 0)</param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MetaDynamo)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<MetaDynamo>> GetMetaWithHttpInfoAsync(string service, string typeStr, string entityUuid, bool? detailed = default(bool?), bool? custom = default(bool?), bool? dates = default(bool?), int? history = default(int?), string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'service' is set
            if (service == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MetaApi->GetMeta");

            // verify the required parameter 'typeStr' is set
            if (typeStr == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'typeStr' when calling MetaApi->GetMeta");

            // verify the required parameter 'entityUuid' is set
            if (entityUuid == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'entityUuid' when calling MetaApi->GetMeta");


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("type_str", Ehelply.Sdk.Client.ClientUtils.ParameterToString(typeStr)); // path parameter
            localVarRequestOptions.PathParameters.Add("entity_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(entityUuid)); // path parameter
            if (detailed != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "detailed", detailed));
            }
            if (custom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "custom", custom));
            }
            if (dates != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "dates", dates));
            }
            if (history != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "history", history));
            }
            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MetaDynamo>("/meta/meta/service/{service}/type/{type_str}/entity/{entity_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMeta", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Meta From Uuid 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="metaUuid"></param>
        /// <param name="detailed"> (optional, default to false)</param>
        /// <param name="custom"> (optional, default to false)</param>
        /// <param name="dates"> (optional, default to false)</param>
        /// <param name="history"> (optional, default to 0)</param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>MetaDynamo</returns>
        public MetaDynamo GetMetaFromUuid(string metaUuid, bool? detailed = default(bool?), bool? custom = default(bool?), bool? dates = default(bool?), int? history = default(int?), string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            Ehelply.Sdk.Client.ApiResponse<MetaDynamo> localVarResponse = GetMetaFromUuidWithHttpInfo(metaUuid, detailed, custom, dates, history, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Meta From Uuid 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="metaUuid"></param>
        /// <param name="detailed"> (optional, default to false)</param>
        /// <param name="custom"> (optional, default to false)</param>
        /// <param name="dates"> (optional, default to false)</param>
        /// <param name="history"> (optional, default to 0)</param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of MetaDynamo</returns>
        public Ehelply.Sdk.Client.ApiResponse<MetaDynamo> GetMetaFromUuidWithHttpInfo(string metaUuid, bool? detailed = default(bool?), bool? custom = default(bool?), bool? dates = default(bool?), int? history = default(int?), string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            // verify the required parameter 'metaUuid' is set
            if (metaUuid == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'metaUuid' when calling MetaApi->GetMetaFromUuid");

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("meta_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(metaUuid)); // path parameter
            if (detailed != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "detailed", detailed));
            }
            if (custom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "custom", custom));
            }
            if (dates != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "dates", dates));
            }
            if (history != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "history", history));
            }
            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<MetaDynamo>("/meta/meta/{meta_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMetaFromUuid", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Meta From Uuid 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="metaUuid"></param>
        /// <param name="detailed"> (optional, default to false)</param>
        /// <param name="custom"> (optional, default to false)</param>
        /// <param name="dates"> (optional, default to false)</param>
        /// <param name="history"> (optional, default to 0)</param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MetaDynamo</returns>
        public async System.Threading.Tasks.Task<MetaDynamo> GetMetaFromUuidAsync(string metaUuid, bool? detailed = default(bool?), bool? custom = default(bool?), bool? dates = default(bool?), int? history = default(int?), string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<MetaDynamo> localVarResponse = await GetMetaFromUuidWithHttpInfoAsync(metaUuid, detailed, custom, dates, history, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Meta From Uuid 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="metaUuid"></param>
        /// <param name="detailed"> (optional, default to false)</param>
        /// <param name="custom"> (optional, default to false)</param>
        /// <param name="dates"> (optional, default to false)</param>
        /// <param name="history"> (optional, default to 0)</param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MetaDynamo)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<MetaDynamo>> GetMetaFromUuidWithHttpInfoAsync(string metaUuid, bool? detailed = default(bool?), bool? custom = default(bool?), bool? dates = default(bool?), int? history = default(int?), string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'metaUuid' is set
            if (metaUuid == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'metaUuid' when calling MetaApi->GetMetaFromUuid");


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("meta_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(metaUuid)); // path parameter
            if (detailed != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "detailed", detailed));
            }
            if (custom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "custom", custom));
            }
            if (dates != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "dates", dates));
            }
            if (history != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "history", history));
            }
            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MetaDynamo>("/meta/meta/{meta_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMetaFromUuid", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Make Slug 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="metaSlugger"></param>
        /// <returns>Object</returns>
        public Object MakeSlug(MetaSlugger metaSlugger)
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = MakeSlugWithHttpInfo(metaSlugger);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Make Slug 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="metaSlugger"></param>
        /// <returns>ApiResponse of Object</returns>
        public Ehelply.Sdk.Client.ApiResponse<Object> MakeSlugWithHttpInfo(MetaSlugger metaSlugger)
        {
            // verify the required parameter 'metaSlugger' is set
            if (metaSlugger == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'metaSlugger' when calling MetaApi->MakeSlug");

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = metaSlugger;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/meta/meta/slug", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MakeSlug", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Make Slug 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="metaSlugger"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> MakeSlugAsync(MetaSlugger metaSlugger, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = await MakeSlugWithHttpInfoAsync(metaSlugger, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Make Slug 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="metaSlugger"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<Object>> MakeSlugWithHttpInfoAsync(MetaSlugger metaSlugger, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'metaSlugger' is set
            if (metaSlugger == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'metaSlugger' when calling MetaApi->MakeSlug");


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = metaSlugger;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/meta/meta/slug", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MakeSlug", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Touch Meta 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="typeStr"></param>
        /// <param name="entityUuid"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>MetaDynamo</returns>
        public MetaDynamo TouchMeta(string service, string typeStr, string entityUuid, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            Ehelply.Sdk.Client.ApiResponse<MetaDynamo> localVarResponse = TouchMetaWithHttpInfo(service, typeStr, entityUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Touch Meta 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="typeStr"></param>
        /// <param name="entityUuid"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of MetaDynamo</returns>
        public Ehelply.Sdk.Client.ApiResponse<MetaDynamo> TouchMetaWithHttpInfo(string service, string typeStr, string entityUuid, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            // verify the required parameter 'service' is set
            if (service == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MetaApi->TouchMeta");

            // verify the required parameter 'typeStr' is set
            if (typeStr == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'typeStr' when calling MetaApi->TouchMeta");

            // verify the required parameter 'entityUuid' is set
            if (entityUuid == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'entityUuid' when calling MetaApi->TouchMeta");

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("type_str", Ehelply.Sdk.Client.ClientUtils.ParameterToString(typeStr)); // path parameter
            localVarRequestOptions.PathParameters.Add("entity_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(entityUuid)); // path parameter
            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Post<MetaDynamo>("/meta/meta/service/{service}/type/{type_str}/entity/{entity_uuid}/touch", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TouchMeta", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Touch Meta 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="typeStr"></param>
        /// <param name="entityUuid"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MetaDynamo</returns>
        public async System.Threading.Tasks.Task<MetaDynamo> TouchMetaAsync(string service, string typeStr, string entityUuid, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<MetaDynamo> localVarResponse = await TouchMetaWithHttpInfoAsync(service, typeStr, entityUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Touch Meta 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="typeStr"></param>
        /// <param name="entityUuid"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MetaDynamo)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<MetaDynamo>> TouchMetaWithHttpInfoAsync(string service, string typeStr, string entityUuid, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'service' is set
            if (service == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MetaApi->TouchMeta");

            // verify the required parameter 'typeStr' is set
            if (typeStr == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'typeStr' when calling MetaApi->TouchMeta");

            // verify the required parameter 'entityUuid' is set
            if (entityUuid == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'entityUuid' when calling MetaApi->TouchMeta");


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("type_str", Ehelply.Sdk.Client.ClientUtils.ParameterToString(typeStr)); // path parameter
            localVarRequestOptions.PathParameters.Add("entity_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(entityUuid)); // path parameter
            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<MetaDynamo>("/meta/meta/service/{service}/type/{type_str}/entity/{entity_uuid}/touch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TouchMeta", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Field 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldUuid"></param>
        /// <param name="field"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>Object</returns>
        public Object UpdateField(string fieldUuid, Field field, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = UpdateFieldWithHttpInfo(fieldUuid, field, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Field 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldUuid"></param>
        /// <param name="field"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public Ehelply.Sdk.Client.ApiResponse<Object> UpdateFieldWithHttpInfo(string fieldUuid, Field field, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            // verify the required parameter 'fieldUuid' is set
            if (fieldUuid == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'fieldUuid' when calling MetaApi->UpdateField");

            // verify the required parameter 'field' is set
            if (field == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'field' when calling MetaApi->UpdateField");

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("field_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(fieldUuid)); // path parameter
            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }
            localVarRequestOptions.Data = field;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/meta/field/{field_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateField", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Field 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldUuid"></param>
        /// <param name="field"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateFieldAsync(string fieldUuid, Field field, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = await UpdateFieldWithHttpInfoAsync(fieldUuid, field, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Field 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldUuid"></param>
        /// <param name="field"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<Object>> UpdateFieldWithHttpInfoAsync(string fieldUuid, Field field, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'fieldUuid' is set
            if (fieldUuid == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'fieldUuid' when calling MetaApi->UpdateField");

            // verify the required parameter 'field' is set
            if (field == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'field' when calling MetaApi->UpdateField");


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("field_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(fieldUuid)); // path parameter
            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }
            localVarRequestOptions.Data = field;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/meta/field/{field_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateField", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Meta 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="typeStr"></param>
        /// <param name="entityUuid"></param>
        /// <param name="metaCreate"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>MetaDynamo</returns>
        public MetaDynamo UpdateMeta(string service, string typeStr, string entityUuid, MetaCreate metaCreate, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            Ehelply.Sdk.Client.ApiResponse<MetaDynamo> localVarResponse = UpdateMetaWithHttpInfo(service, typeStr, entityUuid, metaCreate, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Meta 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="typeStr"></param>
        /// <param name="entityUuid"></param>
        /// <param name="metaCreate"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of MetaDynamo</returns>
        public Ehelply.Sdk.Client.ApiResponse<MetaDynamo> UpdateMetaWithHttpInfo(string service, string typeStr, string entityUuid, MetaCreate metaCreate, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            // verify the required parameter 'service' is set
            if (service == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MetaApi->UpdateMeta");

            // verify the required parameter 'typeStr' is set
            if (typeStr == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'typeStr' when calling MetaApi->UpdateMeta");

            // verify the required parameter 'entityUuid' is set
            if (entityUuid == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'entityUuid' when calling MetaApi->UpdateMeta");

            // verify the required parameter 'metaCreate' is set
            if (metaCreate == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'metaCreate' when calling MetaApi->UpdateMeta");

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("type_str", Ehelply.Sdk.Client.ClientUtils.ParameterToString(typeStr)); // path parameter
            localVarRequestOptions.PathParameters.Add("entity_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(entityUuid)); // path parameter
            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }
            localVarRequestOptions.Data = metaCreate;


            // make the HTTP request
            var localVarResponse = this.Client.Put<MetaDynamo>("/meta/meta/service/{service}/type/{type_str}/entity/{entity_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMeta", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Meta 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="typeStr"></param>
        /// <param name="entityUuid"></param>
        /// <param name="metaCreate"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MetaDynamo</returns>
        public async System.Threading.Tasks.Task<MetaDynamo> UpdateMetaAsync(string service, string typeStr, string entityUuid, MetaCreate metaCreate, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<MetaDynamo> localVarResponse = await UpdateMetaWithHttpInfoAsync(service, typeStr, entityUuid, metaCreate, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Meta 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="typeStr"></param>
        /// <param name="entityUuid"></param>
        /// <param name="metaCreate"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MetaDynamo)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<MetaDynamo>> UpdateMetaWithHttpInfoAsync(string service, string typeStr, string entityUuid, MetaCreate metaCreate, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'service' is set
            if (service == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MetaApi->UpdateMeta");

            // verify the required parameter 'typeStr' is set
            if (typeStr == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'typeStr' when calling MetaApi->UpdateMeta");

            // verify the required parameter 'entityUuid' is set
            if (entityUuid == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'entityUuid' when calling MetaApi->UpdateMeta");

            // verify the required parameter 'metaCreate' is set
            if (metaCreate == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'metaCreate' when calling MetaApi->UpdateMeta");


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("type_str", Ehelply.Sdk.Client.ClientUtils.ParameterToString(typeStr)); // path parameter
            localVarRequestOptions.PathParameters.Add("entity_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(entityUuid)); // path parameter
            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }
            localVarRequestOptions.Data = metaCreate;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<MetaDynamo>("/meta/meta/service/{service}/type/{type_str}/entity/{entity_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMeta", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Meta From Uuid 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="metaUuid"></param>
        /// <param name="metaCreate"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>MetaDynamo</returns>
        public MetaDynamo UpdateMetaFromUuid(string metaUuid, MetaCreate metaCreate, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            Ehelply.Sdk.Client.ApiResponse<MetaDynamo> localVarResponse = UpdateMetaFromUuidWithHttpInfo(metaUuid, metaCreate, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Meta From Uuid 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="metaUuid"></param>
        /// <param name="metaCreate"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <returns>ApiResponse of MetaDynamo</returns>
        public Ehelply.Sdk.Client.ApiResponse<MetaDynamo> UpdateMetaFromUuidWithHttpInfo(string metaUuid, MetaCreate metaCreate, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string))
        {
            // verify the required parameter 'metaUuid' is set
            if (metaUuid == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'metaUuid' when calling MetaApi->UpdateMetaFromUuid");

            // verify the required parameter 'metaCreate' is set
            if (metaCreate == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'metaCreate' when calling MetaApi->UpdateMetaFromUuid");

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("meta_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(metaUuid)); // path parameter
            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }
            localVarRequestOptions.Data = metaCreate;


            // make the HTTP request
            var localVarResponse = this.Client.Put<MetaDynamo>("/meta/meta/{meta_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMetaFromUuid", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Meta From Uuid 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="metaUuid"></param>
        /// <param name="metaCreate"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MetaDynamo</returns>
        public async System.Threading.Tasks.Task<MetaDynamo> UpdateMetaFromUuidAsync(string metaUuid, MetaCreate metaCreate, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<MetaDynamo> localVarResponse = await UpdateMetaFromUuidWithHttpInfoAsync(metaUuid, metaCreate, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Meta From Uuid 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="metaUuid"></param>
        /// <param name="metaCreate"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MetaDynamo)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<MetaDynamo>> UpdateMetaFromUuidWithHttpInfoAsync(string metaUuid, MetaCreate metaCreate, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'metaUuid' is set
            if (metaUuid == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'metaUuid' when calling MetaApi->UpdateMetaFromUuid");

            // verify the required parameter 'metaCreate' is set
            if (metaCreate == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'metaCreate' when calling MetaApi->UpdateMetaFromUuid");


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("meta_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(metaUuid)); // path parameter
            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }
            localVarRequestOptions.Data = metaCreate;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<MetaDynamo>("/meta/meta/{meta_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMetaFromUuid", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
