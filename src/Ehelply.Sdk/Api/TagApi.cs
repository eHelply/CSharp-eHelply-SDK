/*
 * eHelply SDK - 1.1.98
 *
 * eHelply SDK for SuperStack Services
 *
 * The version of the OpenAPI document: 1.1.98
 * Contact: support@ehelply.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Ehelply.Sdk.Client;
using Ehelply.Sdk.Model;

namespace Ehelply.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITagApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Tag
        /// </summary>
        /// <remarks>
        /// Creates a tag
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagBase"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TagDb</returns>
        TagDb CreateTagPlacesTagsPost(TagBase tagBase, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), int operationIndex = 0);

        /// <summary>
        /// Create Tag
        /// </summary>
        /// <remarks>
        /// Creates a tag
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagBase"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TagDb</returns>
        ApiResponse<TagDb> CreateTagPlacesTagsPostWithHttpInfo(TagBase tagBase, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), int operationIndex = 0);
        /// <summary>
        /// Delete Tag
        /// </summary>
        /// <remarks>
        /// Deletes the tag member with the given ID and returns True if successful
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagUuid"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object DeleteTagPlacesTagsTagUuidDelete(string tagUuid, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), int operationIndex = 0);

        /// <summary>
        /// Delete Tag
        /// </summary>
        /// <remarks>
        /// Deletes the tag member with the given ID and returns True if successful
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagUuid"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteTagPlacesTagsTagUuidDeleteWithHttpInfo(string tagUuid, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), int operationIndex = 0);
        /// <summary>
        /// Get Tag
        /// </summary>
        /// <remarks>
        /// Gets the tag member information given the tag ID
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagUuid"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TagBase</returns>
        TagBase GetTagPlacesTagsTagUuidGet(string tagUuid, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), int operationIndex = 0);

        /// <summary>
        /// Get Tag
        /// </summary>
        /// <remarks>
        /// Gets the tag member information given the tag ID
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagUuid"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TagBase</returns>
        ApiResponse<TagBase> GetTagPlacesTagsTagUuidGetWithHttpInfo(string tagUuid, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), int operationIndex = 0);
        /// <summary>
        /// Search Tags
        /// </summary>
        /// <remarks>
        /// TODO Item return format: &#x60;&#x60;&#x60; {     uuid                                **type:** string     project_uuid                        **type:** string or None      name                                **type:** string or None      meta                                **type:** dict or None      created_at                          **type:** string or None      updated_at                          **type:** string or None      deleted_at                          **type:** string or None  } &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 25)</param>
        /// <param name="sortOn"> (optional)</param>
        /// <param name="sortDesc"> (optional, default to false)</param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Page</returns>
        Page SearchTagsPlacesTagsGet(string projectUuid = default(string), string name = default(string), int? page = default(int?), int? pageSize = default(int?), string sortOn = default(string), bool? sortDesc = default(bool?), string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), int operationIndex = 0);

        /// <summary>
        /// Search Tags
        /// </summary>
        /// <remarks>
        /// TODO Item return format: &#x60;&#x60;&#x60; {     uuid                                **type:** string     project_uuid                        **type:** string or None      name                                **type:** string or None      meta                                **type:** dict or None      created_at                          **type:** string or None      updated_at                          **type:** string or None      deleted_at                          **type:** string or None  } &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 25)</param>
        /// <param name="sortOn"> (optional)</param>
        /// <param name="sortDesc"> (optional, default to false)</param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Page</returns>
        ApiResponse<Page> SearchTagsPlacesTagsGetWithHttpInfo(string projectUuid = default(string), string name = default(string), int? page = default(int?), int? pageSize = default(int?), string sortOn = default(string), bool? sortDesc = default(bool?), string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), int operationIndex = 0);
        /// <summary>
        /// Update Tag
        /// </summary>
        /// <remarks>
        /// Update tag with given info, only updating the fields supplied. Tag Uuid must be sent however.
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagUuid"></param>
        /// <param name="tagBase"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TagBase</returns>
        TagBase UpdateTagPlacesTagsTagUuidPut(string tagUuid, TagBase tagBase, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), int operationIndex = 0);

        /// <summary>
        /// Update Tag
        /// </summary>
        /// <remarks>
        /// Update tag with given info, only updating the fields supplied. Tag Uuid must be sent however.
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagUuid"></param>
        /// <param name="tagBase"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TagBase</returns>
        ApiResponse<TagBase> UpdateTagPlacesTagsTagUuidPutWithHttpInfo(string tagUuid, TagBase tagBase, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITagApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Tag
        /// </summary>
        /// <remarks>
        /// Creates a tag
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagBase"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagDb</returns>
        System.Threading.Tasks.Task<TagDb> CreateTagPlacesTagsPostAsync(TagBase tagBase, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Tag
        /// </summary>
        /// <remarks>
        /// Creates a tag
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagBase"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagDb)</returns>
        System.Threading.Tasks.Task<ApiResponse<TagDb>> CreateTagPlacesTagsPostWithHttpInfoAsync(TagBase tagBase, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Tag
        /// </summary>
        /// <remarks>
        /// Deletes the tag member with the given ID and returns True if successful
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagUuid"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteTagPlacesTagsTagUuidDeleteAsync(string tagUuid, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Tag
        /// </summary>
        /// <remarks>
        /// Deletes the tag member with the given ID and returns True if successful
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagUuid"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTagPlacesTagsTagUuidDeleteWithHttpInfoAsync(string tagUuid, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Tag
        /// </summary>
        /// <remarks>
        /// Gets the tag member information given the tag ID
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagUuid"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagBase</returns>
        System.Threading.Tasks.Task<TagBase> GetTagPlacesTagsTagUuidGetAsync(string tagUuid, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Tag
        /// </summary>
        /// <remarks>
        /// Gets the tag member information given the tag ID
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagUuid"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagBase)</returns>
        System.Threading.Tasks.Task<ApiResponse<TagBase>> GetTagPlacesTagsTagUuidGetWithHttpInfoAsync(string tagUuid, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search Tags
        /// </summary>
        /// <remarks>
        /// TODO Item return format: &#x60;&#x60;&#x60; {     uuid                                **type:** string     project_uuid                        **type:** string or None      name                                **type:** string or None      meta                                **type:** dict or None      created_at                          **type:** string or None      updated_at                          **type:** string or None      deleted_at                          **type:** string or None  } &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 25)</param>
        /// <param name="sortOn"> (optional)</param>
        /// <param name="sortDesc"> (optional, default to false)</param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Page</returns>
        System.Threading.Tasks.Task<Page> SearchTagsPlacesTagsGetAsync(string projectUuid = default(string), string name = default(string), int? page = default(int?), int? pageSize = default(int?), string sortOn = default(string), bool? sortDesc = default(bool?), string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search Tags
        /// </summary>
        /// <remarks>
        /// TODO Item return format: &#x60;&#x60;&#x60; {     uuid                                **type:** string     project_uuid                        **type:** string or None      name                                **type:** string or None      meta                                **type:** dict or None      created_at                          **type:** string or None      updated_at                          **type:** string or None      deleted_at                          **type:** string or None  } &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 25)</param>
        /// <param name="sortOn"> (optional)</param>
        /// <param name="sortDesc"> (optional, default to false)</param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Page)</returns>
        System.Threading.Tasks.Task<ApiResponse<Page>> SearchTagsPlacesTagsGetWithHttpInfoAsync(string projectUuid = default(string), string name = default(string), int? page = default(int?), int? pageSize = default(int?), string sortOn = default(string), bool? sortDesc = default(bool?), string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Tag
        /// </summary>
        /// <remarks>
        /// Update tag with given info, only updating the fields supplied. Tag Uuid must be sent however.
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagUuid"></param>
        /// <param name="tagBase"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagBase</returns>
        System.Threading.Tasks.Task<TagBase> UpdateTagPlacesTagsTagUuidPutAsync(string tagUuid, TagBase tagBase, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Tag
        /// </summary>
        /// <remarks>
        /// Update tag with given info, only updating the fields supplied. Tag Uuid must be sent however.
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagUuid"></param>
        /// <param name="tagBase"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagBase)</returns>
        System.Threading.Tasks.Task<ApiResponse<TagBase>> UpdateTagPlacesTagsTagUuidPutWithHttpInfoAsync(string tagUuid, TagBase tagBase, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITagApi : ITagApiSync, ITagApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TagApi : ITagApi
    {
        private Ehelply.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TagApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TagApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TagApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TagApi(string basePath)
        {
            this.Configuration = Ehelply.Sdk.Client.Configuration.MergeConfigurations(
                Ehelply.Sdk.Client.GlobalConfiguration.Instance,
                new Ehelply.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Ehelply.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Ehelply.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Ehelply.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TagApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TagApi(Ehelply.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Ehelply.Sdk.Client.Configuration.MergeConfigurations(
                Ehelply.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Ehelply.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Ehelply.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Ehelply.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TagApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TagApi(Ehelply.Sdk.Client.ISynchronousClient client, Ehelply.Sdk.Client.IAsynchronousClient asyncClient, Ehelply.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Ehelply.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Ehelply.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Ehelply.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Ehelply.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Ehelply.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Tag Creates a tag
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagBase"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TagDb</returns>
        public TagDb CreateTagPlacesTagsPost(TagBase tagBase, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), int operationIndex = 0)
        {
            Ehelply.Sdk.Client.ApiResponse<TagDb> localVarResponse = CreateTagPlacesTagsPostWithHttpInfo(tagBase, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Tag Creates a tag
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagBase"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TagDb</returns>
        public Ehelply.Sdk.Client.ApiResponse<TagDb> CreateTagPlacesTagsPostWithHttpInfo(TagBase tagBase, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'tagBase' is set
            if (tagBase == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'tagBase' when calling TagApi->CreateTagPlacesTagsPost");
            }

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }
            localVarRequestOptions.Data = tagBase;

            localVarRequestOptions.Operation = "TagApi.CreateTagPlacesTagsPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TagDb>("/places/tags", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTagPlacesTagsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Tag Creates a tag
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagBase"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagDb</returns>
        public async System.Threading.Tasks.Task<TagDb> CreateTagPlacesTagsPostAsync(TagBase tagBase, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<TagDb> localVarResponse = await CreateTagPlacesTagsPostWithHttpInfoAsync(tagBase, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Tag Creates a tag
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagBase"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagDb)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<TagDb>> CreateTagPlacesTagsPostWithHttpInfoAsync(TagBase tagBase, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tagBase' is set
            if (tagBase == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'tagBase' when calling TagApi->CreateTagPlacesTagsPost");
            }


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }
            localVarRequestOptions.Data = tagBase;

            localVarRequestOptions.Operation = "TagApi.CreateTagPlacesTagsPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TagDb>("/places/tags", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTagPlacesTagsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Tag Deletes the tag member with the given ID and returns True if successful
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagUuid"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object DeleteTagPlacesTagsTagUuidDelete(string tagUuid, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), int operationIndex = 0)
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = DeleteTagPlacesTagsTagUuidDeleteWithHttpInfo(tagUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Tag Deletes the tag member with the given ID and returns True if successful
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagUuid"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Ehelply.Sdk.Client.ApiResponse<Object> DeleteTagPlacesTagsTagUuidDeleteWithHttpInfo(string tagUuid, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'tagUuid' is set
            if (tagUuid == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'tagUuid' when calling TagApi->DeleteTagPlacesTagsTagUuidDelete");
            }

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tag_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(tagUuid)); // path parameter
            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }

            localVarRequestOptions.Operation = "TagApi.DeleteTagPlacesTagsTagUuidDelete";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/places/tags/{tag_uuid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTagPlacesTagsTagUuidDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Tag Deletes the tag member with the given ID and returns True if successful
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagUuid"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteTagPlacesTagsTagUuidDeleteAsync(string tagUuid, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = await DeleteTagPlacesTagsTagUuidDeleteWithHttpInfoAsync(tagUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Tag Deletes the tag member with the given ID and returns True if successful
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagUuid"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<Object>> DeleteTagPlacesTagsTagUuidDeleteWithHttpInfoAsync(string tagUuid, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tagUuid' is set
            if (tagUuid == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'tagUuid' when calling TagApi->DeleteTagPlacesTagsTagUuidDelete");
            }


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tag_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(tagUuid)); // path parameter
            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }

            localVarRequestOptions.Operation = "TagApi.DeleteTagPlacesTagsTagUuidDelete";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/places/tags/{tag_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTagPlacesTagsTagUuidDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Tag Gets the tag member information given the tag ID
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagUuid"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TagBase</returns>
        public TagBase GetTagPlacesTagsTagUuidGet(string tagUuid, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), int operationIndex = 0)
        {
            Ehelply.Sdk.Client.ApiResponse<TagBase> localVarResponse = GetTagPlacesTagsTagUuidGetWithHttpInfo(tagUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Tag Gets the tag member information given the tag ID
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagUuid"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TagBase</returns>
        public Ehelply.Sdk.Client.ApiResponse<TagBase> GetTagPlacesTagsTagUuidGetWithHttpInfo(string tagUuid, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'tagUuid' is set
            if (tagUuid == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'tagUuid' when calling TagApi->GetTagPlacesTagsTagUuidGet");
            }

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tag_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(tagUuid)); // path parameter
            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }

            localVarRequestOptions.Operation = "TagApi.GetTagPlacesTagsTagUuidGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<TagBase>("/places/tags/{tag_uuid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTagPlacesTagsTagUuidGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Tag Gets the tag member information given the tag ID
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagUuid"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagBase</returns>
        public async System.Threading.Tasks.Task<TagBase> GetTagPlacesTagsTagUuidGetAsync(string tagUuid, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<TagBase> localVarResponse = await GetTagPlacesTagsTagUuidGetWithHttpInfoAsync(tagUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Tag Gets the tag member information given the tag ID
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagUuid"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagBase)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<TagBase>> GetTagPlacesTagsTagUuidGetWithHttpInfoAsync(string tagUuid, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tagUuid' is set
            if (tagUuid == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'tagUuid' when calling TagApi->GetTagPlacesTagsTagUuidGet");
            }


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tag_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(tagUuid)); // path parameter
            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }

            localVarRequestOptions.Operation = "TagApi.GetTagPlacesTagsTagUuidGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TagBase>("/places/tags/{tag_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTagPlacesTagsTagUuidGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Tags TODO Item return format: &#x60;&#x60;&#x60; {     uuid                                **type:** string     project_uuid                        **type:** string or None      name                                **type:** string or None      meta                                **type:** dict or None      created_at                          **type:** string or None      updated_at                          **type:** string or None      deleted_at                          **type:** string or None  } &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 25)</param>
        /// <param name="sortOn"> (optional)</param>
        /// <param name="sortDesc"> (optional, default to false)</param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Page</returns>
        public Page SearchTagsPlacesTagsGet(string projectUuid = default(string), string name = default(string), int? page = default(int?), int? pageSize = default(int?), string sortOn = default(string), bool? sortDesc = default(bool?), string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), int operationIndex = 0)
        {
            Ehelply.Sdk.Client.ApiResponse<Page> localVarResponse = SearchTagsPlacesTagsGetWithHttpInfo(projectUuid, name, page, pageSize, sortOn, sortDesc, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Tags TODO Item return format: &#x60;&#x60;&#x60; {     uuid                                **type:** string     project_uuid                        **type:** string or None      name                                **type:** string or None      meta                                **type:** dict or None      created_at                          **type:** string or None      updated_at                          **type:** string or None      deleted_at                          **type:** string or None  } &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 25)</param>
        /// <param name="sortOn"> (optional)</param>
        /// <param name="sortDesc"> (optional, default to false)</param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Page</returns>
        public Ehelply.Sdk.Client.ApiResponse<Page> SearchTagsPlacesTagsGetWithHttpInfo(string projectUuid = default(string), string name = default(string), int? page = default(int?), int? pageSize = default(int?), string sortOn = default(string), bool? sortDesc = default(bool?), string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), int operationIndex = 0)
        {
            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (projectUuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "project_uuid", projectUuid));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (sortOn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort_on", sortOn));
            }
            if (sortDesc != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort_desc", sortDesc));
            }
            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }

            localVarRequestOptions.Operation = "TagApi.SearchTagsPlacesTagsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Page>("/places/tags", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchTagsPlacesTagsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Tags TODO Item return format: &#x60;&#x60;&#x60; {     uuid                                **type:** string     project_uuid                        **type:** string or None      name                                **type:** string or None      meta                                **type:** dict or None      created_at                          **type:** string or None      updated_at                          **type:** string or None      deleted_at                          **type:** string or None  } &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 25)</param>
        /// <param name="sortOn"> (optional)</param>
        /// <param name="sortDesc"> (optional, default to false)</param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Page</returns>
        public async System.Threading.Tasks.Task<Page> SearchTagsPlacesTagsGetAsync(string projectUuid = default(string), string name = default(string), int? page = default(int?), int? pageSize = default(int?), string sortOn = default(string), bool? sortDesc = default(bool?), string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<Page> localVarResponse = await SearchTagsPlacesTagsGetWithHttpInfoAsync(projectUuid, name, page, pageSize, sortOn, sortDesc, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Tags TODO Item return format: &#x60;&#x60;&#x60; {     uuid                                **type:** string     project_uuid                        **type:** string or None      name                                **type:** string or None      meta                                **type:** dict or None      created_at                          **type:** string or None      updated_at                          **type:** string or None      deleted_at                          **type:** string or None  } &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectUuid"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 25)</param>
        /// <param name="sortOn"> (optional)</param>
        /// <param name="sortDesc"> (optional, default to false)</param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Page)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<Page>> SearchTagsPlacesTagsGetWithHttpInfoAsync(string projectUuid = default(string), string name = default(string), int? page = default(int?), int? pageSize = default(int?), string sortOn = default(string), bool? sortDesc = default(bool?), string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (projectUuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "project_uuid", projectUuid));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (sortOn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort_on", sortOn));
            }
            if (sortDesc != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort_desc", sortDesc));
            }
            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }

            localVarRequestOptions.Operation = "TagApi.SearchTagsPlacesTagsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Page>("/places/tags", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchTagsPlacesTagsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Tag Update tag with given info, only updating the fields supplied. Tag Uuid must be sent however.
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagUuid"></param>
        /// <param name="tagBase"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TagBase</returns>
        public TagBase UpdateTagPlacesTagsTagUuidPut(string tagUuid, TagBase tagBase, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), int operationIndex = 0)
        {
            Ehelply.Sdk.Client.ApiResponse<TagBase> localVarResponse = UpdateTagPlacesTagsTagUuidPutWithHttpInfo(tagUuid, tagBase, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Tag Update tag with given info, only updating the fields supplied. Tag Uuid must be sent however.
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagUuid"></param>
        /// <param name="tagBase"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TagBase</returns>
        public Ehelply.Sdk.Client.ApiResponse<TagBase> UpdateTagPlacesTagsTagUuidPutWithHttpInfo(string tagUuid, TagBase tagBase, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'tagUuid' is set
            if (tagUuid == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'tagUuid' when calling TagApi->UpdateTagPlacesTagsTagUuidPut");
            }

            // verify the required parameter 'tagBase' is set
            if (tagBase == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'tagBase' when calling TagApi->UpdateTagPlacesTagsTagUuidPut");
            }

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tag_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(tagUuid)); // path parameter
            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }
            localVarRequestOptions.Data = tagBase;

            localVarRequestOptions.Operation = "TagApi.UpdateTagPlacesTagsTagUuidPut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<TagBase>("/places/tags/{tag_uuid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTagPlacesTagsTagUuidPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Tag Update tag with given info, only updating the fields supplied. Tag Uuid must be sent however.
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagUuid"></param>
        /// <param name="tagBase"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TagBase</returns>
        public async System.Threading.Tasks.Task<TagBase> UpdateTagPlacesTagsTagUuidPutAsync(string tagUuid, TagBase tagBase, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<TagBase> localVarResponse = await UpdateTagPlacesTagsTagUuidPutWithHttpInfoAsync(tagUuid, tagBase, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Tag Update tag with given info, only updating the fields supplied. Tag Uuid must be sent however.
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagUuid"></param>
        /// <param name="tagBase"></param>
        /// <param name="xAccessToken"> (optional)</param>
        /// <param name="xSecretToken"> (optional)</param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="ehelplyActiveParticipant"> (optional)</param>
        /// <param name="ehelplyProject"> (optional)</param>
        /// <param name="ehelplyData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TagBase)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<TagBase>> UpdateTagPlacesTagsTagUuidPutWithHttpInfoAsync(string tagUuid, TagBase tagBase, string xAccessToken = default(string), string xSecretToken = default(string), string authorization = default(string), string ehelplyActiveParticipant = default(string), string ehelplyProject = default(string), string ehelplyData = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tagUuid' is set
            if (tagUuid == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'tagUuid' when calling TagApi->UpdateTagPlacesTagsTagUuidPut");
            }

            // verify the required parameter 'tagBase' is set
            if (tagBase == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'tagBase' when calling TagApi->UpdateTagPlacesTagsTagUuidPut");
            }


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tag_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(tagUuid)); // path parameter
            if (xAccessToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-access-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xAccessToken)); // header parameter
            }
            if (xSecretToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-secret-token", Ehelply.Sdk.Client.ClientUtils.ParameterToString(xSecretToken)); // header parameter
            }
            if (authorization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("authorization", Ehelply.Sdk.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            }
            if (ehelplyActiveParticipant != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-active-participant", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyActiveParticipant)); // header parameter
            }
            if (ehelplyProject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-project", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyProject)); // header parameter
            }
            if (ehelplyData != null)
            {
                localVarRequestOptions.HeaderParameters.Add("ehelply-data", Ehelply.Sdk.Client.ClientUtils.ParameterToString(ehelplyData)); // header parameter
            }
            localVarRequestOptions.Data = tagBase;

            localVarRequestOptions.Operation = "TagApi.UpdateTagPlacesTagsTagUuidPut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<TagBase>("/places/tags/{tag_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTagPlacesTagsTagUuidPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
