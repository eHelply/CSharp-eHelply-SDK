/*
 * eHelply SDK - 1.1.57
 *
 * eHelply SDK for SuperStack Services
 *
 * The version of the OpenAPI document: 1.1.57
 * Contact: support@ehelply.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Ehelply.Sdk.Client;
using Ehelply.Sdk.Model;

namespace Ehelply.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMonitorApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Ack Alarm
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="bodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost"></param>
        /// <returns>Object</returns>
        Object AckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost(string service, string stage, string alarmUuid, BodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost bodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost);

        /// <summary>
        /// Ack Alarm
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="bodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePostWithHttpInfo(string service, string stage, string alarmUuid, BodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost bodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost);
        /// <summary>
        /// Assign Alarm
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="bodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost"></param>
        /// <returns>Object</returns>
        Object AssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost(string service, string stage, string alarmUuid, BodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost bodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost);

        /// <summary>
        /// Assign Alarm
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="bodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPostWithHttpInfo(string service, string stage, string alarmUuid, BodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost bodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost);
        /// <summary>
        /// Attach Alarm Note
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="bodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost"></param>
        /// <returns>Object</returns>
        Object AttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost(string service, string stage, string alarmUuid, BodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost bodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost);

        /// <summary>
        /// Attach Alarm Note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="bodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePostWithHttpInfo(string service, string stage, string alarmUuid, BodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost bodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost);
        /// <summary>
        /// Attach Alarm Ticket
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="bodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost"></param>
        /// <returns>Object</returns>
        Object AttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost(string service, string stage, string alarmUuid, BodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost bodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost);

        /// <summary>
        /// Attach Alarm Ticket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="bodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPostWithHttpInfo(string service, string stage, string alarmUuid, BodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost bodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost);
        /// <summary>
        /// Clear Alarm
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <returns>Object</returns>
        Object ClearAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidClearPost(string service, string stage, string alarmUuid);

        /// <summary>
        /// Clear Alarm
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ClearAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidClearPostWithHttpInfo(string service, string stage, string alarmUuid);
        /// <summary>
        /// Get Service Alarm
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <returns>Object</returns>
        Object GetServiceAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidGet(string service, string stage, string alarmUuid);

        /// <summary>
        /// Get Service Alarm
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetServiceAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidGetWithHttpInfo(string service, string stage, string alarmUuid);
        /// <summary>
        /// Get Service Alarms
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <param name="includeTerminated"> (optional, default to false)</param>
        /// <param name="includeCleared"> (optional, default to false)</param>
        /// <returns>Object</returns>
        Object GetServiceAlarmsMonitorServicesServiceStagesStageAlarmsGet(string service, string stage, int? history = default(int?), bool? includeTerminated = default(bool?), bool? includeCleared = default(bool?));

        /// <summary>
        /// Get Service Alarms
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <param name="includeTerminated"> (optional, default to false)</param>
        /// <param name="includeCleared"> (optional, default to false)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetServiceAlarmsMonitorServicesServiceStagesStageAlarmsGetWithHttpInfo(string service, string stage, int? history = default(int?), bool? includeTerminated = default(bool?), bool? includeCleared = default(bool?));
        /// <summary>
        /// Get Service Heartbeats
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <returns>Object</returns>
        Object GetServiceHeartbeatsMonitorServicesServiceStagesStageHeartbeatsGet(string service, string stage, int? history = default(int?));

        /// <summary>
        /// Get Service Heartbeats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetServiceHeartbeatsMonitorServicesServiceStagesStageHeartbeatsGetWithHttpInfo(string service, string stage, int? history = default(int?));
        /// <summary>
        /// Get Service Kpis
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <returns>Object</returns>
        Object GetServiceKpisMonitorServicesServiceKpisGet(string service, int? history = default(int?));

        /// <summary>
        /// Get Service Kpis
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetServiceKpisMonitorServicesServiceKpisGetWithHttpInfo(string service, int? history = default(int?));
        /// <summary>
        /// Get Service
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="heartbeats"> (optional, default to false)</param>
        /// <param name="heartbeatLimit"> (optional, default to 5)</param>
        /// <param name="alarms"> (optional, default to false)</param>
        /// <param name="alarmLimit"> (optional, default to 5)</param>
        /// <param name="stage"> (optional)</param>
        /// <returns>Object</returns>
        Object GetServiceMonitorServicesServiceGet(string service, bool? heartbeats = default(bool?), int? heartbeatLimit = default(int?), bool? alarms = default(bool?), int? alarmLimit = default(int?), string stage = default(string));

        /// <summary>
        /// Get Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="heartbeats"> (optional, default to false)</param>
        /// <param name="heartbeatLimit"> (optional, default to 5)</param>
        /// <param name="alarms"> (optional, default to false)</param>
        /// <param name="alarmLimit"> (optional, default to 5)</param>
        /// <param name="stage"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetServiceMonitorServicesServiceGetWithHttpInfo(string service, bool? heartbeats = default(bool?), int? heartbeatLimit = default(int?), bool? alarms = default(bool?), int? alarmLimit = default(int?), string stage = default(string));
        /// <summary>
        /// Getservicespec
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="spec"></param>
        /// <param name="asJson"> (optional, default to false)</param>
        /// <returns>Object</returns>
        Object GetServiceSpec(string service, string spec, bool? asJson = default(bool?));

        /// <summary>
        /// Getservicespec
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="spec"></param>
        /// <param name="asJson"> (optional, default to false)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetServiceSpecWithHttpInfo(string service, string spec, bool? asJson = default(bool?));
        /// <summary>
        /// Getservicespecs
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <returns>Object</returns>
        Object GetServiceSpecs(string service);

        /// <summary>
        /// Getservicespecs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetServiceSpecsWithHttpInfo(string service);
        /// <summary>
        /// Get Service Vitals
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <returns>Object</returns>
        Object GetServiceVitalsMonitorServicesServiceStagesStageVitalsGet(string service, string stage, int? history = default(int?));

        /// <summary>
        /// Get Service Vitals
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetServiceVitalsMonitorServicesServiceStagesStageVitalsGetWithHttpInfo(string service, string stage, int? history = default(int?));
        /// <summary>
        /// Get Services
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="heartbeats"> (optional, default to false)</param>
        /// <param name="heartbeatLimit"> (optional, default to 5)</param>
        /// <param name="alarms"> (optional, default to false)</param>
        /// <param name="alarmLimit"> (optional, default to 5)</param>
        /// <param name="includeHidden"> (optional, default to false)</param>
        /// <param name="stage"> (optional)</param>
        /// <param name="key"> (optional)</param>
        /// <returns>Object</returns>
        Object GetServicesMonitorServicesGet(bool? heartbeats = default(bool?), int? heartbeatLimit = default(int?), bool? alarms = default(bool?), int? alarmLimit = default(int?), bool? includeHidden = default(bool?), string stage = default(string), string key = default(string));

        /// <summary>
        /// Get Services
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="heartbeats"> (optional, default to false)</param>
        /// <param name="heartbeatLimit"> (optional, default to 5)</param>
        /// <param name="alarms"> (optional, default to false)</param>
        /// <param name="alarmLimit"> (optional, default to 5)</param>
        /// <param name="includeHidden"> (optional, default to false)</param>
        /// <param name="stage"> (optional)</param>
        /// <param name="key"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetServicesMonitorServicesGetWithHttpInfo(bool? heartbeats = default(bool?), int? heartbeatLimit = default(int?), bool? alarms = default(bool?), int? alarmLimit = default(int?), bool? includeHidden = default(bool?), string stage = default(string), string key = default(string));
        /// <summary>
        /// Getserviceswithspecs
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        Object GetServicesWithSpecs();

        /// <summary>
        /// Getserviceswithspecs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetServicesWithSpecsWithHttpInfo();
        /// <summary>
        /// Hide Service
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <returns>Object</returns>
        Object HideServiceMonitorServicesServiceStagesStageHidePost(string service, string stage);

        /// <summary>
        /// Hide Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> HideServiceMonitorServicesServiceStagesStageHidePostWithHttpInfo(string service, string stage);
        /// <summary>
        /// Ignore Alarm
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="bodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost"></param>
        /// <returns>Object</returns>
        Object IgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost(string service, string stage, string alarmUuid, BodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost bodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost);

        /// <summary>
        /// Ignore Alarm
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="bodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> IgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePostWithHttpInfo(string service, string stage, string alarmUuid, BodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost bodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost);
        /// <summary>
        /// Register Service
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyRegisterServiceMonitorServicesPost"></param>
        /// <returns>Object</returns>
        Object RegisterServiceMonitorServicesPost(BodyRegisterServiceMonitorServicesPost bodyRegisterServiceMonitorServicesPost);

        /// <summary>
        /// Register Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyRegisterServiceMonitorServicesPost"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> RegisterServiceMonitorServicesPostWithHttpInfo(BodyRegisterServiceMonitorServicesPost bodyRegisterServiceMonitorServicesPost);
        /// <summary>
        /// Search Alarms
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 25)</param>
        /// <param name="search"> (optional)</param>
        /// <param name="searchOn"> (optional)</param>
        /// <param name="sortOn"> (optional)</param>
        /// <param name="sortDesc"> (optional, default to false)</param>
        /// <returns>Object</returns>
        Object SearchAlarmsMonitorServicesServiceAlarmsGet(string service, int? page = default(int?), int? pageSize = default(int?), string search = default(string), string searchOn = default(string), string sortOn = default(string), bool? sortDesc = default(bool?));

        /// <summary>
        /// Search Alarms
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 25)</param>
        /// <param name="search"> (optional)</param>
        /// <param name="searchOn"> (optional)</param>
        /// <param name="sortOn"> (optional)</param>
        /// <param name="sortDesc"> (optional, default to false)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SearchAlarmsMonitorServicesServiceAlarmsGetWithHttpInfo(string service, int? page = default(int?), int? pageSize = default(int?), string search = default(string), string searchOn = default(string), string sortOn = default(string), bool? sortDesc = default(bool?));
        /// <summary>
        /// Show Service
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <returns>Object</returns>
        Object ShowServiceMonitorServicesServiceStagesStageShowPost(string service, string stage);

        /// <summary>
        /// Show Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ShowServiceMonitorServicesServiceStagesStageShowPostWithHttpInfo(string service, string stage);
        /// <summary>
        /// Terminate Alarm
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="bodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost"></param>
        /// <returns>Object</returns>
        Object TerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost(string service, string stage, string alarmUuid, BodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost bodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost);

        /// <summary>
        /// Terminate Alarm
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="bodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> TerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePostWithHttpInfo(string service, string stage, string alarmUuid, BodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost bodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost);
        /// <summary>
        /// Trigger Alarm
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="bodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost"></param>
        /// <returns>Object</returns>
        Object TriggerAlarmMonitorServicesServiceStagesStageAlarmsPost(string service, string stage, BodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost bodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost);

        /// <summary>
        /// Trigger Alarm
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="bodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> TriggerAlarmMonitorServicesServiceStagesStageAlarmsPostWithHttpInfo(string service, string stage, BodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost bodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMonitorApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Ack Alarm
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="bodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePostAsync(string service, string stage, string alarmUuid, BodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost bodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Ack Alarm
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="bodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePostWithHttpInfoAsync(string service, string stage, string alarmUuid, BodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost bodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Assign Alarm
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="bodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPostAsync(string service, string stage, string alarmUuid, BodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost bodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Assign Alarm
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="bodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPostWithHttpInfoAsync(string service, string stage, string alarmUuid, BodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost bodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Attach Alarm Note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="bodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePostAsync(string service, string stage, string alarmUuid, BodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost bodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Attach Alarm Note
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="bodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePostWithHttpInfoAsync(string service, string stage, string alarmUuid, BodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost bodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Attach Alarm Ticket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="bodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPostAsync(string service, string stage, string alarmUuid, BodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost bodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Attach Alarm Ticket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="bodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPostWithHttpInfoAsync(string service, string stage, string alarmUuid, BodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost bodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Clear Alarm
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ClearAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidClearPostAsync(string service, string stage, string alarmUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Clear Alarm
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClearAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidClearPostWithHttpInfoAsync(string service, string stage, string alarmUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Service Alarm
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetServiceAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidGetAsync(string service, string stage, string alarmUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Service Alarm
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetServiceAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidGetWithHttpInfoAsync(string service, string stage, string alarmUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Service Alarms
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <param name="includeTerminated"> (optional, default to false)</param>
        /// <param name="includeCleared"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetServiceAlarmsMonitorServicesServiceStagesStageAlarmsGetAsync(string service, string stage, int? history = default(int?), bool? includeTerminated = default(bool?), bool? includeCleared = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Service Alarms
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <param name="includeTerminated"> (optional, default to false)</param>
        /// <param name="includeCleared"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetServiceAlarmsMonitorServicesServiceStagesStageAlarmsGetWithHttpInfoAsync(string service, string stage, int? history = default(int?), bool? includeTerminated = default(bool?), bool? includeCleared = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Service Heartbeats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetServiceHeartbeatsMonitorServicesServiceStagesStageHeartbeatsGetAsync(string service, string stage, int? history = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Service Heartbeats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetServiceHeartbeatsMonitorServicesServiceStagesStageHeartbeatsGetWithHttpInfoAsync(string service, string stage, int? history = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Service Kpis
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetServiceKpisMonitorServicesServiceKpisGetAsync(string service, int? history = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Service Kpis
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetServiceKpisMonitorServicesServiceKpisGetWithHttpInfoAsync(string service, int? history = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="heartbeats"> (optional, default to false)</param>
        /// <param name="heartbeatLimit"> (optional, default to 5)</param>
        /// <param name="alarms"> (optional, default to false)</param>
        /// <param name="alarmLimit"> (optional, default to 5)</param>
        /// <param name="stage"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetServiceMonitorServicesServiceGetAsync(string service, bool? heartbeats = default(bool?), int? heartbeatLimit = default(int?), bool? alarms = default(bool?), int? alarmLimit = default(int?), string stage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="heartbeats"> (optional, default to false)</param>
        /// <param name="heartbeatLimit"> (optional, default to 5)</param>
        /// <param name="alarms"> (optional, default to false)</param>
        /// <param name="alarmLimit"> (optional, default to 5)</param>
        /// <param name="stage"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetServiceMonitorServicesServiceGetWithHttpInfoAsync(string service, bool? heartbeats = default(bool?), int? heartbeatLimit = default(int?), bool? alarms = default(bool?), int? alarmLimit = default(int?), string stage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Getservicespec
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="spec"></param>
        /// <param name="asJson"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetServiceSpecAsync(string service, string spec, bool? asJson = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Getservicespec
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="spec"></param>
        /// <param name="asJson"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetServiceSpecWithHttpInfoAsync(string service, string spec, bool? asJson = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Getservicespecs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetServiceSpecsAsync(string service, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Getservicespecs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetServiceSpecsWithHttpInfoAsync(string service, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Service Vitals
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetServiceVitalsMonitorServicesServiceStagesStageVitalsGetAsync(string service, string stage, int? history = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Service Vitals
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetServiceVitalsMonitorServicesServiceStagesStageVitalsGetWithHttpInfoAsync(string service, string stage, int? history = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Services
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="heartbeats"> (optional, default to false)</param>
        /// <param name="heartbeatLimit"> (optional, default to 5)</param>
        /// <param name="alarms"> (optional, default to false)</param>
        /// <param name="alarmLimit"> (optional, default to 5)</param>
        /// <param name="includeHidden"> (optional, default to false)</param>
        /// <param name="stage"> (optional)</param>
        /// <param name="key"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetServicesMonitorServicesGetAsync(bool? heartbeats = default(bool?), int? heartbeatLimit = default(int?), bool? alarms = default(bool?), int? alarmLimit = default(int?), bool? includeHidden = default(bool?), string stage = default(string), string key = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Services
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="heartbeats"> (optional, default to false)</param>
        /// <param name="heartbeatLimit"> (optional, default to 5)</param>
        /// <param name="alarms"> (optional, default to false)</param>
        /// <param name="alarmLimit"> (optional, default to 5)</param>
        /// <param name="includeHidden"> (optional, default to false)</param>
        /// <param name="stage"> (optional)</param>
        /// <param name="key"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetServicesMonitorServicesGetWithHttpInfoAsync(bool? heartbeats = default(bool?), int? heartbeatLimit = default(int?), bool? alarms = default(bool?), int? alarmLimit = default(int?), bool? includeHidden = default(bool?), string stage = default(string), string key = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Getserviceswithspecs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetServicesWithSpecsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Getserviceswithspecs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetServicesWithSpecsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Hide Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> HideServiceMonitorServicesServiceStagesStageHidePostAsync(string service, string stage, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Hide Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> HideServiceMonitorServicesServiceStagesStageHidePostWithHttpInfoAsync(string service, string stage, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Ignore Alarm
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="bodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> IgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePostAsync(string service, string stage, string alarmUuid, BodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost bodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Ignore Alarm
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="bodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> IgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePostWithHttpInfoAsync(string service, string stage, string alarmUuid, BodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost bodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Register Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyRegisterServiceMonitorServicesPost"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> RegisterServiceMonitorServicesPostAsync(BodyRegisterServiceMonitorServicesPost bodyRegisterServiceMonitorServicesPost, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Register Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyRegisterServiceMonitorServicesPost"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RegisterServiceMonitorServicesPostWithHttpInfoAsync(BodyRegisterServiceMonitorServicesPost bodyRegisterServiceMonitorServicesPost, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search Alarms
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 25)</param>
        /// <param name="search"> (optional)</param>
        /// <param name="searchOn"> (optional)</param>
        /// <param name="sortOn"> (optional)</param>
        /// <param name="sortDesc"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SearchAlarmsMonitorServicesServiceAlarmsGetAsync(string service, int? page = default(int?), int? pageSize = default(int?), string search = default(string), string searchOn = default(string), string sortOn = default(string), bool? sortDesc = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search Alarms
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 25)</param>
        /// <param name="search"> (optional)</param>
        /// <param name="searchOn"> (optional)</param>
        /// <param name="sortOn"> (optional)</param>
        /// <param name="sortDesc"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SearchAlarmsMonitorServicesServiceAlarmsGetWithHttpInfoAsync(string service, int? page = default(int?), int? pageSize = default(int?), string search = default(string), string searchOn = default(string), string sortOn = default(string), bool? sortDesc = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Show Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ShowServiceMonitorServicesServiceStagesStageShowPostAsync(string service, string stage, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Show Service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ShowServiceMonitorServicesServiceStagesStageShowPostWithHttpInfoAsync(string service, string stage, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Terminate Alarm
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="bodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> TerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePostAsync(string service, string stage, string alarmUuid, BodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost bodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Terminate Alarm
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="bodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePostWithHttpInfoAsync(string service, string stage, string alarmUuid, BodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost bodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Trigger Alarm
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="bodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> TriggerAlarmMonitorServicesServiceStagesStageAlarmsPostAsync(string service, string stage, BodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost bodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Trigger Alarm
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="bodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TriggerAlarmMonitorServicesServiceStagesStageAlarmsPostWithHttpInfoAsync(string service, string stage, BodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost bodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMonitorApi : IMonitorApiSync, IMonitorApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MonitorApi : IMonitorApi
    {
        private Ehelply.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MonitorApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MonitorApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MonitorApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MonitorApi(string basePath)
        {
            this.Configuration = Ehelply.Sdk.Client.Configuration.MergeConfigurations(
                Ehelply.Sdk.Client.GlobalConfiguration.Instance,
                new Ehelply.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Ehelply.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Ehelply.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Ehelply.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MonitorApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MonitorApi(Ehelply.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Ehelply.Sdk.Client.Configuration.MergeConfigurations(
                Ehelply.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Ehelply.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Ehelply.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Ehelply.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MonitorApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MonitorApi(Ehelply.Sdk.Client.ISynchronousClient client, Ehelply.Sdk.Client.IAsynchronousClient asyncClient, Ehelply.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Ehelply.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Ehelply.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Ehelply.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Ehelply.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Ehelply.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Ack Alarm 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="bodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost"></param>
        /// <returns>Object</returns>
        public Object AckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost(string service, string stage, string alarmUuid, BodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost bodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost)
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = AckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePostWithHttpInfo(service, stage, alarmUuid, bodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Ack Alarm 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="bodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost"></param>
        /// <returns>ApiResponse of Object</returns>
        public Ehelply.Sdk.Client.ApiResponse<Object> AckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePostWithHttpInfo(string service, string stage, string alarmUuid, BodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost bodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost)
        {
            // verify the required parameter 'service' is set
            if (service == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->AckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost");

            // verify the required parameter 'stage' is set
            if (stage == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'stage' when calling MonitorApi->AckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost");

            // verify the required parameter 'alarmUuid' is set
            if (alarmUuid == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'alarmUuid' when calling MonitorApi->AckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost");

            // verify the required parameter 'bodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost' is set
            if (bodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'bodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost' when calling MonitorApi->AckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost");

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("stage", Ehelply.Sdk.Client.ClientUtils.ParameterToString(stage)); // path parameter
            localVarRequestOptions.PathParameters.Add("alarm_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(alarmUuid)); // path parameter
            localVarRequestOptions.Data = bodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}/acknowledge", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Ack Alarm 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="bodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePostAsync(string service, string stage, string alarmUuid, BodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost bodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = await AckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePostWithHttpInfoAsync(service, stage, alarmUuid, bodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Ack Alarm 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="bodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<Object>> AckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePostWithHttpInfoAsync(string service, string stage, string alarmUuid, BodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost bodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'service' is set
            if (service == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->AckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost");

            // verify the required parameter 'stage' is set
            if (stage == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'stage' when calling MonitorApi->AckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost");

            // verify the required parameter 'alarmUuid' is set
            if (alarmUuid == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'alarmUuid' when calling MonitorApi->AckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost");

            // verify the required parameter 'bodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost' is set
            if (bodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'bodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost' when calling MonitorApi->AckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost");


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("stage", Ehelply.Sdk.Client.ClientUtils.ParameterToString(stage)); // path parameter
            localVarRequestOptions.PathParameters.Add("alarm_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(alarmUuid)); // path parameter
            localVarRequestOptions.Data = bodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}/acknowledge", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assign Alarm 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="bodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost"></param>
        /// <returns>Object</returns>
        public Object AssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost(string service, string stage, string alarmUuid, BodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost bodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost)
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = AssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPostWithHttpInfo(service, stage, alarmUuid, bodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Assign Alarm 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="bodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost"></param>
        /// <returns>ApiResponse of Object</returns>
        public Ehelply.Sdk.Client.ApiResponse<Object> AssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPostWithHttpInfo(string service, string stage, string alarmUuid, BodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost bodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost)
        {
            // verify the required parameter 'service' is set
            if (service == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->AssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost");

            // verify the required parameter 'stage' is set
            if (stage == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'stage' when calling MonitorApi->AssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost");

            // verify the required parameter 'alarmUuid' is set
            if (alarmUuid == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'alarmUuid' when calling MonitorApi->AssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost");

            // verify the required parameter 'bodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost' is set
            if (bodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'bodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost' when calling MonitorApi->AssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost");

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("stage", Ehelply.Sdk.Client.ClientUtils.ParameterToString(stage)); // path parameter
            localVarRequestOptions.PathParameters.Add("alarm_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(alarmUuid)); // path parameter
            localVarRequestOptions.Data = bodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}/assign", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assign Alarm 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="bodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPostAsync(string service, string stage, string alarmUuid, BodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost bodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = await AssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPostWithHttpInfoAsync(service, stage, alarmUuid, bodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Assign Alarm 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="bodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<Object>> AssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPostWithHttpInfoAsync(string service, string stage, string alarmUuid, BodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost bodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'service' is set
            if (service == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->AssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost");

            // verify the required parameter 'stage' is set
            if (stage == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'stage' when calling MonitorApi->AssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost");

            // verify the required parameter 'alarmUuid' is set
            if (alarmUuid == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'alarmUuid' when calling MonitorApi->AssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost");

            // verify the required parameter 'bodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost' is set
            if (bodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'bodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost' when calling MonitorApi->AssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost");


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("stage", Ehelply.Sdk.Client.ClientUtils.ParameterToString(stage)); // path parameter
            localVarRequestOptions.PathParameters.Add("alarm_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(alarmUuid)); // path parameter
            localVarRequestOptions.Data = bodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}/assign", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Attach Alarm Note 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="bodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost"></param>
        /// <returns>Object</returns>
        public Object AttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost(string service, string stage, string alarmUuid, BodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost bodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost)
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = AttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePostWithHttpInfo(service, stage, alarmUuid, bodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Attach Alarm Note 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="bodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost"></param>
        /// <returns>ApiResponse of Object</returns>
        public Ehelply.Sdk.Client.ApiResponse<Object> AttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePostWithHttpInfo(string service, string stage, string alarmUuid, BodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost bodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost)
        {
            // verify the required parameter 'service' is set
            if (service == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->AttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost");

            // verify the required parameter 'stage' is set
            if (stage == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'stage' when calling MonitorApi->AttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost");

            // verify the required parameter 'alarmUuid' is set
            if (alarmUuid == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'alarmUuid' when calling MonitorApi->AttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost");

            // verify the required parameter 'bodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost' is set
            if (bodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'bodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost' when calling MonitorApi->AttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost");

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("stage", Ehelply.Sdk.Client.ClientUtils.ParameterToString(stage)); // path parameter
            localVarRequestOptions.PathParameters.Add("alarm_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(alarmUuid)); // path parameter
            localVarRequestOptions.Data = bodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}/note", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Attach Alarm Note 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="bodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePostAsync(string service, string stage, string alarmUuid, BodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost bodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = await AttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePostWithHttpInfoAsync(service, stage, alarmUuid, bodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Attach Alarm Note 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="bodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<Object>> AttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePostWithHttpInfoAsync(string service, string stage, string alarmUuid, BodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost bodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'service' is set
            if (service == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->AttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost");

            // verify the required parameter 'stage' is set
            if (stage == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'stage' when calling MonitorApi->AttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost");

            // verify the required parameter 'alarmUuid' is set
            if (alarmUuid == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'alarmUuid' when calling MonitorApi->AttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost");

            // verify the required parameter 'bodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost' is set
            if (bodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'bodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost' when calling MonitorApi->AttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost");


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("stage", Ehelply.Sdk.Client.ClientUtils.ParameterToString(stage)); // path parameter
            localVarRequestOptions.PathParameters.Add("alarm_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(alarmUuid)); // path parameter
            localVarRequestOptions.Data = bodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}/note", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Attach Alarm Ticket 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="bodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost"></param>
        /// <returns>Object</returns>
        public Object AttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost(string service, string stage, string alarmUuid, BodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost bodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost)
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = AttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPostWithHttpInfo(service, stage, alarmUuid, bodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Attach Alarm Ticket 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="bodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost"></param>
        /// <returns>ApiResponse of Object</returns>
        public Ehelply.Sdk.Client.ApiResponse<Object> AttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPostWithHttpInfo(string service, string stage, string alarmUuid, BodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost bodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost)
        {
            // verify the required parameter 'service' is set
            if (service == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->AttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost");

            // verify the required parameter 'stage' is set
            if (stage == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'stage' when calling MonitorApi->AttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost");

            // verify the required parameter 'alarmUuid' is set
            if (alarmUuid == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'alarmUuid' when calling MonitorApi->AttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost");

            // verify the required parameter 'bodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost' is set
            if (bodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'bodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost' when calling MonitorApi->AttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost");

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("stage", Ehelply.Sdk.Client.ClientUtils.ParameterToString(stage)); // path parameter
            localVarRequestOptions.PathParameters.Add("alarm_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(alarmUuid)); // path parameter
            localVarRequestOptions.Data = bodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}/ticket", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Attach Alarm Ticket 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="bodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPostAsync(string service, string stage, string alarmUuid, BodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost bodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = await AttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPostWithHttpInfoAsync(service, stage, alarmUuid, bodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Attach Alarm Ticket 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="bodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<Object>> AttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPostWithHttpInfoAsync(string service, string stage, string alarmUuid, BodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost bodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'service' is set
            if (service == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->AttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost");

            // verify the required parameter 'stage' is set
            if (stage == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'stage' when calling MonitorApi->AttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost");

            // verify the required parameter 'alarmUuid' is set
            if (alarmUuid == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'alarmUuid' when calling MonitorApi->AttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost");

            // verify the required parameter 'bodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost' is set
            if (bodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'bodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost' when calling MonitorApi->AttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost");


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("stage", Ehelply.Sdk.Client.ClientUtils.ParameterToString(stage)); // path parameter
            localVarRequestOptions.PathParameters.Add("alarm_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(alarmUuid)); // path parameter
            localVarRequestOptions.Data = bodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}/ticket", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Clear Alarm 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <returns>Object</returns>
        public Object ClearAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidClearPost(string service, string stage, string alarmUuid)
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = ClearAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidClearPostWithHttpInfo(service, stage, alarmUuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Clear Alarm 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <returns>ApiResponse of Object</returns>
        public Ehelply.Sdk.Client.ApiResponse<Object> ClearAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidClearPostWithHttpInfo(string service, string stage, string alarmUuid)
        {
            // verify the required parameter 'service' is set
            if (service == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->ClearAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidClearPost");

            // verify the required parameter 'stage' is set
            if (stage == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'stage' when calling MonitorApi->ClearAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidClearPost");

            // verify the required parameter 'alarmUuid' is set
            if (alarmUuid == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'alarmUuid' when calling MonitorApi->ClearAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidClearPost");

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("stage", Ehelply.Sdk.Client.ClientUtils.ParameterToString(stage)); // path parameter
            localVarRequestOptions.PathParameters.Add("alarm_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(alarmUuid)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}/clear", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClearAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidClearPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Clear Alarm 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ClearAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidClearPostAsync(string service, string stage, string alarmUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = await ClearAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidClearPostWithHttpInfoAsync(service, stage, alarmUuid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Clear Alarm 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<Object>> ClearAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidClearPostWithHttpInfoAsync(string service, string stage, string alarmUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'service' is set
            if (service == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->ClearAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidClearPost");

            // verify the required parameter 'stage' is set
            if (stage == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'stage' when calling MonitorApi->ClearAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidClearPost");

            // verify the required parameter 'alarmUuid' is set
            if (alarmUuid == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'alarmUuid' when calling MonitorApi->ClearAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidClearPost");


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("stage", Ehelply.Sdk.Client.ClientUtils.ParameterToString(stage)); // path parameter
            localVarRequestOptions.PathParameters.Add("alarm_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(alarmUuid)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}/clear", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClearAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidClearPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Service Alarm 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <returns>Object</returns>
        public Object GetServiceAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidGet(string service, string stage, string alarmUuid)
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = GetServiceAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidGetWithHttpInfo(service, stage, alarmUuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Service Alarm 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <returns>ApiResponse of Object</returns>
        public Ehelply.Sdk.Client.ApiResponse<Object> GetServiceAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidGetWithHttpInfo(string service, string stage, string alarmUuid)
        {
            // verify the required parameter 'service' is set
            if (service == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->GetServiceAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidGet");

            // verify the required parameter 'stage' is set
            if (stage == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'stage' when calling MonitorApi->GetServiceAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidGet");

            // verify the required parameter 'alarmUuid' is set
            if (alarmUuid == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'alarmUuid' when calling MonitorApi->GetServiceAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidGet");

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("stage", Ehelply.Sdk.Client.ClientUtils.ParameterToString(stage)); // path parameter
            localVarRequestOptions.PathParameters.Add("alarm_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(alarmUuid)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServiceAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Service Alarm 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetServiceAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidGetAsync(string service, string stage, string alarmUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = await GetServiceAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidGetWithHttpInfoAsync(service, stage, alarmUuid, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Service Alarm 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<Object>> GetServiceAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidGetWithHttpInfoAsync(string service, string stage, string alarmUuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'service' is set
            if (service == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->GetServiceAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidGet");

            // verify the required parameter 'stage' is set
            if (stage == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'stage' when calling MonitorApi->GetServiceAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidGet");

            // verify the required parameter 'alarmUuid' is set
            if (alarmUuid == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'alarmUuid' when calling MonitorApi->GetServiceAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidGet");


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("stage", Ehelply.Sdk.Client.ClientUtils.ParameterToString(stage)); // path parameter
            localVarRequestOptions.PathParameters.Add("alarm_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(alarmUuid)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServiceAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Service Alarms 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <param name="includeTerminated"> (optional, default to false)</param>
        /// <param name="includeCleared"> (optional, default to false)</param>
        /// <returns>Object</returns>
        public Object GetServiceAlarmsMonitorServicesServiceStagesStageAlarmsGet(string service, string stage, int? history = default(int?), bool? includeTerminated = default(bool?), bool? includeCleared = default(bool?))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = GetServiceAlarmsMonitorServicesServiceStagesStageAlarmsGetWithHttpInfo(service, stage, history, includeTerminated, includeCleared);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Service Alarms 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <param name="includeTerminated"> (optional, default to false)</param>
        /// <param name="includeCleared"> (optional, default to false)</param>
        /// <returns>ApiResponse of Object</returns>
        public Ehelply.Sdk.Client.ApiResponse<Object> GetServiceAlarmsMonitorServicesServiceStagesStageAlarmsGetWithHttpInfo(string service, string stage, int? history = default(int?), bool? includeTerminated = default(bool?), bool? includeCleared = default(bool?))
        {
            // verify the required parameter 'service' is set
            if (service == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->GetServiceAlarmsMonitorServicesServiceStagesStageAlarmsGet");

            // verify the required parameter 'stage' is set
            if (stage == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'stage' when calling MonitorApi->GetServiceAlarmsMonitorServicesServiceStagesStageAlarmsGet");

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("stage", Ehelply.Sdk.Client.ClientUtils.ParameterToString(stage)); // path parameter
            if (history != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "history", history));
            }
            if (includeTerminated != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "include_terminated", includeTerminated));
            }
            if (includeCleared != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "include_cleared", includeCleared));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/sam/monitor/services/{service}/stages/{stage}/alarms", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServiceAlarmsMonitorServicesServiceStagesStageAlarmsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Service Alarms 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <param name="includeTerminated"> (optional, default to false)</param>
        /// <param name="includeCleared"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetServiceAlarmsMonitorServicesServiceStagesStageAlarmsGetAsync(string service, string stage, int? history = default(int?), bool? includeTerminated = default(bool?), bool? includeCleared = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = await GetServiceAlarmsMonitorServicesServiceStagesStageAlarmsGetWithHttpInfoAsync(service, stage, history, includeTerminated, includeCleared, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Service Alarms 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <param name="includeTerminated"> (optional, default to false)</param>
        /// <param name="includeCleared"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<Object>> GetServiceAlarmsMonitorServicesServiceStagesStageAlarmsGetWithHttpInfoAsync(string service, string stage, int? history = default(int?), bool? includeTerminated = default(bool?), bool? includeCleared = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'service' is set
            if (service == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->GetServiceAlarmsMonitorServicesServiceStagesStageAlarmsGet");

            // verify the required parameter 'stage' is set
            if (stage == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'stage' when calling MonitorApi->GetServiceAlarmsMonitorServicesServiceStagesStageAlarmsGet");


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("stage", Ehelply.Sdk.Client.ClientUtils.ParameterToString(stage)); // path parameter
            if (history != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "history", history));
            }
            if (includeTerminated != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "include_terminated", includeTerminated));
            }
            if (includeCleared != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "include_cleared", includeCleared));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/sam/monitor/services/{service}/stages/{stage}/alarms", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServiceAlarmsMonitorServicesServiceStagesStageAlarmsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Service Heartbeats 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <returns>Object</returns>
        public Object GetServiceHeartbeatsMonitorServicesServiceStagesStageHeartbeatsGet(string service, string stage, int? history = default(int?))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = GetServiceHeartbeatsMonitorServicesServiceStagesStageHeartbeatsGetWithHttpInfo(service, stage, history);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Service Heartbeats 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <returns>ApiResponse of Object</returns>
        public Ehelply.Sdk.Client.ApiResponse<Object> GetServiceHeartbeatsMonitorServicesServiceStagesStageHeartbeatsGetWithHttpInfo(string service, string stage, int? history = default(int?))
        {
            // verify the required parameter 'service' is set
            if (service == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->GetServiceHeartbeatsMonitorServicesServiceStagesStageHeartbeatsGet");

            // verify the required parameter 'stage' is set
            if (stage == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'stage' when calling MonitorApi->GetServiceHeartbeatsMonitorServicesServiceStagesStageHeartbeatsGet");

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("stage", Ehelply.Sdk.Client.ClientUtils.ParameterToString(stage)); // path parameter
            if (history != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "history", history));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/sam/monitor/services/{service}/stages/{stage}/heartbeats", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServiceHeartbeatsMonitorServicesServiceStagesStageHeartbeatsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Service Heartbeats 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetServiceHeartbeatsMonitorServicesServiceStagesStageHeartbeatsGetAsync(string service, string stage, int? history = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = await GetServiceHeartbeatsMonitorServicesServiceStagesStageHeartbeatsGetWithHttpInfoAsync(service, stage, history, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Service Heartbeats 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<Object>> GetServiceHeartbeatsMonitorServicesServiceStagesStageHeartbeatsGetWithHttpInfoAsync(string service, string stage, int? history = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'service' is set
            if (service == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->GetServiceHeartbeatsMonitorServicesServiceStagesStageHeartbeatsGet");

            // verify the required parameter 'stage' is set
            if (stage == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'stage' when calling MonitorApi->GetServiceHeartbeatsMonitorServicesServiceStagesStageHeartbeatsGet");


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("stage", Ehelply.Sdk.Client.ClientUtils.ParameterToString(stage)); // path parameter
            if (history != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "history", history));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/sam/monitor/services/{service}/stages/{stage}/heartbeats", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServiceHeartbeatsMonitorServicesServiceStagesStageHeartbeatsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Service Kpis 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <returns>Object</returns>
        public Object GetServiceKpisMonitorServicesServiceKpisGet(string service, int? history = default(int?))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = GetServiceKpisMonitorServicesServiceKpisGetWithHttpInfo(service, history);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Service Kpis 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <returns>ApiResponse of Object</returns>
        public Ehelply.Sdk.Client.ApiResponse<Object> GetServiceKpisMonitorServicesServiceKpisGetWithHttpInfo(string service, int? history = default(int?))
        {
            // verify the required parameter 'service' is set
            if (service == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->GetServiceKpisMonitorServicesServiceKpisGet");

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            if (history != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "history", history));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/sam/monitor/services/{service}/kpis", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServiceKpisMonitorServicesServiceKpisGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Service Kpis 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetServiceKpisMonitorServicesServiceKpisGetAsync(string service, int? history = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = await GetServiceKpisMonitorServicesServiceKpisGetWithHttpInfoAsync(service, history, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Service Kpis 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<Object>> GetServiceKpisMonitorServicesServiceKpisGetWithHttpInfoAsync(string service, int? history = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'service' is set
            if (service == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->GetServiceKpisMonitorServicesServiceKpisGet");


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            if (history != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "history", history));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/sam/monitor/services/{service}/kpis", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServiceKpisMonitorServicesServiceKpisGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Service 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="heartbeats"> (optional, default to false)</param>
        /// <param name="heartbeatLimit"> (optional, default to 5)</param>
        /// <param name="alarms"> (optional, default to false)</param>
        /// <param name="alarmLimit"> (optional, default to 5)</param>
        /// <param name="stage"> (optional)</param>
        /// <returns>Object</returns>
        public Object GetServiceMonitorServicesServiceGet(string service, bool? heartbeats = default(bool?), int? heartbeatLimit = default(int?), bool? alarms = default(bool?), int? alarmLimit = default(int?), string stage = default(string))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = GetServiceMonitorServicesServiceGetWithHttpInfo(service, heartbeats, heartbeatLimit, alarms, alarmLimit, stage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Service 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="heartbeats"> (optional, default to false)</param>
        /// <param name="heartbeatLimit"> (optional, default to 5)</param>
        /// <param name="alarms"> (optional, default to false)</param>
        /// <param name="alarmLimit"> (optional, default to 5)</param>
        /// <param name="stage"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public Ehelply.Sdk.Client.ApiResponse<Object> GetServiceMonitorServicesServiceGetWithHttpInfo(string service, bool? heartbeats = default(bool?), int? heartbeatLimit = default(int?), bool? alarms = default(bool?), int? alarmLimit = default(int?), string stage = default(string))
        {
            // verify the required parameter 'service' is set
            if (service == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->GetServiceMonitorServicesServiceGet");

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            if (heartbeats != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "heartbeats", heartbeats));
            }
            if (heartbeatLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "heartbeat_limit", heartbeatLimit));
            }
            if (alarms != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "alarms", alarms));
            }
            if (alarmLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "alarm_limit", alarmLimit));
            }
            if (stage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "stage", stage));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/sam/monitor/services/{service}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServiceMonitorServicesServiceGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Service 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="heartbeats"> (optional, default to false)</param>
        /// <param name="heartbeatLimit"> (optional, default to 5)</param>
        /// <param name="alarms"> (optional, default to false)</param>
        /// <param name="alarmLimit"> (optional, default to 5)</param>
        /// <param name="stage"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetServiceMonitorServicesServiceGetAsync(string service, bool? heartbeats = default(bool?), int? heartbeatLimit = default(int?), bool? alarms = default(bool?), int? alarmLimit = default(int?), string stage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = await GetServiceMonitorServicesServiceGetWithHttpInfoAsync(service, heartbeats, heartbeatLimit, alarms, alarmLimit, stage, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Service 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="heartbeats"> (optional, default to false)</param>
        /// <param name="heartbeatLimit"> (optional, default to 5)</param>
        /// <param name="alarms"> (optional, default to false)</param>
        /// <param name="alarmLimit"> (optional, default to 5)</param>
        /// <param name="stage"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<Object>> GetServiceMonitorServicesServiceGetWithHttpInfoAsync(string service, bool? heartbeats = default(bool?), int? heartbeatLimit = default(int?), bool? alarms = default(bool?), int? alarmLimit = default(int?), string stage = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'service' is set
            if (service == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->GetServiceMonitorServicesServiceGet");


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            if (heartbeats != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "heartbeats", heartbeats));
            }
            if (heartbeatLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "heartbeat_limit", heartbeatLimit));
            }
            if (alarms != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "alarms", alarms));
            }
            if (alarmLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "alarm_limit", alarmLimit));
            }
            if (stage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "stage", stage));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/sam/monitor/services/{service}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServiceMonitorServicesServiceGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getservicespec 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="spec"></param>
        /// <param name="asJson"> (optional, default to false)</param>
        /// <returns>Object</returns>
        public Object GetServiceSpec(string service, string spec, bool? asJson = default(bool?))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = GetServiceSpecWithHttpInfo(service, spec, asJson);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Getservicespec 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="spec"></param>
        /// <param name="asJson"> (optional, default to false)</param>
        /// <returns>ApiResponse of Object</returns>
        public Ehelply.Sdk.Client.ApiResponse<Object> GetServiceSpecWithHttpInfo(string service, string spec, bool? asJson = default(bool?))
        {
            // verify the required parameter 'service' is set
            if (service == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->GetServiceSpec");

            // verify the required parameter 'spec' is set
            if (spec == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'spec' when calling MonitorApi->GetServiceSpec");

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("spec", Ehelply.Sdk.Client.ClientUtils.ParameterToString(spec)); // path parameter
            if (asJson != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "as_json", asJson));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/sam/monitor/services/{service}/specs/{spec}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServiceSpec", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getservicespec 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="spec"></param>
        /// <param name="asJson"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetServiceSpecAsync(string service, string spec, bool? asJson = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = await GetServiceSpecWithHttpInfoAsync(service, spec, asJson, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Getservicespec 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="spec"></param>
        /// <param name="asJson"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<Object>> GetServiceSpecWithHttpInfoAsync(string service, string spec, bool? asJson = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'service' is set
            if (service == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->GetServiceSpec");

            // verify the required parameter 'spec' is set
            if (spec == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'spec' when calling MonitorApi->GetServiceSpec");


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("spec", Ehelply.Sdk.Client.ClientUtils.ParameterToString(spec)); // path parameter
            if (asJson != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "as_json", asJson));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/sam/monitor/services/{service}/specs/{spec}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServiceSpec", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getservicespecs 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <returns>Object</returns>
        public Object GetServiceSpecs(string service)
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = GetServiceSpecsWithHttpInfo(service);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Getservicespecs 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <returns>ApiResponse of Object</returns>
        public Ehelply.Sdk.Client.ApiResponse<Object> GetServiceSpecsWithHttpInfo(string service)
        {
            // verify the required parameter 'service' is set
            if (service == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->GetServiceSpecs");

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/sam/monitor/services/{service}/specs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServiceSpecs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getservicespecs 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetServiceSpecsAsync(string service, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = await GetServiceSpecsWithHttpInfoAsync(service, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Getservicespecs 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<Object>> GetServiceSpecsWithHttpInfoAsync(string service, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'service' is set
            if (service == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->GetServiceSpecs");


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/sam/monitor/services/{service}/specs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServiceSpecs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Service Vitals 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <returns>Object</returns>
        public Object GetServiceVitalsMonitorServicesServiceStagesStageVitalsGet(string service, string stage, int? history = default(int?))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = GetServiceVitalsMonitorServicesServiceStagesStageVitalsGetWithHttpInfo(service, stage, history);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Service Vitals 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <returns>ApiResponse of Object</returns>
        public Ehelply.Sdk.Client.ApiResponse<Object> GetServiceVitalsMonitorServicesServiceStagesStageVitalsGetWithHttpInfo(string service, string stage, int? history = default(int?))
        {
            // verify the required parameter 'service' is set
            if (service == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->GetServiceVitalsMonitorServicesServiceStagesStageVitalsGet");

            // verify the required parameter 'stage' is set
            if (stage == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'stage' when calling MonitorApi->GetServiceVitalsMonitorServicesServiceStagesStageVitalsGet");

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("stage", Ehelply.Sdk.Client.ClientUtils.ParameterToString(stage)); // path parameter
            if (history != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "history", history));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/sam/monitor/services/{service}/stages/{stage}/vitals", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServiceVitalsMonitorServicesServiceStagesStageVitalsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Service Vitals 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetServiceVitalsMonitorServicesServiceStagesStageVitalsGetAsync(string service, string stage, int? history = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = await GetServiceVitalsMonitorServicesServiceStagesStageVitalsGetWithHttpInfoAsync(service, stage, history, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Service Vitals 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<Object>> GetServiceVitalsMonitorServicesServiceStagesStageVitalsGetWithHttpInfoAsync(string service, string stage, int? history = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'service' is set
            if (service == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->GetServiceVitalsMonitorServicesServiceStagesStageVitalsGet");

            // verify the required parameter 'stage' is set
            if (stage == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'stage' when calling MonitorApi->GetServiceVitalsMonitorServicesServiceStagesStageVitalsGet");


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("stage", Ehelply.Sdk.Client.ClientUtils.ParameterToString(stage)); // path parameter
            if (history != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "history", history));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/sam/monitor/services/{service}/stages/{stage}/vitals", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServiceVitalsMonitorServicesServiceStagesStageVitalsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Services 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="heartbeats"> (optional, default to false)</param>
        /// <param name="heartbeatLimit"> (optional, default to 5)</param>
        /// <param name="alarms"> (optional, default to false)</param>
        /// <param name="alarmLimit"> (optional, default to 5)</param>
        /// <param name="includeHidden"> (optional, default to false)</param>
        /// <param name="stage"> (optional)</param>
        /// <param name="key"> (optional)</param>
        /// <returns>Object</returns>
        public Object GetServicesMonitorServicesGet(bool? heartbeats = default(bool?), int? heartbeatLimit = default(int?), bool? alarms = default(bool?), int? alarmLimit = default(int?), bool? includeHidden = default(bool?), string stage = default(string), string key = default(string))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = GetServicesMonitorServicesGetWithHttpInfo(heartbeats, heartbeatLimit, alarms, alarmLimit, includeHidden, stage, key);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Services 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="heartbeats"> (optional, default to false)</param>
        /// <param name="heartbeatLimit"> (optional, default to 5)</param>
        /// <param name="alarms"> (optional, default to false)</param>
        /// <param name="alarmLimit"> (optional, default to 5)</param>
        /// <param name="includeHidden"> (optional, default to false)</param>
        /// <param name="stage"> (optional)</param>
        /// <param name="key"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public Ehelply.Sdk.Client.ApiResponse<Object> GetServicesMonitorServicesGetWithHttpInfo(bool? heartbeats = default(bool?), int? heartbeatLimit = default(int?), bool? alarms = default(bool?), int? alarmLimit = default(int?), bool? includeHidden = default(bool?), string stage = default(string), string key = default(string))
        {
            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (heartbeats != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "heartbeats", heartbeats));
            }
            if (heartbeatLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "heartbeat_limit", heartbeatLimit));
            }
            if (alarms != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "alarms", alarms));
            }
            if (alarmLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "alarm_limit", alarmLimit));
            }
            if (includeHidden != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "include_hidden", includeHidden));
            }
            if (stage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "stage", stage));
            }
            if (key != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "key", key));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/sam/monitor/services", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServicesMonitorServicesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Services 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="heartbeats"> (optional, default to false)</param>
        /// <param name="heartbeatLimit"> (optional, default to 5)</param>
        /// <param name="alarms"> (optional, default to false)</param>
        /// <param name="alarmLimit"> (optional, default to 5)</param>
        /// <param name="includeHidden"> (optional, default to false)</param>
        /// <param name="stage"> (optional)</param>
        /// <param name="key"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetServicesMonitorServicesGetAsync(bool? heartbeats = default(bool?), int? heartbeatLimit = default(int?), bool? alarms = default(bool?), int? alarmLimit = default(int?), bool? includeHidden = default(bool?), string stage = default(string), string key = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = await GetServicesMonitorServicesGetWithHttpInfoAsync(heartbeats, heartbeatLimit, alarms, alarmLimit, includeHidden, stage, key, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Services 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="heartbeats"> (optional, default to false)</param>
        /// <param name="heartbeatLimit"> (optional, default to 5)</param>
        /// <param name="alarms"> (optional, default to false)</param>
        /// <param name="alarmLimit"> (optional, default to 5)</param>
        /// <param name="includeHidden"> (optional, default to false)</param>
        /// <param name="stage"> (optional)</param>
        /// <param name="key"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<Object>> GetServicesMonitorServicesGetWithHttpInfoAsync(bool? heartbeats = default(bool?), int? heartbeatLimit = default(int?), bool? alarms = default(bool?), int? alarmLimit = default(int?), bool? includeHidden = default(bool?), string stage = default(string), string key = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (heartbeats != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "heartbeats", heartbeats));
            }
            if (heartbeatLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "heartbeat_limit", heartbeatLimit));
            }
            if (alarms != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "alarms", alarms));
            }
            if (alarmLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "alarm_limit", alarmLimit));
            }
            if (includeHidden != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "include_hidden", includeHidden));
            }
            if (stage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "stage", stage));
            }
            if (key != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "key", key));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/sam/monitor/services", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServicesMonitorServicesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getserviceswithspecs 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        public Object GetServicesWithSpecs()
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = GetServicesWithSpecsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Getserviceswithspecs 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        public Ehelply.Sdk.Client.ApiResponse<Object> GetServicesWithSpecsWithHttpInfo()
        {
            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/sam/monitor/specs/services", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServicesWithSpecs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getserviceswithspecs 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetServicesWithSpecsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = await GetServicesWithSpecsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Getserviceswithspecs 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<Object>> GetServicesWithSpecsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/sam/monitor/specs/services", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServicesWithSpecs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Hide Service 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <returns>Object</returns>
        public Object HideServiceMonitorServicesServiceStagesStageHidePost(string service, string stage)
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = HideServiceMonitorServicesServiceStagesStageHidePostWithHttpInfo(service, stage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Hide Service 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <returns>ApiResponse of Object</returns>
        public Ehelply.Sdk.Client.ApiResponse<Object> HideServiceMonitorServicesServiceStagesStageHidePostWithHttpInfo(string service, string stage)
        {
            // verify the required parameter 'service' is set
            if (service == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->HideServiceMonitorServicesServiceStagesStageHidePost");

            // verify the required parameter 'stage' is set
            if (stage == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'stage' when calling MonitorApi->HideServiceMonitorServicesServiceStagesStageHidePost");

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("stage", Ehelply.Sdk.Client.ClientUtils.ParameterToString(stage)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/sam/monitor/services/{service}/stages/{stage}/hide", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HideServiceMonitorServicesServiceStagesStageHidePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Hide Service 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> HideServiceMonitorServicesServiceStagesStageHidePostAsync(string service, string stage, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = await HideServiceMonitorServicesServiceStagesStageHidePostWithHttpInfoAsync(service, stage, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Hide Service 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<Object>> HideServiceMonitorServicesServiceStagesStageHidePostWithHttpInfoAsync(string service, string stage, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'service' is set
            if (service == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->HideServiceMonitorServicesServiceStagesStageHidePost");

            // verify the required parameter 'stage' is set
            if (stage == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'stage' when calling MonitorApi->HideServiceMonitorServicesServiceStagesStageHidePost");


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("stage", Ehelply.Sdk.Client.ClientUtils.ParameterToString(stage)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/sam/monitor/services/{service}/stages/{stage}/hide", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HideServiceMonitorServicesServiceStagesStageHidePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Ignore Alarm 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="bodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost"></param>
        /// <returns>Object</returns>
        public Object IgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost(string service, string stage, string alarmUuid, BodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost bodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost)
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = IgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePostWithHttpInfo(service, stage, alarmUuid, bodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Ignore Alarm 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="bodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost"></param>
        /// <returns>ApiResponse of Object</returns>
        public Ehelply.Sdk.Client.ApiResponse<Object> IgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePostWithHttpInfo(string service, string stage, string alarmUuid, BodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost bodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost)
        {
            // verify the required parameter 'service' is set
            if (service == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->IgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost");

            // verify the required parameter 'stage' is set
            if (stage == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'stage' when calling MonitorApi->IgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost");

            // verify the required parameter 'alarmUuid' is set
            if (alarmUuid == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'alarmUuid' when calling MonitorApi->IgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost");

            // verify the required parameter 'bodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost' is set
            if (bodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'bodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost' when calling MonitorApi->IgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost");

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("stage", Ehelply.Sdk.Client.ClientUtils.ParameterToString(stage)); // path parameter
            localVarRequestOptions.PathParameters.Add("alarm_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(alarmUuid)); // path parameter
            localVarRequestOptions.Data = bodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}/ignore", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Ignore Alarm 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="bodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> IgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePostAsync(string service, string stage, string alarmUuid, BodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost bodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = await IgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePostWithHttpInfoAsync(service, stage, alarmUuid, bodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Ignore Alarm 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="bodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<Object>> IgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePostWithHttpInfoAsync(string service, string stage, string alarmUuid, BodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost bodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'service' is set
            if (service == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->IgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost");

            // verify the required parameter 'stage' is set
            if (stage == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'stage' when calling MonitorApi->IgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost");

            // verify the required parameter 'alarmUuid' is set
            if (alarmUuid == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'alarmUuid' when calling MonitorApi->IgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost");

            // verify the required parameter 'bodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost' is set
            if (bodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'bodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost' when calling MonitorApi->IgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost");


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("stage", Ehelply.Sdk.Client.ClientUtils.ParameterToString(stage)); // path parameter
            localVarRequestOptions.PathParameters.Add("alarm_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(alarmUuid)); // path parameter
            localVarRequestOptions.Data = bodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}/ignore", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register Service 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyRegisterServiceMonitorServicesPost"></param>
        /// <returns>Object</returns>
        public Object RegisterServiceMonitorServicesPost(BodyRegisterServiceMonitorServicesPost bodyRegisterServiceMonitorServicesPost)
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = RegisterServiceMonitorServicesPostWithHttpInfo(bodyRegisterServiceMonitorServicesPost);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Register Service 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyRegisterServiceMonitorServicesPost"></param>
        /// <returns>ApiResponse of Object</returns>
        public Ehelply.Sdk.Client.ApiResponse<Object> RegisterServiceMonitorServicesPostWithHttpInfo(BodyRegisterServiceMonitorServicesPost bodyRegisterServiceMonitorServicesPost)
        {
            // verify the required parameter 'bodyRegisterServiceMonitorServicesPost' is set
            if (bodyRegisterServiceMonitorServicesPost == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'bodyRegisterServiceMonitorServicesPost' when calling MonitorApi->RegisterServiceMonitorServicesPost");

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = bodyRegisterServiceMonitorServicesPost;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/sam/monitor/services", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegisterServiceMonitorServicesPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register Service 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyRegisterServiceMonitorServicesPost"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> RegisterServiceMonitorServicesPostAsync(BodyRegisterServiceMonitorServicesPost bodyRegisterServiceMonitorServicesPost, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = await RegisterServiceMonitorServicesPostWithHttpInfoAsync(bodyRegisterServiceMonitorServicesPost, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Register Service 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bodyRegisterServiceMonitorServicesPost"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<Object>> RegisterServiceMonitorServicesPostWithHttpInfoAsync(BodyRegisterServiceMonitorServicesPost bodyRegisterServiceMonitorServicesPost, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'bodyRegisterServiceMonitorServicesPost' is set
            if (bodyRegisterServiceMonitorServicesPost == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'bodyRegisterServiceMonitorServicesPost' when calling MonitorApi->RegisterServiceMonitorServicesPost");


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = bodyRegisterServiceMonitorServicesPost;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/sam/monitor/services", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegisterServiceMonitorServicesPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Alarms 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 25)</param>
        /// <param name="search"> (optional)</param>
        /// <param name="searchOn"> (optional)</param>
        /// <param name="sortOn"> (optional)</param>
        /// <param name="sortDesc"> (optional, default to false)</param>
        /// <returns>Object</returns>
        public Object SearchAlarmsMonitorServicesServiceAlarmsGet(string service, int? page = default(int?), int? pageSize = default(int?), string search = default(string), string searchOn = default(string), string sortOn = default(string), bool? sortDesc = default(bool?))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = SearchAlarmsMonitorServicesServiceAlarmsGetWithHttpInfo(service, page, pageSize, search, searchOn, sortOn, sortDesc);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Alarms 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 25)</param>
        /// <param name="search"> (optional)</param>
        /// <param name="searchOn"> (optional)</param>
        /// <param name="sortOn"> (optional)</param>
        /// <param name="sortDesc"> (optional, default to false)</param>
        /// <returns>ApiResponse of Object</returns>
        public Ehelply.Sdk.Client.ApiResponse<Object> SearchAlarmsMonitorServicesServiceAlarmsGetWithHttpInfo(string service, int? page = default(int?), int? pageSize = default(int?), string search = default(string), string searchOn = default(string), string sortOn = default(string), bool? sortDesc = default(bool?))
        {
            // verify the required parameter 'service' is set
            if (service == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->SearchAlarmsMonitorServicesServiceAlarmsGet");

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (searchOn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "search_on", searchOn));
            }
            if (sortOn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort_on", sortOn));
            }
            if (sortDesc != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort_desc", sortDesc));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/sam/monitor/services/{service}/alarms", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchAlarmsMonitorServicesServiceAlarmsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Alarms 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 25)</param>
        /// <param name="search"> (optional)</param>
        /// <param name="searchOn"> (optional)</param>
        /// <param name="sortOn"> (optional)</param>
        /// <param name="sortDesc"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SearchAlarmsMonitorServicesServiceAlarmsGetAsync(string service, int? page = default(int?), int? pageSize = default(int?), string search = default(string), string searchOn = default(string), string sortOn = default(string), bool? sortDesc = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = await SearchAlarmsMonitorServicesServiceAlarmsGetWithHttpInfoAsync(service, page, pageSize, search, searchOn, sortOn, sortDesc, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Alarms 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 25)</param>
        /// <param name="search"> (optional)</param>
        /// <param name="searchOn"> (optional)</param>
        /// <param name="sortOn"> (optional)</param>
        /// <param name="sortDesc"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<Object>> SearchAlarmsMonitorServicesServiceAlarmsGetWithHttpInfoAsync(string service, int? page = default(int?), int? pageSize = default(int?), string search = default(string), string searchOn = default(string), string sortOn = default(string), bool? sortDesc = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'service' is set
            if (service == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->SearchAlarmsMonitorServicesServiceAlarmsGet");


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (searchOn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "search_on", searchOn));
            }
            if (sortOn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort_on", sortOn));
            }
            if (sortDesc != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort_desc", sortDesc));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/sam/monitor/services/{service}/alarms", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchAlarmsMonitorServicesServiceAlarmsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Show Service 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <returns>Object</returns>
        public Object ShowServiceMonitorServicesServiceStagesStageShowPost(string service, string stage)
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = ShowServiceMonitorServicesServiceStagesStageShowPostWithHttpInfo(service, stage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Show Service 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <returns>ApiResponse of Object</returns>
        public Ehelply.Sdk.Client.ApiResponse<Object> ShowServiceMonitorServicesServiceStagesStageShowPostWithHttpInfo(string service, string stage)
        {
            // verify the required parameter 'service' is set
            if (service == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->ShowServiceMonitorServicesServiceStagesStageShowPost");

            // verify the required parameter 'stage' is set
            if (stage == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'stage' when calling MonitorApi->ShowServiceMonitorServicesServiceStagesStageShowPost");

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("stage", Ehelply.Sdk.Client.ClientUtils.ParameterToString(stage)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/sam/monitor/services/{service}/stages/{stage}/show", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowServiceMonitorServicesServiceStagesStageShowPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Show Service 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ShowServiceMonitorServicesServiceStagesStageShowPostAsync(string service, string stage, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = await ShowServiceMonitorServicesServiceStagesStageShowPostWithHttpInfoAsync(service, stage, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Show Service 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<Object>> ShowServiceMonitorServicesServiceStagesStageShowPostWithHttpInfoAsync(string service, string stage, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'service' is set
            if (service == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->ShowServiceMonitorServicesServiceStagesStageShowPost");

            // verify the required parameter 'stage' is set
            if (stage == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'stage' when calling MonitorApi->ShowServiceMonitorServicesServiceStagesStageShowPost");


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("stage", Ehelply.Sdk.Client.ClientUtils.ParameterToString(stage)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/sam/monitor/services/{service}/stages/{stage}/show", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowServiceMonitorServicesServiceStagesStageShowPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Terminate Alarm 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="bodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost"></param>
        /// <returns>Object</returns>
        public Object TerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost(string service, string stage, string alarmUuid, BodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost bodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost)
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = TerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePostWithHttpInfo(service, stage, alarmUuid, bodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Terminate Alarm 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="bodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost"></param>
        /// <returns>ApiResponse of Object</returns>
        public Ehelply.Sdk.Client.ApiResponse<Object> TerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePostWithHttpInfo(string service, string stage, string alarmUuid, BodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost bodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost)
        {
            // verify the required parameter 'service' is set
            if (service == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->TerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost");

            // verify the required parameter 'stage' is set
            if (stage == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'stage' when calling MonitorApi->TerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost");

            // verify the required parameter 'alarmUuid' is set
            if (alarmUuid == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'alarmUuid' when calling MonitorApi->TerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost");

            // verify the required parameter 'bodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost' is set
            if (bodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'bodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost' when calling MonitorApi->TerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost");

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("stage", Ehelply.Sdk.Client.ClientUtils.ParameterToString(stage)); // path parameter
            localVarRequestOptions.PathParameters.Add("alarm_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(alarmUuid)); // path parameter
            localVarRequestOptions.Data = bodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}/terminate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Terminate Alarm 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="bodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> TerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePostAsync(string service, string stage, string alarmUuid, BodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost bodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = await TerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePostWithHttpInfoAsync(service, stage, alarmUuid, bodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Terminate Alarm 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="bodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<Object>> TerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePostWithHttpInfoAsync(string service, string stage, string alarmUuid, BodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost bodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'service' is set
            if (service == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->TerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost");

            // verify the required parameter 'stage' is set
            if (stage == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'stage' when calling MonitorApi->TerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost");

            // verify the required parameter 'alarmUuid' is set
            if (alarmUuid == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'alarmUuid' when calling MonitorApi->TerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost");

            // verify the required parameter 'bodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost' is set
            if (bodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'bodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost' when calling MonitorApi->TerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost");


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("stage", Ehelply.Sdk.Client.ClientUtils.ParameterToString(stage)); // path parameter
            localVarRequestOptions.PathParameters.Add("alarm_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(alarmUuid)); // path parameter
            localVarRequestOptions.Data = bodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}/terminate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trigger Alarm 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="bodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost"></param>
        /// <returns>Object</returns>
        public Object TriggerAlarmMonitorServicesServiceStagesStageAlarmsPost(string service, string stage, BodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost bodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost)
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = TriggerAlarmMonitorServicesServiceStagesStageAlarmsPostWithHttpInfo(service, stage, bodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trigger Alarm 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="bodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost"></param>
        /// <returns>ApiResponse of Object</returns>
        public Ehelply.Sdk.Client.ApiResponse<Object> TriggerAlarmMonitorServicesServiceStagesStageAlarmsPostWithHttpInfo(string service, string stage, BodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost bodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost)
        {
            // verify the required parameter 'service' is set
            if (service == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->TriggerAlarmMonitorServicesServiceStagesStageAlarmsPost");

            // verify the required parameter 'stage' is set
            if (stage == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'stage' when calling MonitorApi->TriggerAlarmMonitorServicesServiceStagesStageAlarmsPost");

            // verify the required parameter 'bodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost' is set
            if (bodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'bodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost' when calling MonitorApi->TriggerAlarmMonitorServicesServiceStagesStageAlarmsPost");

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("stage", Ehelply.Sdk.Client.ClientUtils.ParameterToString(stage)); // path parameter
            localVarRequestOptions.Data = bodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/sam/monitor/services/{service}/stages/{stage}/alarms", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TriggerAlarmMonitorServicesServiceStagesStageAlarmsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trigger Alarm 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="bodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> TriggerAlarmMonitorServicesServiceStagesStageAlarmsPostAsync(string service, string stage, BodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost bodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<Object> localVarResponse = await TriggerAlarmMonitorServicesServiceStagesStageAlarmsPostWithHttpInfoAsync(service, stage, bodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trigger Alarm 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="bodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<Object>> TriggerAlarmMonitorServicesServiceStagesStageAlarmsPostWithHttpInfoAsync(string service, string stage, BodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost bodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'service' is set
            if (service == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->TriggerAlarmMonitorServicesServiceStagesStageAlarmsPost");

            // verify the required parameter 'stage' is set
            if (stage == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'stage' when calling MonitorApi->TriggerAlarmMonitorServicesServiceStagesStageAlarmsPost");

            // verify the required parameter 'bodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost' is set
            if (bodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost == null)
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'bodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost' when calling MonitorApi->TriggerAlarmMonitorServicesServiceStagesStageAlarmsPost");


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("stage", Ehelply.Sdk.Client.ClientUtils.ParameterToString(stage)); // path parameter
            localVarRequestOptions.Data = bodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/sam/monitor/services/{service}/stages/{stage}/alarms", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TriggerAlarmMonitorServicesServiceStagesStageAlarmsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
