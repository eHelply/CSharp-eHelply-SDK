/*
 * eHelply SDK - 1.1.85
 *
 * eHelply SDK for SuperStack Services
 *
 * The version of the OpenAPI document: 1.1.85
 * Contact: support@ehelply.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Ehelply.Sdk.Client;
using Ehelply.Sdk.Model;

namespace Ehelply.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMonitorApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Acknowledgealarm
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="alarmAcknowledge"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AlarmResponse</returns>
        AlarmResponse AcknowledgeAlarm(string service, string stage, string alarmUuid, AlarmAcknowledge alarmAcknowledge, int operationIndex = 0);

        /// <summary>
        /// Acknowledgealarm
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="alarmAcknowledge"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AlarmResponse</returns>
        ApiResponse<AlarmResponse> AcknowledgeAlarmWithHttpInfo(string service, string stage, string alarmUuid, AlarmAcknowledge alarmAcknowledge, int operationIndex = 0);
        /// <summary>
        /// Assignalarm
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="alarmAssign"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AlarmResponse</returns>
        AlarmResponse AssignAlarm(string service, string stage, string alarmUuid, AlarmAssign alarmAssign, int operationIndex = 0);

        /// <summary>
        /// Assignalarm
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="alarmAssign"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AlarmResponse</returns>
        ApiResponse<AlarmResponse> AssignAlarmWithHttpInfo(string service, string stage, string alarmUuid, AlarmAssign alarmAssign, int operationIndex = 0);
        /// <summary>
        /// Attachalarmnote
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="alarmNote"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AlarmResponse</returns>
        AlarmResponse AttachAlarmNote(string service, string stage, string alarmUuid, AlarmNote alarmNote, int operationIndex = 0);

        /// <summary>
        /// Attachalarmnote
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="alarmNote"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AlarmResponse</returns>
        ApiResponse<AlarmResponse> AttachAlarmNoteWithHttpInfo(string service, string stage, string alarmUuid, AlarmNote alarmNote, int operationIndex = 0);
        /// <summary>
        /// Attachalarmticket
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="alarmTicket"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AlarmResponse</returns>
        AlarmResponse AttachAlarmTicket(string service, string stage, string alarmUuid, AlarmTicket alarmTicket, int operationIndex = 0);

        /// <summary>
        /// Attachalarmticket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="alarmTicket"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AlarmResponse</returns>
        ApiResponse<AlarmResponse> AttachAlarmTicketWithHttpInfo(string service, string stage, string alarmUuid, AlarmTicket alarmTicket, int operationIndex = 0);
        /// <summary>
        /// Clearalarm
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AlarmResponse</returns>
        AlarmResponse ClearAlarm(string service, string stage, string alarmUuid, int operationIndex = 0);

        /// <summary>
        /// Clearalarm
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AlarmResponse</returns>
        ApiResponse<AlarmResponse> ClearAlarmWithHttpInfo(string service, string stage, string alarmUuid, int operationIndex = 0);
        /// <summary>
        /// Getservice
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="heartbeats"> (optional, default to false)</param>
        /// <param name="heartbeatLimit"> (optional, default to 5)</param>
        /// <param name="alarms"> (optional, default to false)</param>
        /// <param name="alarmLimit"> (optional, default to 5)</param>
        /// <param name="stage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceResponse</returns>
        ServiceResponse GetService(string service, bool? heartbeats = default(bool?), int? heartbeatLimit = default(int?), bool? alarms = default(bool?), int? alarmLimit = default(int?), string stage = default(string), int operationIndex = 0);

        /// <summary>
        /// Getservice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="heartbeats"> (optional, default to false)</param>
        /// <param name="heartbeatLimit"> (optional, default to 5)</param>
        /// <param name="alarms"> (optional, default to false)</param>
        /// <param name="alarmLimit"> (optional, default to 5)</param>
        /// <param name="stage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceResponse</returns>
        ApiResponse<ServiceResponse> GetServiceWithHttpInfo(string service, bool? heartbeats = default(bool?), int? heartbeatLimit = default(int?), bool? alarms = default(bool?), int? alarmLimit = default(int?), string stage = default(string), int operationIndex = 0);
        /// <summary>
        /// Getservicealarm
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AlarmResponse</returns>
        AlarmResponse GetServiceAlarm(string service, string stage, string alarmUuid, int operationIndex = 0);

        /// <summary>
        /// Getservicealarm
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AlarmResponse</returns>
        ApiResponse<AlarmResponse> GetServiceAlarmWithHttpInfo(string service, string stage, string alarmUuid, int operationIndex = 0);
        /// <summary>
        /// Getservicealarms
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <param name="includeTerminated"> (optional, default to false)</param>
        /// <param name="includeCleared"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AlarmResponse&gt;</returns>
        List<AlarmResponse> GetServiceAlarms(string service, string stage, int? history = default(int?), bool? includeTerminated = default(bool?), bool? includeCleared = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Getservicealarms
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <param name="includeTerminated"> (optional, default to false)</param>
        /// <param name="includeCleared"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AlarmResponse&gt;</returns>
        ApiResponse<List<AlarmResponse>> GetServiceAlarmsWithHttpInfo(string service, string stage, int? history = default(int?), bool? includeTerminated = default(bool?), bool? includeCleared = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Getserviceheartbeat
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;HeartbeatResponse&gt;</returns>
        List<HeartbeatResponse> GetServiceHeartbeat(string service, string stage, int? history = default(int?), int operationIndex = 0);

        /// <summary>
        /// Getserviceheartbeat
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;HeartbeatResponse&gt;</returns>
        ApiResponse<List<HeartbeatResponse>> GetServiceHeartbeatWithHttpInfo(string service, string stage, int? history = default(int?), int operationIndex = 0);
        /// <summary>
        /// Getservicekpis
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;KpiResponse&gt;</returns>
        List<KpiResponse> GetServiceKpis(string service, int? history = default(int?), int operationIndex = 0);

        /// <summary>
        /// Getservicekpis
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;KpiResponse&gt;</returns>
        ApiResponse<List<KpiResponse>> GetServiceKpisWithHttpInfo(string service, int? history = default(int?), int operationIndex = 0);
        /// <summary>
        /// Getservicespec
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="spec"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetServiceSpecResponse</returns>
        GetServiceSpecResponse GetServiceSpec(string service, string spec, int operationIndex = 0);

        /// <summary>
        /// Getservicespec
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="spec"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetServiceSpecResponse</returns>
        ApiResponse<GetServiceSpecResponse> GetServiceSpecWithHttpInfo(string service, string spec, int operationIndex = 0);
        /// <summary>
        /// Getservicespecs
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetServiceSpecsResponse</returns>
        GetServiceSpecsResponse GetServiceSpecs(string service, int operationIndex = 0);

        /// <summary>
        /// Getservicespecs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetServiceSpecsResponse</returns>
        ApiResponse<GetServiceSpecsResponse> GetServiceSpecsWithHttpInfo(string service, int operationIndex = 0);
        /// <summary>
        /// Getservicevitals
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;StatsVitalsResponse&gt;</returns>
        List<StatsVitalsResponse> GetServiceVitals(string service, string stage, int? history = default(int?), int operationIndex = 0);

        /// <summary>
        /// Getservicevitals
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;StatsVitalsResponse&gt;</returns>
        ApiResponse<List<StatsVitalsResponse>> GetServiceVitalsWithHttpInfo(string service, string stage, int? history = default(int?), int operationIndex = 0);
        /// <summary>
        /// Getservices
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="heartbeats"> (optional, default to false)</param>
        /// <param name="heartbeatLimit"> (optional, default to 5)</param>
        /// <param name="alarms"> (optional, default to false)</param>
        /// <param name="alarmLimit"> (optional, default to 5)</param>
        /// <param name="includeHidden"> (optional, default to false)</param>
        /// <param name="stage"> (optional)</param>
        /// <param name="key"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ServiceResponse&gt;</returns>
        List<ServiceResponse> GetServices(bool? heartbeats = default(bool?), int? heartbeatLimit = default(int?), bool? alarms = default(bool?), int? alarmLimit = default(int?), bool? includeHidden = default(bool?), string stage = default(string), string key = default(string), int operationIndex = 0);

        /// <summary>
        /// Getservices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="heartbeats"> (optional, default to false)</param>
        /// <param name="heartbeatLimit"> (optional, default to 5)</param>
        /// <param name="alarms"> (optional, default to false)</param>
        /// <param name="alarmLimit"> (optional, default to 5)</param>
        /// <param name="includeHidden"> (optional, default to false)</param>
        /// <param name="stage"> (optional)</param>
        /// <param name="key"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ServiceResponse&gt;</returns>
        ApiResponse<List<ServiceResponse>> GetServicesWithHttpInfo(bool? heartbeats = default(bool?), int? heartbeatLimit = default(int?), bool? alarms = default(bool?), int? alarmLimit = default(int?), bool? includeHidden = default(bool?), string stage = default(string), string key = default(string), int operationIndex = 0);
        /// <summary>
        /// Getserviceswithspecs
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetServiceServiceWithSpecsResponse</returns>
        GetServiceServiceWithSpecsResponse GetServicesWithSpecs(int operationIndex = 0);

        /// <summary>
        /// Getserviceswithspecs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetServiceServiceWithSpecsResponse</returns>
        ApiResponse<GetServiceServiceWithSpecsResponse> GetServicesWithSpecsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Hideservice
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceMessageResponse</returns>
        ServiceMessageResponse HideService(string service, string stage, int operationIndex = 0);

        /// <summary>
        /// Hideservice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceMessageResponse</returns>
        ApiResponse<ServiceMessageResponse> HideServiceWithHttpInfo(string service, string stage, int operationIndex = 0);
        /// <summary>
        /// Ignorealarm
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="alarmIgnore"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AlarmResponse</returns>
        AlarmResponse IgnoreAlarm(string service, string stage, string alarmUuid, AlarmIgnore alarmIgnore, int operationIndex = 0);

        /// <summary>
        /// Ignorealarm
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="alarmIgnore"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AlarmResponse</returns>
        ApiResponse<AlarmResponse> IgnoreAlarmWithHttpInfo(string service, string stage, string alarmUuid, AlarmIgnore alarmIgnore, int operationIndex = 0);
        /// <summary>
        /// Registerservice
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceCreate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceResponse</returns>
        ServiceResponse RegisterService(ServiceCreate serviceCreate, int operationIndex = 0);

        /// <summary>
        /// Registerservice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceCreate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceResponse</returns>
        ApiResponse<ServiceResponse> RegisterServiceWithHttpInfo(ServiceCreate serviceCreate, int operationIndex = 0);
        /// <summary>
        /// Searchalarms
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 25)</param>
        /// <param name="search"> (optional)</param>
        /// <param name="searchOn"> (optional)</param>
        /// <param name="sortOn"> (optional)</param>
        /// <param name="sortDesc"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Page</returns>
        Page SearchAlarms(string service, int? page = default(int?), int? pageSize = default(int?), string search = default(string), string searchOn = default(string), string sortOn = default(string), bool? sortDesc = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Searchalarms
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 25)</param>
        /// <param name="search"> (optional)</param>
        /// <param name="searchOn"> (optional)</param>
        /// <param name="sortOn"> (optional)</param>
        /// <param name="sortDesc"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Page</returns>
        ApiResponse<Page> SearchAlarmsWithHttpInfo(string service, int? page = default(int?), int? pageSize = default(int?), string search = default(string), string searchOn = default(string), string sortOn = default(string), bool? sortDesc = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Showservice
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceMessageResponse</returns>
        ServiceMessageResponse ShowService(string service, string stage, int operationIndex = 0);

        /// <summary>
        /// Showservice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceMessageResponse</returns>
        ApiResponse<ServiceMessageResponse> ShowServiceWithHttpInfo(string service, string stage, int operationIndex = 0);
        /// <summary>
        /// Terminatealarm
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="alarmTerminate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AlarmResponse</returns>
        AlarmResponse TerminateAlarm(string service, string stage, string alarmUuid, AlarmTerminate alarmTerminate, int operationIndex = 0);

        /// <summary>
        /// Terminatealarm
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="alarmTerminate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AlarmResponse</returns>
        ApiResponse<AlarmResponse> TerminateAlarmWithHttpInfo(string service, string stage, string alarmUuid, AlarmTerminate alarmTerminate, int operationIndex = 0);
        /// <summary>
        /// Triggeralarm
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmCreate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AlarmResponse</returns>
        AlarmResponse TriggerAlarm(string service, string stage, AlarmCreate alarmCreate, int operationIndex = 0);

        /// <summary>
        /// Triggeralarm
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmCreate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AlarmResponse</returns>
        ApiResponse<AlarmResponse> TriggerAlarmWithHttpInfo(string service, string stage, AlarmCreate alarmCreate, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMonitorApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Acknowledgealarm
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="alarmAcknowledge"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AlarmResponse</returns>
        System.Threading.Tasks.Task<AlarmResponse> AcknowledgeAlarmAsync(string service, string stage, string alarmUuid, AlarmAcknowledge alarmAcknowledge, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Acknowledgealarm
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="alarmAcknowledge"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AlarmResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlarmResponse>> AcknowledgeAlarmWithHttpInfoAsync(string service, string stage, string alarmUuid, AlarmAcknowledge alarmAcknowledge, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Assignalarm
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="alarmAssign"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AlarmResponse</returns>
        System.Threading.Tasks.Task<AlarmResponse> AssignAlarmAsync(string service, string stage, string alarmUuid, AlarmAssign alarmAssign, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Assignalarm
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="alarmAssign"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AlarmResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlarmResponse>> AssignAlarmWithHttpInfoAsync(string service, string stage, string alarmUuid, AlarmAssign alarmAssign, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Attachalarmnote
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="alarmNote"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AlarmResponse</returns>
        System.Threading.Tasks.Task<AlarmResponse> AttachAlarmNoteAsync(string service, string stage, string alarmUuid, AlarmNote alarmNote, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Attachalarmnote
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="alarmNote"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AlarmResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlarmResponse>> AttachAlarmNoteWithHttpInfoAsync(string service, string stage, string alarmUuid, AlarmNote alarmNote, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Attachalarmticket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="alarmTicket"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AlarmResponse</returns>
        System.Threading.Tasks.Task<AlarmResponse> AttachAlarmTicketAsync(string service, string stage, string alarmUuid, AlarmTicket alarmTicket, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Attachalarmticket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="alarmTicket"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AlarmResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlarmResponse>> AttachAlarmTicketWithHttpInfoAsync(string service, string stage, string alarmUuid, AlarmTicket alarmTicket, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Clearalarm
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AlarmResponse</returns>
        System.Threading.Tasks.Task<AlarmResponse> ClearAlarmAsync(string service, string stage, string alarmUuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Clearalarm
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AlarmResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlarmResponse>> ClearAlarmWithHttpInfoAsync(string service, string stage, string alarmUuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Getservice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="heartbeats"> (optional, default to false)</param>
        /// <param name="heartbeatLimit"> (optional, default to 5)</param>
        /// <param name="alarms"> (optional, default to false)</param>
        /// <param name="alarmLimit"> (optional, default to 5)</param>
        /// <param name="stage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceResponse</returns>
        System.Threading.Tasks.Task<ServiceResponse> GetServiceAsync(string service, bool? heartbeats = default(bool?), int? heartbeatLimit = default(int?), bool? alarms = default(bool?), int? alarmLimit = default(int?), string stage = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Getservice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="heartbeats"> (optional, default to false)</param>
        /// <param name="heartbeatLimit"> (optional, default to 5)</param>
        /// <param name="alarms"> (optional, default to false)</param>
        /// <param name="alarmLimit"> (optional, default to 5)</param>
        /// <param name="stage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceResponse>> GetServiceWithHttpInfoAsync(string service, bool? heartbeats = default(bool?), int? heartbeatLimit = default(int?), bool? alarms = default(bool?), int? alarmLimit = default(int?), string stage = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Getservicealarm
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AlarmResponse</returns>
        System.Threading.Tasks.Task<AlarmResponse> GetServiceAlarmAsync(string service, string stage, string alarmUuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Getservicealarm
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AlarmResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlarmResponse>> GetServiceAlarmWithHttpInfoAsync(string service, string stage, string alarmUuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Getservicealarms
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <param name="includeTerminated"> (optional, default to false)</param>
        /// <param name="includeCleared"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AlarmResponse&gt;</returns>
        System.Threading.Tasks.Task<List<AlarmResponse>> GetServiceAlarmsAsync(string service, string stage, int? history = default(int?), bool? includeTerminated = default(bool?), bool? includeCleared = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Getservicealarms
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <param name="includeTerminated"> (optional, default to false)</param>
        /// <param name="includeCleared"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AlarmResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AlarmResponse>>> GetServiceAlarmsWithHttpInfoAsync(string service, string stage, int? history = default(int?), bool? includeTerminated = default(bool?), bool? includeCleared = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Getserviceheartbeat
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;HeartbeatResponse&gt;</returns>
        System.Threading.Tasks.Task<List<HeartbeatResponse>> GetServiceHeartbeatAsync(string service, string stage, int? history = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Getserviceheartbeat
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;HeartbeatResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<HeartbeatResponse>>> GetServiceHeartbeatWithHttpInfoAsync(string service, string stage, int? history = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Getservicekpis
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;KpiResponse&gt;</returns>
        System.Threading.Tasks.Task<List<KpiResponse>> GetServiceKpisAsync(string service, int? history = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Getservicekpis
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;KpiResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<KpiResponse>>> GetServiceKpisWithHttpInfoAsync(string service, int? history = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Getservicespec
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="spec"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetServiceSpecResponse</returns>
        System.Threading.Tasks.Task<GetServiceSpecResponse> GetServiceSpecAsync(string service, string spec, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Getservicespec
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="spec"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetServiceSpecResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetServiceSpecResponse>> GetServiceSpecWithHttpInfoAsync(string service, string spec, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Getservicespecs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetServiceSpecsResponse</returns>
        System.Threading.Tasks.Task<GetServiceSpecsResponse> GetServiceSpecsAsync(string service, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Getservicespecs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetServiceSpecsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetServiceSpecsResponse>> GetServiceSpecsWithHttpInfoAsync(string service, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Getservicevitals
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;StatsVitalsResponse&gt;</returns>
        System.Threading.Tasks.Task<List<StatsVitalsResponse>> GetServiceVitalsAsync(string service, string stage, int? history = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Getservicevitals
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;StatsVitalsResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<StatsVitalsResponse>>> GetServiceVitalsWithHttpInfoAsync(string service, string stage, int? history = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Getservices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="heartbeats"> (optional, default to false)</param>
        /// <param name="heartbeatLimit"> (optional, default to 5)</param>
        /// <param name="alarms"> (optional, default to false)</param>
        /// <param name="alarmLimit"> (optional, default to 5)</param>
        /// <param name="includeHidden"> (optional, default to false)</param>
        /// <param name="stage"> (optional)</param>
        /// <param name="key"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ServiceResponse&gt;</returns>
        System.Threading.Tasks.Task<List<ServiceResponse>> GetServicesAsync(bool? heartbeats = default(bool?), int? heartbeatLimit = default(int?), bool? alarms = default(bool?), int? alarmLimit = default(int?), bool? includeHidden = default(bool?), string stage = default(string), string key = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Getservices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="heartbeats"> (optional, default to false)</param>
        /// <param name="heartbeatLimit"> (optional, default to 5)</param>
        /// <param name="alarms"> (optional, default to false)</param>
        /// <param name="alarmLimit"> (optional, default to 5)</param>
        /// <param name="includeHidden"> (optional, default to false)</param>
        /// <param name="stage"> (optional)</param>
        /// <param name="key"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ServiceResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ServiceResponse>>> GetServicesWithHttpInfoAsync(bool? heartbeats = default(bool?), int? heartbeatLimit = default(int?), bool? alarms = default(bool?), int? alarmLimit = default(int?), bool? includeHidden = default(bool?), string stage = default(string), string key = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Getserviceswithspecs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetServiceServiceWithSpecsResponse</returns>
        System.Threading.Tasks.Task<GetServiceServiceWithSpecsResponse> GetServicesWithSpecsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Getserviceswithspecs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetServiceServiceWithSpecsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetServiceServiceWithSpecsResponse>> GetServicesWithSpecsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Hideservice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceMessageResponse</returns>
        System.Threading.Tasks.Task<ServiceMessageResponse> HideServiceAsync(string service, string stage, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Hideservice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceMessageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceMessageResponse>> HideServiceWithHttpInfoAsync(string service, string stage, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Ignorealarm
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="alarmIgnore"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AlarmResponse</returns>
        System.Threading.Tasks.Task<AlarmResponse> IgnoreAlarmAsync(string service, string stage, string alarmUuid, AlarmIgnore alarmIgnore, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Ignorealarm
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="alarmIgnore"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AlarmResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlarmResponse>> IgnoreAlarmWithHttpInfoAsync(string service, string stage, string alarmUuid, AlarmIgnore alarmIgnore, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Registerservice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceCreate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceResponse</returns>
        System.Threading.Tasks.Task<ServiceResponse> RegisterServiceAsync(ServiceCreate serviceCreate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Registerservice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceCreate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceResponse>> RegisterServiceWithHttpInfoAsync(ServiceCreate serviceCreate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Searchalarms
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 25)</param>
        /// <param name="search"> (optional)</param>
        /// <param name="searchOn"> (optional)</param>
        /// <param name="sortOn"> (optional)</param>
        /// <param name="sortDesc"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Page</returns>
        System.Threading.Tasks.Task<Page> SearchAlarmsAsync(string service, int? page = default(int?), int? pageSize = default(int?), string search = default(string), string searchOn = default(string), string sortOn = default(string), bool? sortDesc = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Searchalarms
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 25)</param>
        /// <param name="search"> (optional)</param>
        /// <param name="searchOn"> (optional)</param>
        /// <param name="sortOn"> (optional)</param>
        /// <param name="sortDesc"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Page)</returns>
        System.Threading.Tasks.Task<ApiResponse<Page>> SearchAlarmsWithHttpInfoAsync(string service, int? page = default(int?), int? pageSize = default(int?), string search = default(string), string searchOn = default(string), string sortOn = default(string), bool? sortDesc = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Showservice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceMessageResponse</returns>
        System.Threading.Tasks.Task<ServiceMessageResponse> ShowServiceAsync(string service, string stage, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Showservice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceMessageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceMessageResponse>> ShowServiceWithHttpInfoAsync(string service, string stage, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Terminatealarm
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="alarmTerminate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AlarmResponse</returns>
        System.Threading.Tasks.Task<AlarmResponse> TerminateAlarmAsync(string service, string stage, string alarmUuid, AlarmTerminate alarmTerminate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Terminatealarm
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="alarmTerminate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AlarmResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlarmResponse>> TerminateAlarmWithHttpInfoAsync(string service, string stage, string alarmUuid, AlarmTerminate alarmTerminate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Triggeralarm
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmCreate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AlarmResponse</returns>
        System.Threading.Tasks.Task<AlarmResponse> TriggerAlarmAsync(string service, string stage, AlarmCreate alarmCreate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Triggeralarm
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmCreate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AlarmResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlarmResponse>> TriggerAlarmWithHttpInfoAsync(string service, string stage, AlarmCreate alarmCreate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMonitorApi : IMonitorApiSync, IMonitorApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MonitorApi : IMonitorApi
    {
        private Ehelply.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MonitorApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MonitorApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MonitorApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MonitorApi(string basePath)
        {
            this.Configuration = Ehelply.Sdk.Client.Configuration.MergeConfigurations(
                Ehelply.Sdk.Client.GlobalConfiguration.Instance,
                new Ehelply.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Ehelply.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Ehelply.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Ehelply.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MonitorApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MonitorApi(Ehelply.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Ehelply.Sdk.Client.Configuration.MergeConfigurations(
                Ehelply.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Ehelply.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Ehelply.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Ehelply.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MonitorApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MonitorApi(Ehelply.Sdk.Client.ISynchronousClient client, Ehelply.Sdk.Client.IAsynchronousClient asyncClient, Ehelply.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Ehelply.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Ehelply.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Ehelply.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Ehelply.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Ehelply.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Acknowledgealarm 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="alarmAcknowledge"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AlarmResponse</returns>
        public AlarmResponse AcknowledgeAlarm(string service, string stage, string alarmUuid, AlarmAcknowledge alarmAcknowledge, int operationIndex = 0)
        {
            Ehelply.Sdk.Client.ApiResponse<AlarmResponse> localVarResponse = AcknowledgeAlarmWithHttpInfo(service, stage, alarmUuid, alarmAcknowledge);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Acknowledgealarm 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="alarmAcknowledge"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AlarmResponse</returns>
        public Ehelply.Sdk.Client.ApiResponse<AlarmResponse> AcknowledgeAlarmWithHttpInfo(string service, string stage, string alarmUuid, AlarmAcknowledge alarmAcknowledge, int operationIndex = 0)
        {
            // verify the required parameter 'service' is set
            if (service == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->AcknowledgeAlarm");
            }

            // verify the required parameter 'stage' is set
            if (stage == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'stage' when calling MonitorApi->AcknowledgeAlarm");
            }

            // verify the required parameter 'alarmUuid' is set
            if (alarmUuid == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'alarmUuid' when calling MonitorApi->AcknowledgeAlarm");
            }

            // verify the required parameter 'alarmAcknowledge' is set
            if (alarmAcknowledge == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'alarmAcknowledge' when calling MonitorApi->AcknowledgeAlarm");
            }

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("stage", Ehelply.Sdk.Client.ClientUtils.ParameterToString(stage)); // path parameter
            localVarRequestOptions.PathParameters.Add("alarm_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(alarmUuid)); // path parameter
            localVarRequestOptions.Data = alarmAcknowledge;

            localVarRequestOptions.Operation = "MonitorApi.AcknowledgeAlarm";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<AlarmResponse>("/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}/acknowledge", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AcknowledgeAlarm", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Acknowledgealarm 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="alarmAcknowledge"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AlarmResponse</returns>
        public async System.Threading.Tasks.Task<AlarmResponse> AcknowledgeAlarmAsync(string service, string stage, string alarmUuid, AlarmAcknowledge alarmAcknowledge, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<AlarmResponse> localVarResponse = await AcknowledgeAlarmWithHttpInfoAsync(service, stage, alarmUuid, alarmAcknowledge, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Acknowledgealarm 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="alarmAcknowledge"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AlarmResponse)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<AlarmResponse>> AcknowledgeAlarmWithHttpInfoAsync(string service, string stage, string alarmUuid, AlarmAcknowledge alarmAcknowledge, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'service' is set
            if (service == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->AcknowledgeAlarm");
            }

            // verify the required parameter 'stage' is set
            if (stage == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'stage' when calling MonitorApi->AcknowledgeAlarm");
            }

            // verify the required parameter 'alarmUuid' is set
            if (alarmUuid == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'alarmUuid' when calling MonitorApi->AcknowledgeAlarm");
            }

            // verify the required parameter 'alarmAcknowledge' is set
            if (alarmAcknowledge == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'alarmAcknowledge' when calling MonitorApi->AcknowledgeAlarm");
            }


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("stage", Ehelply.Sdk.Client.ClientUtils.ParameterToString(stage)); // path parameter
            localVarRequestOptions.PathParameters.Add("alarm_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(alarmUuid)); // path parameter
            localVarRequestOptions.Data = alarmAcknowledge;

            localVarRequestOptions.Operation = "MonitorApi.AcknowledgeAlarm";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AlarmResponse>("/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}/acknowledge", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AcknowledgeAlarm", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assignalarm 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="alarmAssign"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AlarmResponse</returns>
        public AlarmResponse AssignAlarm(string service, string stage, string alarmUuid, AlarmAssign alarmAssign, int operationIndex = 0)
        {
            Ehelply.Sdk.Client.ApiResponse<AlarmResponse> localVarResponse = AssignAlarmWithHttpInfo(service, stage, alarmUuid, alarmAssign);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Assignalarm 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="alarmAssign"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AlarmResponse</returns>
        public Ehelply.Sdk.Client.ApiResponse<AlarmResponse> AssignAlarmWithHttpInfo(string service, string stage, string alarmUuid, AlarmAssign alarmAssign, int operationIndex = 0)
        {
            // verify the required parameter 'service' is set
            if (service == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->AssignAlarm");
            }

            // verify the required parameter 'stage' is set
            if (stage == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'stage' when calling MonitorApi->AssignAlarm");
            }

            // verify the required parameter 'alarmUuid' is set
            if (alarmUuid == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'alarmUuid' when calling MonitorApi->AssignAlarm");
            }

            // verify the required parameter 'alarmAssign' is set
            if (alarmAssign == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'alarmAssign' when calling MonitorApi->AssignAlarm");
            }

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("stage", Ehelply.Sdk.Client.ClientUtils.ParameterToString(stage)); // path parameter
            localVarRequestOptions.PathParameters.Add("alarm_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(alarmUuid)); // path parameter
            localVarRequestOptions.Data = alarmAssign;

            localVarRequestOptions.Operation = "MonitorApi.AssignAlarm";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<AlarmResponse>("/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}/assign", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssignAlarm", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assignalarm 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="alarmAssign"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AlarmResponse</returns>
        public async System.Threading.Tasks.Task<AlarmResponse> AssignAlarmAsync(string service, string stage, string alarmUuid, AlarmAssign alarmAssign, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<AlarmResponse> localVarResponse = await AssignAlarmWithHttpInfoAsync(service, stage, alarmUuid, alarmAssign, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Assignalarm 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="alarmAssign"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AlarmResponse)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<AlarmResponse>> AssignAlarmWithHttpInfoAsync(string service, string stage, string alarmUuid, AlarmAssign alarmAssign, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'service' is set
            if (service == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->AssignAlarm");
            }

            // verify the required parameter 'stage' is set
            if (stage == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'stage' when calling MonitorApi->AssignAlarm");
            }

            // verify the required parameter 'alarmUuid' is set
            if (alarmUuid == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'alarmUuid' when calling MonitorApi->AssignAlarm");
            }

            // verify the required parameter 'alarmAssign' is set
            if (alarmAssign == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'alarmAssign' when calling MonitorApi->AssignAlarm");
            }


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("stage", Ehelply.Sdk.Client.ClientUtils.ParameterToString(stage)); // path parameter
            localVarRequestOptions.PathParameters.Add("alarm_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(alarmUuid)); // path parameter
            localVarRequestOptions.Data = alarmAssign;

            localVarRequestOptions.Operation = "MonitorApi.AssignAlarm";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AlarmResponse>("/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}/assign", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssignAlarm", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Attachalarmnote 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="alarmNote"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AlarmResponse</returns>
        public AlarmResponse AttachAlarmNote(string service, string stage, string alarmUuid, AlarmNote alarmNote, int operationIndex = 0)
        {
            Ehelply.Sdk.Client.ApiResponse<AlarmResponse> localVarResponse = AttachAlarmNoteWithHttpInfo(service, stage, alarmUuid, alarmNote);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Attachalarmnote 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="alarmNote"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AlarmResponse</returns>
        public Ehelply.Sdk.Client.ApiResponse<AlarmResponse> AttachAlarmNoteWithHttpInfo(string service, string stage, string alarmUuid, AlarmNote alarmNote, int operationIndex = 0)
        {
            // verify the required parameter 'service' is set
            if (service == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->AttachAlarmNote");
            }

            // verify the required parameter 'stage' is set
            if (stage == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'stage' when calling MonitorApi->AttachAlarmNote");
            }

            // verify the required parameter 'alarmUuid' is set
            if (alarmUuid == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'alarmUuid' when calling MonitorApi->AttachAlarmNote");
            }

            // verify the required parameter 'alarmNote' is set
            if (alarmNote == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'alarmNote' when calling MonitorApi->AttachAlarmNote");
            }

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("stage", Ehelply.Sdk.Client.ClientUtils.ParameterToString(stage)); // path parameter
            localVarRequestOptions.PathParameters.Add("alarm_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(alarmUuid)); // path parameter
            localVarRequestOptions.Data = alarmNote;

            localVarRequestOptions.Operation = "MonitorApi.AttachAlarmNote";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<AlarmResponse>("/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}/note", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AttachAlarmNote", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Attachalarmnote 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="alarmNote"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AlarmResponse</returns>
        public async System.Threading.Tasks.Task<AlarmResponse> AttachAlarmNoteAsync(string service, string stage, string alarmUuid, AlarmNote alarmNote, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<AlarmResponse> localVarResponse = await AttachAlarmNoteWithHttpInfoAsync(service, stage, alarmUuid, alarmNote, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Attachalarmnote 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="alarmNote"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AlarmResponse)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<AlarmResponse>> AttachAlarmNoteWithHttpInfoAsync(string service, string stage, string alarmUuid, AlarmNote alarmNote, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'service' is set
            if (service == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->AttachAlarmNote");
            }

            // verify the required parameter 'stage' is set
            if (stage == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'stage' when calling MonitorApi->AttachAlarmNote");
            }

            // verify the required parameter 'alarmUuid' is set
            if (alarmUuid == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'alarmUuid' when calling MonitorApi->AttachAlarmNote");
            }

            // verify the required parameter 'alarmNote' is set
            if (alarmNote == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'alarmNote' when calling MonitorApi->AttachAlarmNote");
            }


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("stage", Ehelply.Sdk.Client.ClientUtils.ParameterToString(stage)); // path parameter
            localVarRequestOptions.PathParameters.Add("alarm_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(alarmUuid)); // path parameter
            localVarRequestOptions.Data = alarmNote;

            localVarRequestOptions.Operation = "MonitorApi.AttachAlarmNote";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AlarmResponse>("/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}/note", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AttachAlarmNote", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Attachalarmticket 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="alarmTicket"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AlarmResponse</returns>
        public AlarmResponse AttachAlarmTicket(string service, string stage, string alarmUuid, AlarmTicket alarmTicket, int operationIndex = 0)
        {
            Ehelply.Sdk.Client.ApiResponse<AlarmResponse> localVarResponse = AttachAlarmTicketWithHttpInfo(service, stage, alarmUuid, alarmTicket);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Attachalarmticket 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="alarmTicket"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AlarmResponse</returns>
        public Ehelply.Sdk.Client.ApiResponse<AlarmResponse> AttachAlarmTicketWithHttpInfo(string service, string stage, string alarmUuid, AlarmTicket alarmTicket, int operationIndex = 0)
        {
            // verify the required parameter 'service' is set
            if (service == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->AttachAlarmTicket");
            }

            // verify the required parameter 'stage' is set
            if (stage == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'stage' when calling MonitorApi->AttachAlarmTicket");
            }

            // verify the required parameter 'alarmUuid' is set
            if (alarmUuid == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'alarmUuid' when calling MonitorApi->AttachAlarmTicket");
            }

            // verify the required parameter 'alarmTicket' is set
            if (alarmTicket == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'alarmTicket' when calling MonitorApi->AttachAlarmTicket");
            }

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("stage", Ehelply.Sdk.Client.ClientUtils.ParameterToString(stage)); // path parameter
            localVarRequestOptions.PathParameters.Add("alarm_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(alarmUuid)); // path parameter
            localVarRequestOptions.Data = alarmTicket;

            localVarRequestOptions.Operation = "MonitorApi.AttachAlarmTicket";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<AlarmResponse>("/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}/ticket", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AttachAlarmTicket", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Attachalarmticket 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="alarmTicket"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AlarmResponse</returns>
        public async System.Threading.Tasks.Task<AlarmResponse> AttachAlarmTicketAsync(string service, string stage, string alarmUuid, AlarmTicket alarmTicket, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<AlarmResponse> localVarResponse = await AttachAlarmTicketWithHttpInfoAsync(service, stage, alarmUuid, alarmTicket, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Attachalarmticket 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="alarmTicket"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AlarmResponse)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<AlarmResponse>> AttachAlarmTicketWithHttpInfoAsync(string service, string stage, string alarmUuid, AlarmTicket alarmTicket, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'service' is set
            if (service == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->AttachAlarmTicket");
            }

            // verify the required parameter 'stage' is set
            if (stage == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'stage' when calling MonitorApi->AttachAlarmTicket");
            }

            // verify the required parameter 'alarmUuid' is set
            if (alarmUuid == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'alarmUuid' when calling MonitorApi->AttachAlarmTicket");
            }

            // verify the required parameter 'alarmTicket' is set
            if (alarmTicket == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'alarmTicket' when calling MonitorApi->AttachAlarmTicket");
            }


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("stage", Ehelply.Sdk.Client.ClientUtils.ParameterToString(stage)); // path parameter
            localVarRequestOptions.PathParameters.Add("alarm_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(alarmUuid)); // path parameter
            localVarRequestOptions.Data = alarmTicket;

            localVarRequestOptions.Operation = "MonitorApi.AttachAlarmTicket";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AlarmResponse>("/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}/ticket", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AttachAlarmTicket", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Clearalarm 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AlarmResponse</returns>
        public AlarmResponse ClearAlarm(string service, string stage, string alarmUuid, int operationIndex = 0)
        {
            Ehelply.Sdk.Client.ApiResponse<AlarmResponse> localVarResponse = ClearAlarmWithHttpInfo(service, stage, alarmUuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Clearalarm 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AlarmResponse</returns>
        public Ehelply.Sdk.Client.ApiResponse<AlarmResponse> ClearAlarmWithHttpInfo(string service, string stage, string alarmUuid, int operationIndex = 0)
        {
            // verify the required parameter 'service' is set
            if (service == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->ClearAlarm");
            }

            // verify the required parameter 'stage' is set
            if (stage == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'stage' when calling MonitorApi->ClearAlarm");
            }

            // verify the required parameter 'alarmUuid' is set
            if (alarmUuid == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'alarmUuid' when calling MonitorApi->ClearAlarm");
            }

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("stage", Ehelply.Sdk.Client.ClientUtils.ParameterToString(stage)); // path parameter
            localVarRequestOptions.PathParameters.Add("alarm_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(alarmUuid)); // path parameter

            localVarRequestOptions.Operation = "MonitorApi.ClearAlarm";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<AlarmResponse>("/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}/clear", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClearAlarm", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Clearalarm 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AlarmResponse</returns>
        public async System.Threading.Tasks.Task<AlarmResponse> ClearAlarmAsync(string service, string stage, string alarmUuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<AlarmResponse> localVarResponse = await ClearAlarmWithHttpInfoAsync(service, stage, alarmUuid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Clearalarm 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AlarmResponse)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<AlarmResponse>> ClearAlarmWithHttpInfoAsync(string service, string stage, string alarmUuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'service' is set
            if (service == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->ClearAlarm");
            }

            // verify the required parameter 'stage' is set
            if (stage == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'stage' when calling MonitorApi->ClearAlarm");
            }

            // verify the required parameter 'alarmUuid' is set
            if (alarmUuid == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'alarmUuid' when calling MonitorApi->ClearAlarm");
            }


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("stage", Ehelply.Sdk.Client.ClientUtils.ParameterToString(stage)); // path parameter
            localVarRequestOptions.PathParameters.Add("alarm_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(alarmUuid)); // path parameter

            localVarRequestOptions.Operation = "MonitorApi.ClearAlarm";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AlarmResponse>("/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}/clear", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClearAlarm", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getservice 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="heartbeats"> (optional, default to false)</param>
        /// <param name="heartbeatLimit"> (optional, default to 5)</param>
        /// <param name="alarms"> (optional, default to false)</param>
        /// <param name="alarmLimit"> (optional, default to 5)</param>
        /// <param name="stage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceResponse</returns>
        public ServiceResponse GetService(string service, bool? heartbeats = default(bool?), int? heartbeatLimit = default(int?), bool? alarms = default(bool?), int? alarmLimit = default(int?), string stage = default(string), int operationIndex = 0)
        {
            Ehelply.Sdk.Client.ApiResponse<ServiceResponse> localVarResponse = GetServiceWithHttpInfo(service, heartbeats, heartbeatLimit, alarms, alarmLimit, stage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Getservice 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="heartbeats"> (optional, default to false)</param>
        /// <param name="heartbeatLimit"> (optional, default to 5)</param>
        /// <param name="alarms"> (optional, default to false)</param>
        /// <param name="alarmLimit"> (optional, default to 5)</param>
        /// <param name="stage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceResponse</returns>
        public Ehelply.Sdk.Client.ApiResponse<ServiceResponse> GetServiceWithHttpInfo(string service, bool? heartbeats = default(bool?), int? heartbeatLimit = default(int?), bool? alarms = default(bool?), int? alarmLimit = default(int?), string stage = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'service' is set
            if (service == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->GetService");
            }

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            if (heartbeats != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "heartbeats", heartbeats));
            }
            if (heartbeatLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "heartbeat_limit", heartbeatLimit));
            }
            if (alarms != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "alarms", alarms));
            }
            if (alarmLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "alarm_limit", alarmLimit));
            }
            if (stage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "stage", stage));
            }

            localVarRequestOptions.Operation = "MonitorApi.GetService";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ServiceResponse>("/sam/monitor/services/{service}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetService", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getservice 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="heartbeats"> (optional, default to false)</param>
        /// <param name="heartbeatLimit"> (optional, default to 5)</param>
        /// <param name="alarms"> (optional, default to false)</param>
        /// <param name="alarmLimit"> (optional, default to 5)</param>
        /// <param name="stage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceResponse</returns>
        public async System.Threading.Tasks.Task<ServiceResponse> GetServiceAsync(string service, bool? heartbeats = default(bool?), int? heartbeatLimit = default(int?), bool? alarms = default(bool?), int? alarmLimit = default(int?), string stage = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<ServiceResponse> localVarResponse = await GetServiceWithHttpInfoAsync(service, heartbeats, heartbeatLimit, alarms, alarmLimit, stage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Getservice 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="heartbeats"> (optional, default to false)</param>
        /// <param name="heartbeatLimit"> (optional, default to 5)</param>
        /// <param name="alarms"> (optional, default to false)</param>
        /// <param name="alarmLimit"> (optional, default to 5)</param>
        /// <param name="stage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceResponse)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<ServiceResponse>> GetServiceWithHttpInfoAsync(string service, bool? heartbeats = default(bool?), int? heartbeatLimit = default(int?), bool? alarms = default(bool?), int? alarmLimit = default(int?), string stage = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'service' is set
            if (service == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->GetService");
            }


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            if (heartbeats != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "heartbeats", heartbeats));
            }
            if (heartbeatLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "heartbeat_limit", heartbeatLimit));
            }
            if (alarms != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "alarms", alarms));
            }
            if (alarmLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "alarm_limit", alarmLimit));
            }
            if (stage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "stage", stage));
            }

            localVarRequestOptions.Operation = "MonitorApi.GetService";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ServiceResponse>("/sam/monitor/services/{service}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetService", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getservicealarm 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AlarmResponse</returns>
        public AlarmResponse GetServiceAlarm(string service, string stage, string alarmUuid, int operationIndex = 0)
        {
            Ehelply.Sdk.Client.ApiResponse<AlarmResponse> localVarResponse = GetServiceAlarmWithHttpInfo(service, stage, alarmUuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Getservicealarm 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AlarmResponse</returns>
        public Ehelply.Sdk.Client.ApiResponse<AlarmResponse> GetServiceAlarmWithHttpInfo(string service, string stage, string alarmUuid, int operationIndex = 0)
        {
            // verify the required parameter 'service' is set
            if (service == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->GetServiceAlarm");
            }

            // verify the required parameter 'stage' is set
            if (stage == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'stage' when calling MonitorApi->GetServiceAlarm");
            }

            // verify the required parameter 'alarmUuid' is set
            if (alarmUuid == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'alarmUuid' when calling MonitorApi->GetServiceAlarm");
            }

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("stage", Ehelply.Sdk.Client.ClientUtils.ParameterToString(stage)); // path parameter
            localVarRequestOptions.PathParameters.Add("alarm_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(alarmUuid)); // path parameter

            localVarRequestOptions.Operation = "MonitorApi.GetServiceAlarm";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<AlarmResponse>("/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServiceAlarm", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getservicealarm 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AlarmResponse</returns>
        public async System.Threading.Tasks.Task<AlarmResponse> GetServiceAlarmAsync(string service, string stage, string alarmUuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<AlarmResponse> localVarResponse = await GetServiceAlarmWithHttpInfoAsync(service, stage, alarmUuid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Getservicealarm 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AlarmResponse)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<AlarmResponse>> GetServiceAlarmWithHttpInfoAsync(string service, string stage, string alarmUuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'service' is set
            if (service == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->GetServiceAlarm");
            }

            // verify the required parameter 'stage' is set
            if (stage == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'stage' when calling MonitorApi->GetServiceAlarm");
            }

            // verify the required parameter 'alarmUuid' is set
            if (alarmUuid == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'alarmUuid' when calling MonitorApi->GetServiceAlarm");
            }


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("stage", Ehelply.Sdk.Client.ClientUtils.ParameterToString(stage)); // path parameter
            localVarRequestOptions.PathParameters.Add("alarm_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(alarmUuid)); // path parameter

            localVarRequestOptions.Operation = "MonitorApi.GetServiceAlarm";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AlarmResponse>("/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServiceAlarm", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getservicealarms 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <param name="includeTerminated"> (optional, default to false)</param>
        /// <param name="includeCleared"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AlarmResponse&gt;</returns>
        public List<AlarmResponse> GetServiceAlarms(string service, string stage, int? history = default(int?), bool? includeTerminated = default(bool?), bool? includeCleared = default(bool?), int operationIndex = 0)
        {
            Ehelply.Sdk.Client.ApiResponse<List<AlarmResponse>> localVarResponse = GetServiceAlarmsWithHttpInfo(service, stage, history, includeTerminated, includeCleared);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Getservicealarms 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <param name="includeTerminated"> (optional, default to false)</param>
        /// <param name="includeCleared"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AlarmResponse&gt;</returns>
        public Ehelply.Sdk.Client.ApiResponse<List<AlarmResponse>> GetServiceAlarmsWithHttpInfo(string service, string stage, int? history = default(int?), bool? includeTerminated = default(bool?), bool? includeCleared = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'service' is set
            if (service == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->GetServiceAlarms");
            }

            // verify the required parameter 'stage' is set
            if (stage == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'stage' when calling MonitorApi->GetServiceAlarms");
            }

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("stage", Ehelply.Sdk.Client.ClientUtils.ParameterToString(stage)); // path parameter
            if (history != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "history", history));
            }
            if (includeTerminated != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "include_terminated", includeTerminated));
            }
            if (includeCleared != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "include_cleared", includeCleared));
            }

            localVarRequestOptions.Operation = "MonitorApi.GetServiceAlarms";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<AlarmResponse>>("/sam/monitor/services/{service}/stages/{stage}/alarms", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServiceAlarms", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getservicealarms 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <param name="includeTerminated"> (optional, default to false)</param>
        /// <param name="includeCleared"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AlarmResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<AlarmResponse>> GetServiceAlarmsAsync(string service, string stage, int? history = default(int?), bool? includeTerminated = default(bool?), bool? includeCleared = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<List<AlarmResponse>> localVarResponse = await GetServiceAlarmsWithHttpInfoAsync(service, stage, history, includeTerminated, includeCleared, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Getservicealarms 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <param name="includeTerminated"> (optional, default to false)</param>
        /// <param name="includeCleared"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AlarmResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<List<AlarmResponse>>> GetServiceAlarmsWithHttpInfoAsync(string service, string stage, int? history = default(int?), bool? includeTerminated = default(bool?), bool? includeCleared = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'service' is set
            if (service == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->GetServiceAlarms");
            }

            // verify the required parameter 'stage' is set
            if (stage == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'stage' when calling MonitorApi->GetServiceAlarms");
            }


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("stage", Ehelply.Sdk.Client.ClientUtils.ParameterToString(stage)); // path parameter
            if (history != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "history", history));
            }
            if (includeTerminated != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "include_terminated", includeTerminated));
            }
            if (includeCleared != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "include_cleared", includeCleared));
            }

            localVarRequestOptions.Operation = "MonitorApi.GetServiceAlarms";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<AlarmResponse>>("/sam/monitor/services/{service}/stages/{stage}/alarms", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServiceAlarms", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getserviceheartbeat 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;HeartbeatResponse&gt;</returns>
        public List<HeartbeatResponse> GetServiceHeartbeat(string service, string stage, int? history = default(int?), int operationIndex = 0)
        {
            Ehelply.Sdk.Client.ApiResponse<List<HeartbeatResponse>> localVarResponse = GetServiceHeartbeatWithHttpInfo(service, stage, history);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Getserviceheartbeat 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;HeartbeatResponse&gt;</returns>
        public Ehelply.Sdk.Client.ApiResponse<List<HeartbeatResponse>> GetServiceHeartbeatWithHttpInfo(string service, string stage, int? history = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'service' is set
            if (service == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->GetServiceHeartbeat");
            }

            // verify the required parameter 'stage' is set
            if (stage == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'stage' when calling MonitorApi->GetServiceHeartbeat");
            }

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("stage", Ehelply.Sdk.Client.ClientUtils.ParameterToString(stage)); // path parameter
            if (history != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "history", history));
            }

            localVarRequestOptions.Operation = "MonitorApi.GetServiceHeartbeat";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<HeartbeatResponse>>("/sam/monitor/services/{service}/stages/{stage}/heartbeats", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServiceHeartbeat", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getserviceheartbeat 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;HeartbeatResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<HeartbeatResponse>> GetServiceHeartbeatAsync(string service, string stage, int? history = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<List<HeartbeatResponse>> localVarResponse = await GetServiceHeartbeatWithHttpInfoAsync(service, stage, history, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Getserviceheartbeat 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;HeartbeatResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<List<HeartbeatResponse>>> GetServiceHeartbeatWithHttpInfoAsync(string service, string stage, int? history = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'service' is set
            if (service == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->GetServiceHeartbeat");
            }

            // verify the required parameter 'stage' is set
            if (stage == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'stage' when calling MonitorApi->GetServiceHeartbeat");
            }


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("stage", Ehelply.Sdk.Client.ClientUtils.ParameterToString(stage)); // path parameter
            if (history != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "history", history));
            }

            localVarRequestOptions.Operation = "MonitorApi.GetServiceHeartbeat";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<HeartbeatResponse>>("/sam/monitor/services/{service}/stages/{stage}/heartbeats", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServiceHeartbeat", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getservicekpis 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;KpiResponse&gt;</returns>
        public List<KpiResponse> GetServiceKpis(string service, int? history = default(int?), int operationIndex = 0)
        {
            Ehelply.Sdk.Client.ApiResponse<List<KpiResponse>> localVarResponse = GetServiceKpisWithHttpInfo(service, history);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Getservicekpis 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;KpiResponse&gt;</returns>
        public Ehelply.Sdk.Client.ApiResponse<List<KpiResponse>> GetServiceKpisWithHttpInfo(string service, int? history = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'service' is set
            if (service == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->GetServiceKpis");
            }

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            if (history != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "history", history));
            }

            localVarRequestOptions.Operation = "MonitorApi.GetServiceKpis";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<KpiResponse>>("/sam/monitor/services/{service}/kpis", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServiceKpis", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getservicekpis 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;KpiResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<KpiResponse>> GetServiceKpisAsync(string service, int? history = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<List<KpiResponse>> localVarResponse = await GetServiceKpisWithHttpInfoAsync(service, history, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Getservicekpis 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;KpiResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<List<KpiResponse>>> GetServiceKpisWithHttpInfoAsync(string service, int? history = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'service' is set
            if (service == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->GetServiceKpis");
            }


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            if (history != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "history", history));
            }

            localVarRequestOptions.Operation = "MonitorApi.GetServiceKpis";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<KpiResponse>>("/sam/monitor/services/{service}/kpis", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServiceKpis", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getservicespec 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="spec"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetServiceSpecResponse</returns>
        public GetServiceSpecResponse GetServiceSpec(string service, string spec, int operationIndex = 0)
        {
            Ehelply.Sdk.Client.ApiResponse<GetServiceSpecResponse> localVarResponse = GetServiceSpecWithHttpInfo(service, spec);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Getservicespec 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="spec"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetServiceSpecResponse</returns>
        public Ehelply.Sdk.Client.ApiResponse<GetServiceSpecResponse> GetServiceSpecWithHttpInfo(string service, string spec, int operationIndex = 0)
        {
            // verify the required parameter 'service' is set
            if (service == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->GetServiceSpec");
            }

            // verify the required parameter 'spec' is set
            if (spec == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'spec' when calling MonitorApi->GetServiceSpec");
            }

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("spec", Ehelply.Sdk.Client.ClientUtils.ParameterToString(spec)); // path parameter

            localVarRequestOptions.Operation = "MonitorApi.GetServiceSpec";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetServiceSpecResponse>("/sam/monitor/services/{service}/specs/{spec}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServiceSpec", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getservicespec 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="spec"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetServiceSpecResponse</returns>
        public async System.Threading.Tasks.Task<GetServiceSpecResponse> GetServiceSpecAsync(string service, string spec, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<GetServiceSpecResponse> localVarResponse = await GetServiceSpecWithHttpInfoAsync(service, spec, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Getservicespec 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="spec"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetServiceSpecResponse)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<GetServiceSpecResponse>> GetServiceSpecWithHttpInfoAsync(string service, string spec, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'service' is set
            if (service == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->GetServiceSpec");
            }

            // verify the required parameter 'spec' is set
            if (spec == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'spec' when calling MonitorApi->GetServiceSpec");
            }


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("spec", Ehelply.Sdk.Client.ClientUtils.ParameterToString(spec)); // path parameter

            localVarRequestOptions.Operation = "MonitorApi.GetServiceSpec";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetServiceSpecResponse>("/sam/monitor/services/{service}/specs/{spec}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServiceSpec", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getservicespecs 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetServiceSpecsResponse</returns>
        public GetServiceSpecsResponse GetServiceSpecs(string service, int operationIndex = 0)
        {
            Ehelply.Sdk.Client.ApiResponse<GetServiceSpecsResponse> localVarResponse = GetServiceSpecsWithHttpInfo(service);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Getservicespecs 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetServiceSpecsResponse</returns>
        public Ehelply.Sdk.Client.ApiResponse<GetServiceSpecsResponse> GetServiceSpecsWithHttpInfo(string service, int operationIndex = 0)
        {
            // verify the required parameter 'service' is set
            if (service == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->GetServiceSpecs");
            }

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter

            localVarRequestOptions.Operation = "MonitorApi.GetServiceSpecs";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetServiceSpecsResponse>("/sam/monitor/services/{service}/specs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServiceSpecs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getservicespecs 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetServiceSpecsResponse</returns>
        public async System.Threading.Tasks.Task<GetServiceSpecsResponse> GetServiceSpecsAsync(string service, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<GetServiceSpecsResponse> localVarResponse = await GetServiceSpecsWithHttpInfoAsync(service, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Getservicespecs 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetServiceSpecsResponse)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<GetServiceSpecsResponse>> GetServiceSpecsWithHttpInfoAsync(string service, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'service' is set
            if (service == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->GetServiceSpecs");
            }


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter

            localVarRequestOptions.Operation = "MonitorApi.GetServiceSpecs";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetServiceSpecsResponse>("/sam/monitor/services/{service}/specs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServiceSpecs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getservicevitals 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;StatsVitalsResponse&gt;</returns>
        public List<StatsVitalsResponse> GetServiceVitals(string service, string stage, int? history = default(int?), int operationIndex = 0)
        {
            Ehelply.Sdk.Client.ApiResponse<List<StatsVitalsResponse>> localVarResponse = GetServiceVitalsWithHttpInfo(service, stage, history);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Getservicevitals 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;StatsVitalsResponse&gt;</returns>
        public Ehelply.Sdk.Client.ApiResponse<List<StatsVitalsResponse>> GetServiceVitalsWithHttpInfo(string service, string stage, int? history = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'service' is set
            if (service == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->GetServiceVitals");
            }

            // verify the required parameter 'stage' is set
            if (stage == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'stage' when calling MonitorApi->GetServiceVitals");
            }

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("stage", Ehelply.Sdk.Client.ClientUtils.ParameterToString(stage)); // path parameter
            if (history != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "history", history));
            }

            localVarRequestOptions.Operation = "MonitorApi.GetServiceVitals";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<StatsVitalsResponse>>("/sam/monitor/services/{service}/stages/{stage}/vitals", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServiceVitals", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getservicevitals 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;StatsVitalsResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<StatsVitalsResponse>> GetServiceVitalsAsync(string service, string stage, int? history = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<List<StatsVitalsResponse>> localVarResponse = await GetServiceVitalsWithHttpInfoAsync(service, stage, history, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Getservicevitals 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="history"> (optional, default to 5)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;StatsVitalsResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<List<StatsVitalsResponse>>> GetServiceVitalsWithHttpInfoAsync(string service, string stage, int? history = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'service' is set
            if (service == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->GetServiceVitals");
            }

            // verify the required parameter 'stage' is set
            if (stage == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'stage' when calling MonitorApi->GetServiceVitals");
            }


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("stage", Ehelply.Sdk.Client.ClientUtils.ParameterToString(stage)); // path parameter
            if (history != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "history", history));
            }

            localVarRequestOptions.Operation = "MonitorApi.GetServiceVitals";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<StatsVitalsResponse>>("/sam/monitor/services/{service}/stages/{stage}/vitals", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServiceVitals", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getservices 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="heartbeats"> (optional, default to false)</param>
        /// <param name="heartbeatLimit"> (optional, default to 5)</param>
        /// <param name="alarms"> (optional, default to false)</param>
        /// <param name="alarmLimit"> (optional, default to 5)</param>
        /// <param name="includeHidden"> (optional, default to false)</param>
        /// <param name="stage"> (optional)</param>
        /// <param name="key"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ServiceResponse&gt;</returns>
        public List<ServiceResponse> GetServices(bool? heartbeats = default(bool?), int? heartbeatLimit = default(int?), bool? alarms = default(bool?), int? alarmLimit = default(int?), bool? includeHidden = default(bool?), string stage = default(string), string key = default(string), int operationIndex = 0)
        {
            Ehelply.Sdk.Client.ApiResponse<List<ServiceResponse>> localVarResponse = GetServicesWithHttpInfo(heartbeats, heartbeatLimit, alarms, alarmLimit, includeHidden, stage, key);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Getservices 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="heartbeats"> (optional, default to false)</param>
        /// <param name="heartbeatLimit"> (optional, default to 5)</param>
        /// <param name="alarms"> (optional, default to false)</param>
        /// <param name="alarmLimit"> (optional, default to 5)</param>
        /// <param name="includeHidden"> (optional, default to false)</param>
        /// <param name="stage"> (optional)</param>
        /// <param name="key"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ServiceResponse&gt;</returns>
        public Ehelply.Sdk.Client.ApiResponse<List<ServiceResponse>> GetServicesWithHttpInfo(bool? heartbeats = default(bool?), int? heartbeatLimit = default(int?), bool? alarms = default(bool?), int? alarmLimit = default(int?), bool? includeHidden = default(bool?), string stage = default(string), string key = default(string), int operationIndex = 0)
        {
            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (heartbeats != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "heartbeats", heartbeats));
            }
            if (heartbeatLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "heartbeat_limit", heartbeatLimit));
            }
            if (alarms != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "alarms", alarms));
            }
            if (alarmLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "alarm_limit", alarmLimit));
            }
            if (includeHidden != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "include_hidden", includeHidden));
            }
            if (stage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "stage", stage));
            }
            if (key != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "key", key));
            }

            localVarRequestOptions.Operation = "MonitorApi.GetServices";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ServiceResponse>>("/sam/monitor/services", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServices", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getservices 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="heartbeats"> (optional, default to false)</param>
        /// <param name="heartbeatLimit"> (optional, default to 5)</param>
        /// <param name="alarms"> (optional, default to false)</param>
        /// <param name="alarmLimit"> (optional, default to 5)</param>
        /// <param name="includeHidden"> (optional, default to false)</param>
        /// <param name="stage"> (optional)</param>
        /// <param name="key"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ServiceResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<ServiceResponse>> GetServicesAsync(bool? heartbeats = default(bool?), int? heartbeatLimit = default(int?), bool? alarms = default(bool?), int? alarmLimit = default(int?), bool? includeHidden = default(bool?), string stage = default(string), string key = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<List<ServiceResponse>> localVarResponse = await GetServicesWithHttpInfoAsync(heartbeats, heartbeatLimit, alarms, alarmLimit, includeHidden, stage, key, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Getservices 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="heartbeats"> (optional, default to false)</param>
        /// <param name="heartbeatLimit"> (optional, default to 5)</param>
        /// <param name="alarms"> (optional, default to false)</param>
        /// <param name="alarmLimit"> (optional, default to 5)</param>
        /// <param name="includeHidden"> (optional, default to false)</param>
        /// <param name="stage"> (optional)</param>
        /// <param name="key"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ServiceResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<List<ServiceResponse>>> GetServicesWithHttpInfoAsync(bool? heartbeats = default(bool?), int? heartbeatLimit = default(int?), bool? alarms = default(bool?), int? alarmLimit = default(int?), bool? includeHidden = default(bool?), string stage = default(string), string key = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (heartbeats != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "heartbeats", heartbeats));
            }
            if (heartbeatLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "heartbeat_limit", heartbeatLimit));
            }
            if (alarms != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "alarms", alarms));
            }
            if (alarmLimit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "alarm_limit", alarmLimit));
            }
            if (includeHidden != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "include_hidden", includeHidden));
            }
            if (stage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "stage", stage));
            }
            if (key != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "key", key));
            }

            localVarRequestOptions.Operation = "MonitorApi.GetServices";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ServiceResponse>>("/sam/monitor/services", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServices", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getserviceswithspecs 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetServiceServiceWithSpecsResponse</returns>
        public GetServiceServiceWithSpecsResponse GetServicesWithSpecs(int operationIndex = 0)
        {
            Ehelply.Sdk.Client.ApiResponse<GetServiceServiceWithSpecsResponse> localVarResponse = GetServicesWithSpecsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Getserviceswithspecs 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetServiceServiceWithSpecsResponse</returns>
        public Ehelply.Sdk.Client.ApiResponse<GetServiceServiceWithSpecsResponse> GetServicesWithSpecsWithHttpInfo(int operationIndex = 0)
        {
            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "MonitorApi.GetServicesWithSpecs";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetServiceServiceWithSpecsResponse>("/sam/monitor/specs/services", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServicesWithSpecs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getserviceswithspecs 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetServiceServiceWithSpecsResponse</returns>
        public async System.Threading.Tasks.Task<GetServiceServiceWithSpecsResponse> GetServicesWithSpecsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<GetServiceServiceWithSpecsResponse> localVarResponse = await GetServicesWithSpecsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Getserviceswithspecs 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetServiceServiceWithSpecsResponse)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<GetServiceServiceWithSpecsResponse>> GetServicesWithSpecsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "MonitorApi.GetServicesWithSpecs";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetServiceServiceWithSpecsResponse>("/sam/monitor/specs/services", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetServicesWithSpecs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Hideservice 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceMessageResponse</returns>
        public ServiceMessageResponse HideService(string service, string stage, int operationIndex = 0)
        {
            Ehelply.Sdk.Client.ApiResponse<ServiceMessageResponse> localVarResponse = HideServiceWithHttpInfo(service, stage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Hideservice 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceMessageResponse</returns>
        public Ehelply.Sdk.Client.ApiResponse<ServiceMessageResponse> HideServiceWithHttpInfo(string service, string stage, int operationIndex = 0)
        {
            // verify the required parameter 'service' is set
            if (service == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->HideService");
            }

            // verify the required parameter 'stage' is set
            if (stage == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'stage' when calling MonitorApi->HideService");
            }

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("stage", Ehelply.Sdk.Client.ClientUtils.ParameterToString(stage)); // path parameter

            localVarRequestOptions.Operation = "MonitorApi.HideService";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ServiceMessageResponse>("/sam/monitor/services/{service}/stages/{stage}/hide", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HideService", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Hideservice 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceMessageResponse</returns>
        public async System.Threading.Tasks.Task<ServiceMessageResponse> HideServiceAsync(string service, string stage, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<ServiceMessageResponse> localVarResponse = await HideServiceWithHttpInfoAsync(service, stage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Hideservice 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceMessageResponse)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<ServiceMessageResponse>> HideServiceWithHttpInfoAsync(string service, string stage, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'service' is set
            if (service == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->HideService");
            }

            // verify the required parameter 'stage' is set
            if (stage == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'stage' when calling MonitorApi->HideService");
            }


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("stage", Ehelply.Sdk.Client.ClientUtils.ParameterToString(stage)); // path parameter

            localVarRequestOptions.Operation = "MonitorApi.HideService";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ServiceMessageResponse>("/sam/monitor/services/{service}/stages/{stage}/hide", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HideService", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Ignorealarm 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="alarmIgnore"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AlarmResponse</returns>
        public AlarmResponse IgnoreAlarm(string service, string stage, string alarmUuid, AlarmIgnore alarmIgnore, int operationIndex = 0)
        {
            Ehelply.Sdk.Client.ApiResponse<AlarmResponse> localVarResponse = IgnoreAlarmWithHttpInfo(service, stage, alarmUuid, alarmIgnore);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Ignorealarm 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="alarmIgnore"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AlarmResponse</returns>
        public Ehelply.Sdk.Client.ApiResponse<AlarmResponse> IgnoreAlarmWithHttpInfo(string service, string stage, string alarmUuid, AlarmIgnore alarmIgnore, int operationIndex = 0)
        {
            // verify the required parameter 'service' is set
            if (service == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->IgnoreAlarm");
            }

            // verify the required parameter 'stage' is set
            if (stage == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'stage' when calling MonitorApi->IgnoreAlarm");
            }

            // verify the required parameter 'alarmUuid' is set
            if (alarmUuid == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'alarmUuid' when calling MonitorApi->IgnoreAlarm");
            }

            // verify the required parameter 'alarmIgnore' is set
            if (alarmIgnore == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'alarmIgnore' when calling MonitorApi->IgnoreAlarm");
            }

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("stage", Ehelply.Sdk.Client.ClientUtils.ParameterToString(stage)); // path parameter
            localVarRequestOptions.PathParameters.Add("alarm_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(alarmUuid)); // path parameter
            localVarRequestOptions.Data = alarmIgnore;

            localVarRequestOptions.Operation = "MonitorApi.IgnoreAlarm";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<AlarmResponse>("/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}/ignore", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IgnoreAlarm", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Ignorealarm 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="alarmIgnore"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AlarmResponse</returns>
        public async System.Threading.Tasks.Task<AlarmResponse> IgnoreAlarmAsync(string service, string stage, string alarmUuid, AlarmIgnore alarmIgnore, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<AlarmResponse> localVarResponse = await IgnoreAlarmWithHttpInfoAsync(service, stage, alarmUuid, alarmIgnore, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Ignorealarm 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="alarmIgnore"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AlarmResponse)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<AlarmResponse>> IgnoreAlarmWithHttpInfoAsync(string service, string stage, string alarmUuid, AlarmIgnore alarmIgnore, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'service' is set
            if (service == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->IgnoreAlarm");
            }

            // verify the required parameter 'stage' is set
            if (stage == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'stage' when calling MonitorApi->IgnoreAlarm");
            }

            // verify the required parameter 'alarmUuid' is set
            if (alarmUuid == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'alarmUuid' when calling MonitorApi->IgnoreAlarm");
            }

            // verify the required parameter 'alarmIgnore' is set
            if (alarmIgnore == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'alarmIgnore' when calling MonitorApi->IgnoreAlarm");
            }


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("stage", Ehelply.Sdk.Client.ClientUtils.ParameterToString(stage)); // path parameter
            localVarRequestOptions.PathParameters.Add("alarm_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(alarmUuid)); // path parameter
            localVarRequestOptions.Data = alarmIgnore;

            localVarRequestOptions.Operation = "MonitorApi.IgnoreAlarm";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AlarmResponse>("/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}/ignore", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IgnoreAlarm", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Registerservice 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceCreate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceResponse</returns>
        public ServiceResponse RegisterService(ServiceCreate serviceCreate, int operationIndex = 0)
        {
            Ehelply.Sdk.Client.ApiResponse<ServiceResponse> localVarResponse = RegisterServiceWithHttpInfo(serviceCreate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Registerservice 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceCreate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceResponse</returns>
        public Ehelply.Sdk.Client.ApiResponse<ServiceResponse> RegisterServiceWithHttpInfo(ServiceCreate serviceCreate, int operationIndex = 0)
        {
            // verify the required parameter 'serviceCreate' is set
            if (serviceCreate == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'serviceCreate' when calling MonitorApi->RegisterService");
            }

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = serviceCreate;

            localVarRequestOptions.Operation = "MonitorApi.RegisterService";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ServiceResponse>("/sam/monitor/services", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegisterService", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Registerservice 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceCreate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceResponse</returns>
        public async System.Threading.Tasks.Task<ServiceResponse> RegisterServiceAsync(ServiceCreate serviceCreate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<ServiceResponse> localVarResponse = await RegisterServiceWithHttpInfoAsync(serviceCreate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Registerservice 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceCreate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceResponse)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<ServiceResponse>> RegisterServiceWithHttpInfoAsync(ServiceCreate serviceCreate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'serviceCreate' is set
            if (serviceCreate == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'serviceCreate' when calling MonitorApi->RegisterService");
            }


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = serviceCreate;

            localVarRequestOptions.Operation = "MonitorApi.RegisterService";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ServiceResponse>("/sam/monitor/services", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegisterService", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Searchalarms 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 25)</param>
        /// <param name="search"> (optional)</param>
        /// <param name="searchOn"> (optional)</param>
        /// <param name="sortOn"> (optional)</param>
        /// <param name="sortDesc"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Page</returns>
        public Page SearchAlarms(string service, int? page = default(int?), int? pageSize = default(int?), string search = default(string), string searchOn = default(string), string sortOn = default(string), bool? sortDesc = default(bool?), int operationIndex = 0)
        {
            Ehelply.Sdk.Client.ApiResponse<Page> localVarResponse = SearchAlarmsWithHttpInfo(service, page, pageSize, search, searchOn, sortOn, sortDesc);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Searchalarms 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 25)</param>
        /// <param name="search"> (optional)</param>
        /// <param name="searchOn"> (optional)</param>
        /// <param name="sortOn"> (optional)</param>
        /// <param name="sortDesc"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Page</returns>
        public Ehelply.Sdk.Client.ApiResponse<Page> SearchAlarmsWithHttpInfo(string service, int? page = default(int?), int? pageSize = default(int?), string search = default(string), string searchOn = default(string), string sortOn = default(string), bool? sortDesc = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'service' is set
            if (service == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->SearchAlarms");
            }

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (searchOn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "search_on", searchOn));
            }
            if (sortOn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort_on", sortOn));
            }
            if (sortDesc != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort_desc", sortDesc));
            }

            localVarRequestOptions.Operation = "MonitorApi.SearchAlarms";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Page>("/sam/monitor/services/{service}/alarms", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchAlarms", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Searchalarms 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 25)</param>
        /// <param name="search"> (optional)</param>
        /// <param name="searchOn"> (optional)</param>
        /// <param name="sortOn"> (optional)</param>
        /// <param name="sortDesc"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Page</returns>
        public async System.Threading.Tasks.Task<Page> SearchAlarmsAsync(string service, int? page = default(int?), int? pageSize = default(int?), string search = default(string), string searchOn = default(string), string sortOn = default(string), bool? sortDesc = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<Page> localVarResponse = await SearchAlarmsWithHttpInfoAsync(service, page, pageSize, search, searchOn, sortOn, sortDesc, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Searchalarms 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 25)</param>
        /// <param name="search"> (optional)</param>
        /// <param name="searchOn"> (optional)</param>
        /// <param name="sortOn"> (optional)</param>
        /// <param name="sortDesc"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Page)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<Page>> SearchAlarmsWithHttpInfoAsync(string service, int? page = default(int?), int? pageSize = default(int?), string search = default(string), string searchOn = default(string), string sortOn = default(string), bool? sortDesc = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'service' is set
            if (service == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->SearchAlarms");
            }


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (searchOn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "search_on", searchOn));
            }
            if (sortOn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort_on", sortOn));
            }
            if (sortDesc != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ehelply.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort_desc", sortDesc));
            }

            localVarRequestOptions.Operation = "MonitorApi.SearchAlarms";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Page>("/sam/monitor/services/{service}/alarms", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchAlarms", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Showservice 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ServiceMessageResponse</returns>
        public ServiceMessageResponse ShowService(string service, string stage, int operationIndex = 0)
        {
            Ehelply.Sdk.Client.ApiResponse<ServiceMessageResponse> localVarResponse = ShowServiceWithHttpInfo(service, stage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Showservice 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ServiceMessageResponse</returns>
        public Ehelply.Sdk.Client.ApiResponse<ServiceMessageResponse> ShowServiceWithHttpInfo(string service, string stage, int operationIndex = 0)
        {
            // verify the required parameter 'service' is set
            if (service == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->ShowService");
            }

            // verify the required parameter 'stage' is set
            if (stage == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'stage' when calling MonitorApi->ShowService");
            }

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("stage", Ehelply.Sdk.Client.ClientUtils.ParameterToString(stage)); // path parameter

            localVarRequestOptions.Operation = "MonitorApi.ShowService";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ServiceMessageResponse>("/sam/monitor/services/{service}/stages/{stage}/show", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowService", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Showservice 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ServiceMessageResponse</returns>
        public async System.Threading.Tasks.Task<ServiceMessageResponse> ShowServiceAsync(string service, string stage, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<ServiceMessageResponse> localVarResponse = await ShowServiceWithHttpInfoAsync(service, stage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Showservice 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ServiceMessageResponse)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<ServiceMessageResponse>> ShowServiceWithHttpInfoAsync(string service, string stage, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'service' is set
            if (service == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->ShowService");
            }

            // verify the required parameter 'stage' is set
            if (stage == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'stage' when calling MonitorApi->ShowService");
            }


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("stage", Ehelply.Sdk.Client.ClientUtils.ParameterToString(stage)); // path parameter

            localVarRequestOptions.Operation = "MonitorApi.ShowService";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ServiceMessageResponse>("/sam/monitor/services/{service}/stages/{stage}/show", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowService", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Terminatealarm 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="alarmTerminate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AlarmResponse</returns>
        public AlarmResponse TerminateAlarm(string service, string stage, string alarmUuid, AlarmTerminate alarmTerminate, int operationIndex = 0)
        {
            Ehelply.Sdk.Client.ApiResponse<AlarmResponse> localVarResponse = TerminateAlarmWithHttpInfo(service, stage, alarmUuid, alarmTerminate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Terminatealarm 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="alarmTerminate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AlarmResponse</returns>
        public Ehelply.Sdk.Client.ApiResponse<AlarmResponse> TerminateAlarmWithHttpInfo(string service, string stage, string alarmUuid, AlarmTerminate alarmTerminate, int operationIndex = 0)
        {
            // verify the required parameter 'service' is set
            if (service == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->TerminateAlarm");
            }

            // verify the required parameter 'stage' is set
            if (stage == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'stage' when calling MonitorApi->TerminateAlarm");
            }

            // verify the required parameter 'alarmUuid' is set
            if (alarmUuid == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'alarmUuid' when calling MonitorApi->TerminateAlarm");
            }

            // verify the required parameter 'alarmTerminate' is set
            if (alarmTerminate == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'alarmTerminate' when calling MonitorApi->TerminateAlarm");
            }

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("stage", Ehelply.Sdk.Client.ClientUtils.ParameterToString(stage)); // path parameter
            localVarRequestOptions.PathParameters.Add("alarm_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(alarmUuid)); // path parameter
            localVarRequestOptions.Data = alarmTerminate;

            localVarRequestOptions.Operation = "MonitorApi.TerminateAlarm";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<AlarmResponse>("/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}/terminate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TerminateAlarm", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Terminatealarm 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="alarmTerminate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AlarmResponse</returns>
        public async System.Threading.Tasks.Task<AlarmResponse> TerminateAlarmAsync(string service, string stage, string alarmUuid, AlarmTerminate alarmTerminate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<AlarmResponse> localVarResponse = await TerminateAlarmWithHttpInfoAsync(service, stage, alarmUuid, alarmTerminate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Terminatealarm 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmUuid"></param>
        /// <param name="alarmTerminate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AlarmResponse)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<AlarmResponse>> TerminateAlarmWithHttpInfoAsync(string service, string stage, string alarmUuid, AlarmTerminate alarmTerminate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'service' is set
            if (service == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->TerminateAlarm");
            }

            // verify the required parameter 'stage' is set
            if (stage == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'stage' when calling MonitorApi->TerminateAlarm");
            }

            // verify the required parameter 'alarmUuid' is set
            if (alarmUuid == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'alarmUuid' when calling MonitorApi->TerminateAlarm");
            }

            // verify the required parameter 'alarmTerminate' is set
            if (alarmTerminate == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'alarmTerminate' when calling MonitorApi->TerminateAlarm");
            }


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("stage", Ehelply.Sdk.Client.ClientUtils.ParameterToString(stage)); // path parameter
            localVarRequestOptions.PathParameters.Add("alarm_uuid", Ehelply.Sdk.Client.ClientUtils.ParameterToString(alarmUuid)); // path parameter
            localVarRequestOptions.Data = alarmTerminate;

            localVarRequestOptions.Operation = "MonitorApi.TerminateAlarm";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AlarmResponse>("/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}/terminate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TerminateAlarm", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Triggeralarm 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmCreate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AlarmResponse</returns>
        public AlarmResponse TriggerAlarm(string service, string stage, AlarmCreate alarmCreate, int operationIndex = 0)
        {
            Ehelply.Sdk.Client.ApiResponse<AlarmResponse> localVarResponse = TriggerAlarmWithHttpInfo(service, stage, alarmCreate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Triggeralarm 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmCreate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AlarmResponse</returns>
        public Ehelply.Sdk.Client.ApiResponse<AlarmResponse> TriggerAlarmWithHttpInfo(string service, string stage, AlarmCreate alarmCreate, int operationIndex = 0)
        {
            // verify the required parameter 'service' is set
            if (service == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->TriggerAlarm");
            }

            // verify the required parameter 'stage' is set
            if (stage == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'stage' when calling MonitorApi->TriggerAlarm");
            }

            // verify the required parameter 'alarmCreate' is set
            if (alarmCreate == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'alarmCreate' when calling MonitorApi->TriggerAlarm");
            }

            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("stage", Ehelply.Sdk.Client.ClientUtils.ParameterToString(stage)); // path parameter
            localVarRequestOptions.Data = alarmCreate;

            localVarRequestOptions.Operation = "MonitorApi.TriggerAlarm";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<AlarmResponse>("/sam/monitor/services/{service}/stages/{stage}/alarms", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TriggerAlarm", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Triggeralarm 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmCreate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AlarmResponse</returns>
        public async System.Threading.Tasks.Task<AlarmResponse> TriggerAlarmAsync(string service, string stage, AlarmCreate alarmCreate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ehelply.Sdk.Client.ApiResponse<AlarmResponse> localVarResponse = await TriggerAlarmWithHttpInfoAsync(service, stage, alarmCreate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Triggeralarm 
        /// </summary>
        /// <exception cref="Ehelply.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service"></param>
        /// <param name="stage"></param>
        /// <param name="alarmCreate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AlarmResponse)</returns>
        public async System.Threading.Tasks.Task<Ehelply.Sdk.Client.ApiResponse<AlarmResponse>> TriggerAlarmWithHttpInfoAsync(string service, string stage, AlarmCreate alarmCreate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'service' is set
            if (service == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'service' when calling MonitorApi->TriggerAlarm");
            }

            // verify the required parameter 'stage' is set
            if (stage == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'stage' when calling MonitorApi->TriggerAlarm");
            }

            // verify the required parameter 'alarmCreate' is set
            if (alarmCreate == null)
            {
                throw new Ehelply.Sdk.Client.ApiException(400, "Missing required parameter 'alarmCreate' when calling MonitorApi->TriggerAlarm");
            }


            Ehelply.Sdk.Client.RequestOptions localVarRequestOptions = new Ehelply.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ehelply.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Ehelply.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("service", Ehelply.Sdk.Client.ClientUtils.ParameterToString(service)); // path parameter
            localVarRequestOptions.PathParameters.Add("stage", Ehelply.Sdk.Client.ClientUtils.ParameterToString(stage)); // path parameter
            localVarRequestOptions.Data = alarmCreate;

            localVarRequestOptions.Operation = "MonitorApi.TriggerAlarm";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AlarmResponse>("/sam/monitor/services/{service}/stages/{stage}/alarms", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TriggerAlarm", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
