/*
 * eHelply SDK - 1.1.51
 *
 * eHelply SDK for SuperStack Services
 *
 * The version of the OpenAPI document: 1.1.51
 * Contact: support@ehelply.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Ehelply.Sdk.Client;
using Ehelply.Sdk.Api;
// uncomment below to import models
//using Ehelply.Sdk.Model;

namespace Ehelply.Sdk.Test.Api
{
    /// <summary>
    ///  Class for testing MetaApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class MetaApiTests : IDisposable
    {
        private MetaApi instance;

        public MetaApiTests()
        {
            instance = new MetaApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of MetaApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' MetaApi
            //Assert.IsType<MetaApi>(instance);
        }

        /// <summary>
        /// Test DeleteMetaFromUuidMetaMetaMetaUuidDelete
        /// </summary>
        [Fact]
        public void DeleteMetaFromUuidMetaMetaMetaUuidDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string metaUuid = null;
            //string xAccessToken = null;
            //string xSecretToken = null;
            //string authorization = null;
            //string ehelplyActiveParticipant = null;
            //string ehelplyProject = null;
            //string ehelplyData = null;
            //var response = instance.DeleteMetaFromUuidMetaMetaMetaUuidDelete(metaUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test DeleteMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidDelete
        /// </summary>
        [Fact]
        public void DeleteMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string service = null;
            //string type = null;
            //string entityUuid = null;
            //string xAccessToken = null;
            //string xSecretToken = null;
            //string authorization = null;
            //string ehelplyActiveParticipant = null;
            //string ehelplyProject = null;
            //string ehelplyData = null;
            //var response = instance.DeleteMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidDelete(service, type, entityUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test GetMetaFromUuidMetaMetaMetaUuidGet
        /// </summary>
        [Fact]
        public void GetMetaFromUuidMetaMetaMetaUuidGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string metaUuid = null;
            //bool? detailed = null;
            //bool? custom = null;
            //bool? dates = null;
            //int? history = null;
            //string xAccessToken = null;
            //string xSecretToken = null;
            //string authorization = null;
            //string ehelplyActiveParticipant = null;
            //string ehelplyProject = null;
            //string ehelplyData = null;
            //var response = instance.GetMetaFromUuidMetaMetaMetaUuidGet(metaUuid, detailed, custom, dates, history, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test GetMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidGet
        /// </summary>
        [Fact]
        public void GetMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string service = null;
            //string type = null;
            //string entityUuid = null;
            //bool? detailed = null;
            //bool? custom = null;
            //bool? dates = null;
            //int? history = null;
            //string xAccessToken = null;
            //string xSecretToken = null;
            //string authorization = null;
            //string ehelplyActiveParticipant = null;
            //string ehelplyProject = null;
            //string ehelplyData = null;
            //var response = instance.GetMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidGet(service, type, entityUuid, detailed, custom, dates, history, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test MakeSlugMetaMetaSlugPost
        /// </summary>
        [Fact]
        public void MakeSlugMetaMetaSlugPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MetaSlugger metaSlugger = null;
            //var response = instance.MakeSlugMetaMetaSlugPost(metaSlugger);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test PostMetaMetaMetaServiceServiceTypeTypeStrEntityEntityUuidPost
        /// </summary>
        [Fact]
        public void PostMetaMetaMetaServiceServiceTypeTypeStrEntityEntityUuidPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string service = null;
            //string typeStr = null;
            //string entityUuid = null;
            //BodyPostMetaMetaMetaServiceServiceTypeTypeStrEntityEntityUuidPost bodyPostMetaMetaMetaServiceServiceTypeTypeStrEntityEntityUuidPost = null;
            //string xAccessToken = null;
            //string xSecretToken = null;
            //string authorization = null;
            //string ehelplyActiveParticipant = null;
            //string ehelplyProject = null;
            //string ehelplyData = null;
            //var response = instance.PostMetaMetaMetaServiceServiceTypeTypeStrEntityEntityUuidPost(service, typeStr, entityUuid, bodyPostMetaMetaMetaServiceServiceTypeTypeStrEntityEntityUuidPost, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            //Assert.IsType<MetaDynamo>(response);
        }

        /// <summary>
        /// Test TouchMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidTouchPost
        /// </summary>
        [Fact]
        public void TouchMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidTouchPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string service = null;
            //string type = null;
            //string entityUuid = null;
            //string xAccessToken = null;
            //string xSecretToken = null;
            //string authorization = null;
            //string ehelplyActiveParticipant = null;
            //string ehelplyProject = null;
            //string ehelplyData = null;
            //var response = instance.TouchMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidTouchPost(service, type, entityUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            //Assert.IsType<MetaDynamo>(response);
        }

        /// <summary>
        /// Test UpdateMetaFromUuidMetaMetaMetaUuidPut
        /// </summary>
        [Fact]
        public void UpdateMetaFromUuidMetaMetaMetaUuidPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string metaUuid = null;
            //BodyUpdateMetaFromUuidMetaMetaMetaUuidPut bodyUpdateMetaFromUuidMetaMetaMetaUuidPut = null;
            //string xAccessToken = null;
            //string xSecretToken = null;
            //string authorization = null;
            //string ehelplyActiveParticipant = null;
            //string ehelplyProject = null;
            //string ehelplyData = null;
            //var response = instance.UpdateMetaFromUuidMetaMetaMetaUuidPut(metaUuid, bodyUpdateMetaFromUuidMetaMetaMetaUuidPut, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            //Assert.IsType<MetaDynamo>(response);
        }

        /// <summary>
        /// Test UpdateMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidPut
        /// </summary>
        [Fact]
        public void UpdateMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string service = null;
            //string type = null;
            //string entityUuid = null;
            //BodyUpdateMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidPut bodyUpdateMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidPut = null;
            //string xAccessToken = null;
            //string xSecretToken = null;
            //string authorization = null;
            //string ehelplyActiveParticipant = null;
            //string ehelplyProject = null;
            //string ehelplyData = null;
            //var response = instance.UpdateMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidPut(service, type, entityUuid, bodyUpdateMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidPut, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            //Assert.IsType<MetaDynamo>(response);
        }
    }
}
