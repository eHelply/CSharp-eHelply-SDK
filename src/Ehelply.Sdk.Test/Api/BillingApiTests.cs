/*
 * eHelply SDK - 1.1.53
 *
 * eHelply SDK for SuperStack Services
 *
 * The version of the OpenAPI document: 1.1.53
 * Contact: support@ehelply.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Ehelply.Sdk.Client;
using Ehelply.Sdk.Api;
// uncomment below to import models
//using Ehelply.Sdk.Model;

namespace Ehelply.Sdk.Test.Api
{
    /// <summary>
    ///  Class for testing BillingApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class BillingApiTests : IDisposable
    {
        private BillingApi instance;

        public BillingApiTests()
        {
            instance = new BillingApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of BillingApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' BillingApi
            //Assert.IsType<BillingApi>(instance);
        }

        /// <summary>
        /// Test AttachPaymentToProjectBillingAttachPaymentToProjectPost
        /// </summary>
        [Fact]
        public void AttachPaymentToProjectBillingAttachPaymentToProjectPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BodyAttachPaymentToProjectBillingAttachPaymentToProjectPost bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost = null;
            //string xAccessToken = null;
            //string xSecretToken = null;
            //string authorization = null;
            //string ehelplyActiveParticipant = null;
            //string ehelplyProject = null;
            //string ehelplyData = null;
            //var response = instance.AttachPaymentToProjectBillingAttachPaymentToProjectPost(bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test AttachPaymentToProjectBillingAttachPaymentToProjectPost_0
        /// </summary>
        [Fact]
        public void AttachPaymentToProjectBillingAttachPaymentToProjectPost_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BodyAttachPaymentToProjectBillingAttachPaymentToProjectPost bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost = null;
            //string xAccessToken = null;
            //string xSecretToken = null;
            //string authorization = null;
            //string ehelplyActiveParticipant = null;
            //string ehelplyProject = null;
            //string ehelplyData = null;
            //var response = instance.AttachPaymentToProjectBillingAttachPaymentToProjectPost_0(bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CreateBillingAccountBillingCreateBillingAccountPost
        /// </summary>
        [Fact]
        public void CreateBillingAccountBillingCreateBillingAccountPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xAccessToken = null;
            //string xSecretToken = null;
            //string authorization = null;
            //string ehelplyActiveParticipant = null;
            //string ehelplyProject = null;
            //string ehelplyData = null;
            //var response = instance.CreateBillingAccountBillingCreateBillingAccountPost(xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            //Assert.IsType<StripeAccountResponse>(response);
        }

        /// <summary>
        /// Test CreateBillingAccountBillingCreateBillingAccountPost_0
        /// </summary>
        [Fact]
        public void CreateBillingAccountBillingCreateBillingAccountPost_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xAccessToken = null;
            //string xSecretToken = null;
            //string authorization = null;
            //string ehelplyActiveParticipant = null;
            //string ehelplyProject = null;
            //string ehelplyData = null;
            //var response = instance.CreateBillingAccountBillingCreateBillingAccountPost_0(xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            //Assert.IsType<StripeAccountResponse>(response);
        }

        /// <summary>
        /// Test DeleteBillingAccountBillingDeleteBillingAccountDelete
        /// </summary>
        [Fact]
        public void DeleteBillingAccountBillingDeleteBillingAccountDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xAccessToken = null;
            //string xSecretToken = null;
            //string authorization = null;
            //string ehelplyActiveParticipant = null;
            //string ehelplyProject = null;
            //string ehelplyData = null;
            //var response = instance.DeleteBillingAccountBillingDeleteBillingAccountDelete(xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test DeleteBillingAccountBillingDeleteBillingAccountDelete_0
        /// </summary>
        [Fact]
        public void DeleteBillingAccountBillingDeleteBillingAccountDelete_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xAccessToken = null;
            //string xSecretToken = null;
            //string authorization = null;
            //string ehelplyActiveParticipant = null;
            //string ehelplyProject = null;
            //string ehelplyData = null;
            //var response = instance.DeleteBillingAccountBillingDeleteBillingAccountDelete_0(xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test GetClientSecretBillingRetrieveSecretGet
        /// </summary>
        [Fact]
        public void GetClientSecretBillingRetrieveSecretGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xAccessToken = null;
            //string xSecretToken = null;
            //string authorization = null;
            //string ehelplyActiveParticipant = null;
            //string ehelplyProject = null;
            //string ehelplyData = null;
            //var response = instance.GetClientSecretBillingRetrieveSecretGet(xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test GetClientSecretBillingRetrieveSecretGet_0
        /// </summary>
        [Fact]
        public void GetClientSecretBillingRetrieveSecretGet_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xAccessToken = null;
            //string xSecretToken = null;
            //string authorization = null;
            //string ehelplyActiveParticipant = null;
            //string ehelplyProject = null;
            //string ehelplyData = null;
            //var response = instance.GetClientSecretBillingRetrieveSecretGet_0(xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test HasPaymentBillingHasPaymentGet
        /// </summary>
        [Fact]
        public void HasPaymentBillingHasPaymentGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xAccessToken = null;
            //string xSecretToken = null;
            //string authorization = null;
            //string ehelplyActiveParticipant = null;
            //string ehelplyProject = null;
            //string ehelplyData = null;
            //var response = instance.HasPaymentBillingHasPaymentGet(xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test HasPaymentBillingHasPaymentGet_0
        /// </summary>
        [Fact]
        public void HasPaymentBillingHasPaymentGet_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xAccessToken = null;
            //string xSecretToken = null;
            //string authorization = null;
            //string ehelplyActiveParticipant = null;
            //string ehelplyProject = null;
            //string ehelplyData = null;
            //var response = instance.HasPaymentBillingHasPaymentGet_0(xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test ProcessPaymentBillingProcessPaymentPost
        /// </summary>
        [Fact]
        public void ProcessPaymentBillingProcessPaymentPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BodyProcessPaymentBillingProcessPaymentPost bodyProcessPaymentBillingProcessPaymentPost = null;
            //string xAccessToken = null;
            //string xSecretToken = null;
            //string authorization = null;
            //string ehelplyActiveParticipant = null;
            //string ehelplyProject = null;
            //string ehelplyData = null;
            //var response = instance.ProcessPaymentBillingProcessPaymentPost(bodyProcessPaymentBillingProcessPaymentPost, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test ProcessPaymentBillingProcessPaymentPost_0
        /// </summary>
        [Fact]
        public void ProcessPaymentBillingProcessPaymentPost_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BodyProcessPaymentBillingProcessPaymentPost bodyProcessPaymentBillingProcessPaymentPost = null;
            //string xAccessToken = null;
            //string xSecretToken = null;
            //string authorization = null;
            //string ehelplyActiveParticipant = null;
            //string ehelplyProject = null;
            //string ehelplyData = null;
            //var response = instance.ProcessPaymentBillingProcessPaymentPost_0(bodyProcessPaymentBillingProcessPaymentPost, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test ReconcilePaymentMethodsBillingReconcilePaymentGet
        /// </summary>
        [Fact]
        public void ReconcilePaymentMethodsBillingReconcilePaymentGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xAccessToken = null;
            //string xSecretToken = null;
            //string authorization = null;
            //string ehelplyActiveParticipant = null;
            //string ehelplyProject = null;
            //string ehelplyData = null;
            //var response = instance.ReconcilePaymentMethodsBillingReconcilePaymentGet(xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            //Assert.IsType<bool>(response);
        }

        /// <summary>
        /// Test RemovePaymentMethodBillingRemovePaymentMethodDelete
        /// </summary>
        [Fact]
        public void RemovePaymentMethodBillingRemovePaymentMethodDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xAccessToken = null;
            //string xSecretToken = null;
            //string authorization = null;
            //string ehelplyActiveParticipant = null;
            //string ehelplyProject = null;
            //string ehelplyData = null;
            //var response = instance.RemovePaymentMethodBillingRemovePaymentMethodDelete(xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test RemovePaymentMethodBillingRemovePaymentMethodDelete_0
        /// </summary>
        [Fact]
        public void RemovePaymentMethodBillingRemovePaymentMethodDelete_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xAccessToken = null;
            //string xSecretToken = null;
            //string authorization = null;
            //string ehelplyActiveParticipant = null;
            //string ehelplyProject = null;
            //string ehelplyData = null;
            //var response = instance.RemovePaymentMethodBillingRemovePaymentMethodDelete_0(xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test ViewPaymentMethodBillingViewPaymentMethodGet
        /// </summary>
        [Fact]
        public void ViewPaymentMethodBillingViewPaymentMethodGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xAccessToken = null;
            //string xSecretToken = null;
            //string authorization = null;
            //string ehelplyActiveParticipant = null;
            //string ehelplyProject = null;
            //string ehelplyData = null;
            //var response = instance.ViewPaymentMethodBillingViewPaymentMethodGet(xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            //Assert.IsType<List<PaymentMethodResponse>>(response);
        }

        /// <summary>
        /// Test ViewPaymentMethodBillingViewPaymentMethodGet_0
        /// </summary>
        [Fact]
        public void ViewPaymentMethodBillingViewPaymentMethodGet_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xAccessToken = null;
            //string xSecretToken = null;
            //string authorization = null;
            //string ehelplyActiveParticipant = null;
            //string ehelplyProject = null;
            //string ehelplyData = null;
            //var response = instance.ViewPaymentMethodBillingViewPaymentMethodGet_0(xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData);
            //Assert.IsType<List<PaymentMethodResponse>>(response);
        }
    }
}
